
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model AccessKey
 * 
 */
export type AccessKey = $Result.DefaultSelection<Prisma.$AccessKeyPayload>
/**
 * Model BookShelfStory
 * 
 */
export type BookShelfStory = $Result.DefaultSelection<Prisma.$BookShelfStoryPayload>
/**
 * Model Story
 * 
 */
export type Story = $Result.DefaultSelection<Prisma.$StoryPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model StoryTag
 * 
 */
export type StoryTag = $Result.DefaultSelection<Prisma.$StoryTagPayload>
/**
 * Model StoryReadStatus
 * 
 */
export type StoryReadStatus = $Result.DefaultSelection<Prisma.$StoryReadStatusPayload>
/**
 * Model Book
 * 
 */
export type Book = $Result.DefaultSelection<Prisma.$BookPayload>
/**
 * Model Arc
 * 
 */
export type Arc = $Result.DefaultSelection<Prisma.$ArcPayload>
/**
 * Model Chapter
 * 
 */
export type Chapter = $Result.DefaultSelection<Prisma.$ChapterPayload>
/**
 * Model Scene
 * 
 */
export type Scene = $Result.DefaultSelection<Prisma.$ScenePayload>
/**
 * Model Paragraph
 * 
 */
export type Paragraph = $Result.DefaultSelection<Prisma.$ParagraphPayload>
/**
 * Model ParagraphRevision
 * 
 */
export type ParagraphRevision = $Result.DefaultSelection<Prisma.$ParagraphRevisionPayload>
/**
 * Model ParagraphComment
 * 
 */
export type ParagraphComment = $Result.DefaultSelection<Prisma.$ParagraphCommentPayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>
/**
 * Model ChapterPublishing
 * 
 */
export type ChapterPublishing = $Result.DefaultSelection<Prisma.$ChapterPublishingPayload>
/**
 * Model Character
 * 
 */
export type Character = $Result.DefaultSelection<Prisma.$CharacterPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model PlotPoint
 * 
 */
export type PlotPoint = $Result.DefaultSelection<Prisma.$PlotPointPayload>
/**
 * Model Item
 * 
 */
export type Item = $Result.DefaultSelection<Prisma.$ItemPayload>
/**
 * Model SceneCharacter
 * 
 */
export type SceneCharacter = $Result.DefaultSelection<Prisma.$SceneCharacterPayload>
/**
 * Model SceneReferredCharacter
 * 
 */
export type SceneReferredCharacter = $Result.DefaultSelection<Prisma.$SceneReferredCharacterPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const SavedType: {
  FAVORITE: 'FAVORITE',
  FOLLOW: 'FOLLOW',
  READ_LATER: 'READ_LATER'
};

export type SavedType = (typeof SavedType)[keyof typeof SavedType]


export const StoryStatus: {
  COMPLETED: 'COMPLETED',
  ONGOING: 'ONGOING',
  HIATUS: 'HIATUS'
};

export type StoryStatus = (typeof StoryStatus)[keyof typeof StoryStatus]


export const StoryType: {
  FANFICTION: 'FANFICTION',
  ORIGINAL: 'ORIGINAL'
};

export type StoryType = (typeof StoryType)[keyof typeof StoryType]


export const PublishingPlatform: {
  ROYAL_ROAD: 'ROYAL_ROAD'
};

export type PublishingPlatform = (typeof PublishingPlatform)[keyof typeof PublishingPlatform]


export const PublishingStatus: {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  FAILED: 'FAILED'
};

export type PublishingStatus = (typeof PublishingStatus)[keyof typeof PublishingStatus]


export const ParagraphCommentType: {
  COMMENT: 'COMMENT',
  SUGGESTION: 'SUGGESTION'
};

export type ParagraphCommentType = (typeof ParagraphCommentType)[keyof typeof ParagraphCommentType]


export const Perspective: {
  FIRST: 'FIRST',
  THIRD: 'THIRD'
};

export type Perspective = (typeof Perspective)[keyof typeof Perspective]


export const PlotPointState: {
  INTRODUCED: 'INTRODUCED',
  UNRESOLVED: 'UNRESOLVED',
  RESOLVED: 'RESOLVED'
};

export type PlotPointState = (typeof PlotPointState)[keyof typeof PlotPointState]


export const ParagraphState: {
  AI: 'AI',
  DRAFT: 'DRAFT',
  REVISE: 'REVISE',
  FINAL: 'FINAL',
  SDT: 'SDT'
};

export type ParagraphState = (typeof ParagraphState)[keyof typeof ParagraphState]


export const PlotPointActionType: {
  INTRODUCE: 'INTRODUCE',
  MENTIONED: 'MENTIONED',
  PARTIALLY_RESOLVED: 'PARTIALLY_RESOLVED',
  RESOLVED: 'RESOLVED'
};

export type PlotPointActionType = (typeof PlotPointActionType)[keyof typeof PlotPointActionType]


export const InventoryActionType: {
  ADD: 'ADD',
  REMOVE: 'REMOVE'
};

export type InventoryActionType = (typeof InventoryActionType)[keyof typeof InventoryActionType]

}

export type SavedType = $Enums.SavedType

export const SavedType: typeof $Enums.SavedType

export type StoryStatus = $Enums.StoryStatus

export const StoryStatus: typeof $Enums.StoryStatus

export type StoryType = $Enums.StoryType

export const StoryType: typeof $Enums.StoryType

export type PublishingPlatform = $Enums.PublishingPlatform

export const PublishingPlatform: typeof $Enums.PublishingPlatform

export type PublishingStatus = $Enums.PublishingStatus

export const PublishingStatus: typeof $Enums.PublishingStatus

export type ParagraphCommentType = $Enums.ParagraphCommentType

export const ParagraphCommentType: typeof $Enums.ParagraphCommentType

export type Perspective = $Enums.Perspective

export const Perspective: typeof $Enums.Perspective

export type PlotPointState = $Enums.PlotPointState

export const PlotPointState: typeof $Enums.PlotPointState

export type ParagraphState = $Enums.ParagraphState

export const ParagraphState: typeof $Enums.ParagraphState

export type PlotPointActionType = $Enums.PlotPointActionType

export const PlotPointActionType: typeof $Enums.PlotPointActionType

export type InventoryActionType = $Enums.InventoryActionType

export const InventoryActionType: typeof $Enums.InventoryActionType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.accessKey`: Exposes CRUD operations for the **AccessKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccessKeys
    * const accessKeys = await prisma.accessKey.findMany()
    * ```
    */
  get accessKey(): Prisma.AccessKeyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bookShelfStory`: Exposes CRUD operations for the **BookShelfStory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookShelfStories
    * const bookShelfStories = await prisma.bookShelfStory.findMany()
    * ```
    */
  get bookShelfStory(): Prisma.BookShelfStoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.story`: Exposes CRUD operations for the **Story** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stories
    * const stories = await prisma.story.findMany()
    * ```
    */
  get story(): Prisma.StoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.storyTag`: Exposes CRUD operations for the **StoryTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StoryTags
    * const storyTags = await prisma.storyTag.findMany()
    * ```
    */
  get storyTag(): Prisma.StoryTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.storyReadStatus`: Exposes CRUD operations for the **StoryReadStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StoryReadStatuses
    * const storyReadStatuses = await prisma.storyReadStatus.findMany()
    * ```
    */
  get storyReadStatus(): Prisma.StoryReadStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.book`: Exposes CRUD operations for the **Book** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.book.findMany()
    * ```
    */
  get book(): Prisma.BookDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.arc`: Exposes CRUD operations for the **Arc** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Arcs
    * const arcs = await prisma.arc.findMany()
    * ```
    */
  get arc(): Prisma.ArcDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chapter`: Exposes CRUD operations for the **Chapter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chapters
    * const chapters = await prisma.chapter.findMany()
    * ```
    */
  get chapter(): Prisma.ChapterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scene`: Exposes CRUD operations for the **Scene** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Scenes
    * const scenes = await prisma.scene.findMany()
    * ```
    */
  get scene(): Prisma.SceneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paragraph`: Exposes CRUD operations for the **Paragraph** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Paragraphs
    * const paragraphs = await prisma.paragraph.findMany()
    * ```
    */
  get paragraph(): Prisma.ParagraphDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paragraphRevision`: Exposes CRUD operations for the **ParagraphRevision** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParagraphRevisions
    * const paragraphRevisions = await prisma.paragraphRevision.findMany()
    * ```
    */
  get paragraphRevision(): Prisma.ParagraphRevisionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paragraphComment`: Exposes CRUD operations for the **ParagraphComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParagraphComments
    * const paragraphComments = await prisma.paragraphComment.findMany()
    * ```
    */
  get paragraphComment(): Prisma.ParagraphCommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chapterPublishing`: Exposes CRUD operations for the **ChapterPublishing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChapterPublishings
    * const chapterPublishings = await prisma.chapterPublishing.findMany()
    * ```
    */
  get chapterPublishing(): Prisma.ChapterPublishingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.character`: Exposes CRUD operations for the **Character** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Characters
    * const characters = await prisma.character.findMany()
    * ```
    */
  get character(): Prisma.CharacterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.plotPoint`: Exposes CRUD operations for the **PlotPoint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlotPoints
    * const plotPoints = await prisma.plotPoint.findMany()
    * ```
    */
  get plotPoint(): Prisma.PlotPointDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **Item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.ItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sceneCharacter`: Exposes CRUD operations for the **SceneCharacter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SceneCharacters
    * const sceneCharacters = await prisma.sceneCharacter.findMany()
    * ```
    */
  get sceneCharacter(): Prisma.SceneCharacterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sceneReferredCharacter`: Exposes CRUD operations for the **SceneReferredCharacter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SceneReferredCharacters
    * const sceneReferredCharacters = await prisma.sceneReferredCharacter.findMany()
    * ```
    */
  get sceneReferredCharacter(): Prisma.SceneReferredCharacterDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Session: 'Session',
    AccessKey: 'AccessKey',
    BookShelfStory: 'BookShelfStory',
    Story: 'Story',
    Tag: 'Tag',
    StoryTag: 'StoryTag',
    StoryReadStatus: 'StoryReadStatus',
    Book: 'Book',
    Arc: 'Arc',
    Chapter: 'Chapter',
    Scene: 'Scene',
    Paragraph: 'Paragraph',
    ParagraphRevision: 'ParagraphRevision',
    ParagraphComment: 'ParagraphComment',
    File: 'File',
    ChapterPublishing: 'ChapterPublishing',
    Character: 'Character',
    Location: 'Location',
    PlotPoint: 'PlotPoint',
    Item: 'Item',
    SceneCharacter: 'SceneCharacter',
    SceneReferredCharacter: 'SceneReferredCharacter'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "session" | "accessKey" | "bookShelfStory" | "story" | "tag" | "storyTag" | "storyReadStatus" | "book" | "arc" | "chapter" | "scene" | "paragraph" | "paragraphRevision" | "paragraphComment" | "file" | "chapterPublishing" | "character" | "location" | "plotPoint" | "item" | "sceneCharacter" | "sceneReferredCharacter"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      AccessKey: {
        payload: Prisma.$AccessKeyPayload<ExtArgs>
        fields: Prisma.AccessKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccessKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccessKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessKeyPayload>
          }
          findFirst: {
            args: Prisma.AccessKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccessKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessKeyPayload>
          }
          findMany: {
            args: Prisma.AccessKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessKeyPayload>[]
          }
          create: {
            args: Prisma.AccessKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessKeyPayload>
          }
          createMany: {
            args: Prisma.AccessKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccessKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessKeyPayload>
          }
          update: {
            args: Prisma.AccessKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessKeyPayload>
          }
          deleteMany: {
            args: Prisma.AccessKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccessKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccessKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessKeyPayload>
          }
          aggregate: {
            args: Prisma.AccessKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccessKey>
          }
          groupBy: {
            args: Prisma.AccessKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccessKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccessKeyCountArgs<ExtArgs>
            result: $Utils.Optional<AccessKeyCountAggregateOutputType> | number
          }
        }
      }
      BookShelfStory: {
        payload: Prisma.$BookShelfStoryPayload<ExtArgs>
        fields: Prisma.BookShelfStoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookShelfStoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookShelfStoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookShelfStoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookShelfStoryPayload>
          }
          findFirst: {
            args: Prisma.BookShelfStoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookShelfStoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookShelfStoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookShelfStoryPayload>
          }
          findMany: {
            args: Prisma.BookShelfStoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookShelfStoryPayload>[]
          }
          create: {
            args: Prisma.BookShelfStoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookShelfStoryPayload>
          }
          createMany: {
            args: Prisma.BookShelfStoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BookShelfStoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookShelfStoryPayload>
          }
          update: {
            args: Prisma.BookShelfStoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookShelfStoryPayload>
          }
          deleteMany: {
            args: Prisma.BookShelfStoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookShelfStoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BookShelfStoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookShelfStoryPayload>
          }
          aggregate: {
            args: Prisma.BookShelfStoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookShelfStory>
          }
          groupBy: {
            args: Prisma.BookShelfStoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookShelfStoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookShelfStoryCountArgs<ExtArgs>
            result: $Utils.Optional<BookShelfStoryCountAggregateOutputType> | number
          }
        }
      }
      Story: {
        payload: Prisma.$StoryPayload<ExtArgs>
        fields: Prisma.StoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          findFirst: {
            args: Prisma.StoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          findMany: {
            args: Prisma.StoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>[]
          }
          create: {
            args: Prisma.StoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          createMany: {
            args: Prisma.StoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          update: {
            args: Prisma.StoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          deleteMany: {
            args: Prisma.StoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          aggregate: {
            args: Prisma.StoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStory>
          }
          groupBy: {
            args: Prisma.StoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<StoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoryCountArgs<ExtArgs>
            result: $Utils.Optional<StoryCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      StoryTag: {
        payload: Prisma.$StoryTagPayload<ExtArgs>
        fields: Prisma.StoryTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoryTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoryTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryTagPayload>
          }
          findFirst: {
            args: Prisma.StoryTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoryTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryTagPayload>
          }
          findMany: {
            args: Prisma.StoryTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryTagPayload>[]
          }
          create: {
            args: Prisma.StoryTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryTagPayload>
          }
          createMany: {
            args: Prisma.StoryTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StoryTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryTagPayload>
          }
          update: {
            args: Prisma.StoryTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryTagPayload>
          }
          deleteMany: {
            args: Prisma.StoryTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StoryTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StoryTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryTagPayload>
          }
          aggregate: {
            args: Prisma.StoryTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStoryTag>
          }
          groupBy: {
            args: Prisma.StoryTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<StoryTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoryTagCountArgs<ExtArgs>
            result: $Utils.Optional<StoryTagCountAggregateOutputType> | number
          }
        }
      }
      StoryReadStatus: {
        payload: Prisma.$StoryReadStatusPayload<ExtArgs>
        fields: Prisma.StoryReadStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoryReadStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryReadStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoryReadStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryReadStatusPayload>
          }
          findFirst: {
            args: Prisma.StoryReadStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryReadStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoryReadStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryReadStatusPayload>
          }
          findMany: {
            args: Prisma.StoryReadStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryReadStatusPayload>[]
          }
          create: {
            args: Prisma.StoryReadStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryReadStatusPayload>
          }
          createMany: {
            args: Prisma.StoryReadStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StoryReadStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryReadStatusPayload>
          }
          update: {
            args: Prisma.StoryReadStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryReadStatusPayload>
          }
          deleteMany: {
            args: Prisma.StoryReadStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StoryReadStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StoryReadStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryReadStatusPayload>
          }
          aggregate: {
            args: Prisma.StoryReadStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStoryReadStatus>
          }
          groupBy: {
            args: Prisma.StoryReadStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<StoryReadStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoryReadStatusCountArgs<ExtArgs>
            result: $Utils.Optional<StoryReadStatusCountAggregateOutputType> | number
          }
        }
      }
      Book: {
        payload: Prisma.$BookPayload<ExtArgs>
        fields: Prisma.BookFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          findFirst: {
            args: Prisma.BookFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          findMany: {
            args: Prisma.BookFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>[]
          }
          create: {
            args: Prisma.BookCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          createMany: {
            args: Prisma.BookCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BookDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          update: {
            args: Prisma.BookUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          deleteMany: {
            args: Prisma.BookDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BookUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookPayload>
          }
          aggregate: {
            args: Prisma.BookAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBook>
          }
          groupBy: {
            args: Prisma.BookGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookCountArgs<ExtArgs>
            result: $Utils.Optional<BookCountAggregateOutputType> | number
          }
        }
      }
      Arc: {
        payload: Prisma.$ArcPayload<ExtArgs>
        fields: Prisma.ArcFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArcFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArcPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArcFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArcPayload>
          }
          findFirst: {
            args: Prisma.ArcFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArcPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArcFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArcPayload>
          }
          findMany: {
            args: Prisma.ArcFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArcPayload>[]
          }
          create: {
            args: Prisma.ArcCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArcPayload>
          }
          createMany: {
            args: Prisma.ArcCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ArcDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArcPayload>
          }
          update: {
            args: Prisma.ArcUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArcPayload>
          }
          deleteMany: {
            args: Prisma.ArcDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArcUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArcUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArcPayload>
          }
          aggregate: {
            args: Prisma.ArcAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArc>
          }
          groupBy: {
            args: Prisma.ArcGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArcGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArcCountArgs<ExtArgs>
            result: $Utils.Optional<ArcCountAggregateOutputType> | number
          }
        }
      }
      Chapter: {
        payload: Prisma.$ChapterPayload<ExtArgs>
        fields: Prisma.ChapterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChapterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChapterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          findFirst: {
            args: Prisma.ChapterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChapterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          findMany: {
            args: Prisma.ChapterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>[]
          }
          create: {
            args: Prisma.ChapterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          createMany: {
            args: Prisma.ChapterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ChapterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          update: {
            args: Prisma.ChapterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          deleteMany: {
            args: Prisma.ChapterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChapterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChapterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          aggregate: {
            args: Prisma.ChapterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChapter>
          }
          groupBy: {
            args: Prisma.ChapterGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChapterGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChapterCountArgs<ExtArgs>
            result: $Utils.Optional<ChapterCountAggregateOutputType> | number
          }
        }
      }
      Scene: {
        payload: Prisma.$ScenePayload<ExtArgs>
        fields: Prisma.SceneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SceneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SceneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>
          }
          findFirst: {
            args: Prisma.SceneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SceneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>
          }
          findMany: {
            args: Prisma.SceneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>[]
          }
          create: {
            args: Prisma.SceneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>
          }
          createMany: {
            args: Prisma.SceneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SceneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>
          }
          update: {
            args: Prisma.SceneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>
          }
          deleteMany: {
            args: Prisma.SceneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SceneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SceneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenePayload>
          }
          aggregate: {
            args: Prisma.SceneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScene>
          }
          groupBy: {
            args: Prisma.SceneGroupByArgs<ExtArgs>
            result: $Utils.Optional<SceneGroupByOutputType>[]
          }
          count: {
            args: Prisma.SceneCountArgs<ExtArgs>
            result: $Utils.Optional<SceneCountAggregateOutputType> | number
          }
        }
      }
      Paragraph: {
        payload: Prisma.$ParagraphPayload<ExtArgs>
        fields: Prisma.ParagraphFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParagraphFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParagraphFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphPayload>
          }
          findFirst: {
            args: Prisma.ParagraphFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParagraphFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphPayload>
          }
          findMany: {
            args: Prisma.ParagraphFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphPayload>[]
          }
          create: {
            args: Prisma.ParagraphCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphPayload>
          }
          createMany: {
            args: Prisma.ParagraphCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ParagraphDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphPayload>
          }
          update: {
            args: Prisma.ParagraphUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphPayload>
          }
          deleteMany: {
            args: Prisma.ParagraphDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParagraphUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ParagraphUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphPayload>
          }
          aggregate: {
            args: Prisma.ParagraphAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParagraph>
          }
          groupBy: {
            args: Prisma.ParagraphGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParagraphGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParagraphCountArgs<ExtArgs>
            result: $Utils.Optional<ParagraphCountAggregateOutputType> | number
          }
        }
      }
      ParagraphRevision: {
        payload: Prisma.$ParagraphRevisionPayload<ExtArgs>
        fields: Prisma.ParagraphRevisionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParagraphRevisionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphRevisionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParagraphRevisionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphRevisionPayload>
          }
          findFirst: {
            args: Prisma.ParagraphRevisionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphRevisionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParagraphRevisionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphRevisionPayload>
          }
          findMany: {
            args: Prisma.ParagraphRevisionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphRevisionPayload>[]
          }
          create: {
            args: Prisma.ParagraphRevisionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphRevisionPayload>
          }
          createMany: {
            args: Prisma.ParagraphRevisionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ParagraphRevisionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphRevisionPayload>
          }
          update: {
            args: Prisma.ParagraphRevisionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphRevisionPayload>
          }
          deleteMany: {
            args: Prisma.ParagraphRevisionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParagraphRevisionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ParagraphRevisionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphRevisionPayload>
          }
          aggregate: {
            args: Prisma.ParagraphRevisionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParagraphRevision>
          }
          groupBy: {
            args: Prisma.ParagraphRevisionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParagraphRevisionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParagraphRevisionCountArgs<ExtArgs>
            result: $Utils.Optional<ParagraphRevisionCountAggregateOutputType> | number
          }
        }
      }
      ParagraphComment: {
        payload: Prisma.$ParagraphCommentPayload<ExtArgs>
        fields: Prisma.ParagraphCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParagraphCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParagraphCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphCommentPayload>
          }
          findFirst: {
            args: Prisma.ParagraphCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParagraphCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphCommentPayload>
          }
          findMany: {
            args: Prisma.ParagraphCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphCommentPayload>[]
          }
          create: {
            args: Prisma.ParagraphCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphCommentPayload>
          }
          createMany: {
            args: Prisma.ParagraphCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ParagraphCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphCommentPayload>
          }
          update: {
            args: Prisma.ParagraphCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphCommentPayload>
          }
          deleteMany: {
            args: Prisma.ParagraphCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParagraphCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ParagraphCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParagraphCommentPayload>
          }
          aggregate: {
            args: Prisma.ParagraphCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParagraphComment>
          }
          groupBy: {
            args: Prisma.ParagraphCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParagraphCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParagraphCommentCountArgs<ExtArgs>
            result: $Utils.Optional<ParagraphCommentCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      ChapterPublishing: {
        payload: Prisma.$ChapterPublishingPayload<ExtArgs>
        fields: Prisma.ChapterPublishingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChapterPublishingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPublishingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChapterPublishingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPublishingPayload>
          }
          findFirst: {
            args: Prisma.ChapterPublishingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPublishingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChapterPublishingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPublishingPayload>
          }
          findMany: {
            args: Prisma.ChapterPublishingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPublishingPayload>[]
          }
          create: {
            args: Prisma.ChapterPublishingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPublishingPayload>
          }
          createMany: {
            args: Prisma.ChapterPublishingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ChapterPublishingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPublishingPayload>
          }
          update: {
            args: Prisma.ChapterPublishingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPublishingPayload>
          }
          deleteMany: {
            args: Prisma.ChapterPublishingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChapterPublishingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChapterPublishingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPublishingPayload>
          }
          aggregate: {
            args: Prisma.ChapterPublishingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChapterPublishing>
          }
          groupBy: {
            args: Prisma.ChapterPublishingGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChapterPublishingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChapterPublishingCountArgs<ExtArgs>
            result: $Utils.Optional<ChapterPublishingCountAggregateOutputType> | number
          }
        }
      }
      Character: {
        payload: Prisma.$CharacterPayload<ExtArgs>
        fields: Prisma.CharacterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CharacterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CharacterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          findFirst: {
            args: Prisma.CharacterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CharacterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          findMany: {
            args: Prisma.CharacterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>[]
          }
          create: {
            args: Prisma.CharacterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          createMany: {
            args: Prisma.CharacterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CharacterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          update: {
            args: Prisma.CharacterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          deleteMany: {
            args: Prisma.CharacterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CharacterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CharacterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          aggregate: {
            args: Prisma.CharacterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCharacter>
          }
          groupBy: {
            args: Prisma.CharacterGroupByArgs<ExtArgs>
            result: $Utils.Optional<CharacterGroupByOutputType>[]
          }
          count: {
            args: Prisma.CharacterCountArgs<ExtArgs>
            result: $Utils.Optional<CharacterCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      PlotPoint: {
        payload: Prisma.$PlotPointPayload<ExtArgs>
        fields: Prisma.PlotPointFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlotPointFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlotPointPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlotPointFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlotPointPayload>
          }
          findFirst: {
            args: Prisma.PlotPointFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlotPointPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlotPointFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlotPointPayload>
          }
          findMany: {
            args: Prisma.PlotPointFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlotPointPayload>[]
          }
          create: {
            args: Prisma.PlotPointCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlotPointPayload>
          }
          createMany: {
            args: Prisma.PlotPointCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlotPointDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlotPointPayload>
          }
          update: {
            args: Prisma.PlotPointUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlotPointPayload>
          }
          deleteMany: {
            args: Prisma.PlotPointDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlotPointUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlotPointUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlotPointPayload>
          }
          aggregate: {
            args: Prisma.PlotPointAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlotPoint>
          }
          groupBy: {
            args: Prisma.PlotPointGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlotPointGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlotPointCountArgs<ExtArgs>
            result: $Utils.Optional<PlotPointCountAggregateOutputType> | number
          }
        }
      }
      Item: {
        payload: Prisma.$ItemPayload<ExtArgs>
        fields: Prisma.ItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findFirst: {
            args: Prisma.ItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findMany: {
            args: Prisma.ItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          create: {
            args: Prisma.ItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          createMany: {
            args: Prisma.ItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          update: {
            args: Prisma.ItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          deleteMany: {
            args: Prisma.ItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          aggregate: {
            args: Prisma.ItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItem>
          }
          groupBy: {
            args: Prisma.ItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemCountArgs<ExtArgs>
            result: $Utils.Optional<ItemCountAggregateOutputType> | number
          }
        }
      }
      SceneCharacter: {
        payload: Prisma.$SceneCharacterPayload<ExtArgs>
        fields: Prisma.SceneCharacterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SceneCharacterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneCharacterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SceneCharacterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneCharacterPayload>
          }
          findFirst: {
            args: Prisma.SceneCharacterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneCharacterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SceneCharacterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneCharacterPayload>
          }
          findMany: {
            args: Prisma.SceneCharacterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneCharacterPayload>[]
          }
          create: {
            args: Prisma.SceneCharacterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneCharacterPayload>
          }
          createMany: {
            args: Prisma.SceneCharacterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SceneCharacterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneCharacterPayload>
          }
          update: {
            args: Prisma.SceneCharacterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneCharacterPayload>
          }
          deleteMany: {
            args: Prisma.SceneCharacterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SceneCharacterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SceneCharacterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneCharacterPayload>
          }
          aggregate: {
            args: Prisma.SceneCharacterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSceneCharacter>
          }
          groupBy: {
            args: Prisma.SceneCharacterGroupByArgs<ExtArgs>
            result: $Utils.Optional<SceneCharacterGroupByOutputType>[]
          }
          count: {
            args: Prisma.SceneCharacterCountArgs<ExtArgs>
            result: $Utils.Optional<SceneCharacterCountAggregateOutputType> | number
          }
        }
      }
      SceneReferredCharacter: {
        payload: Prisma.$SceneReferredCharacterPayload<ExtArgs>
        fields: Prisma.SceneReferredCharacterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SceneReferredCharacterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneReferredCharacterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SceneReferredCharacterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneReferredCharacterPayload>
          }
          findFirst: {
            args: Prisma.SceneReferredCharacterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneReferredCharacterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SceneReferredCharacterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneReferredCharacterPayload>
          }
          findMany: {
            args: Prisma.SceneReferredCharacterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneReferredCharacterPayload>[]
          }
          create: {
            args: Prisma.SceneReferredCharacterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneReferredCharacterPayload>
          }
          createMany: {
            args: Prisma.SceneReferredCharacterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SceneReferredCharacterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneReferredCharacterPayload>
          }
          update: {
            args: Prisma.SceneReferredCharacterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneReferredCharacterPayload>
          }
          deleteMany: {
            args: Prisma.SceneReferredCharacterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SceneReferredCharacterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SceneReferredCharacterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SceneReferredCharacterPayload>
          }
          aggregate: {
            args: Prisma.SceneReferredCharacterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSceneReferredCharacter>
          }
          groupBy: {
            args: Prisma.SceneReferredCharacterGroupByArgs<ExtArgs>
            result: $Utils.Optional<SceneReferredCharacterGroupByOutputType>[]
          }
          count: {
            args: Prisma.SceneReferredCharacterCountArgs<ExtArgs>
            result: $Utils.Optional<SceneReferredCharacterCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    session?: SessionOmit
    accessKey?: AccessKeyOmit
    bookShelfStory?: BookShelfStoryOmit
    story?: StoryOmit
    tag?: TagOmit
    storyTag?: StoryTagOmit
    storyReadStatus?: StoryReadStatusOmit
    book?: BookOmit
    arc?: ArcOmit
    chapter?: ChapterOmit
    scene?: SceneOmit
    paragraph?: ParagraphOmit
    paragraphRevision?: ParagraphRevisionOmit
    paragraphComment?: ParagraphCommentOmit
    file?: FileOmit
    chapterPublishing?: ChapterPublishingOmit
    character?: CharacterOmit
    location?: LocationOmit
    plotPoint?: PlotPointOmit
    item?: ItemOmit
    sceneCharacter?: SceneCharacterOmit
    sceneReferredCharacter?: SceneReferredCharacterOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    ownedStories: number
    bookShelfStories: number
    accessKeys: number
    paragraphComments: number
    files: number
    sessions: number
    storyReadStatuses: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedStories?: boolean | UserCountOutputTypeCountOwnedStoriesArgs
    bookShelfStories?: boolean | UserCountOutputTypeCountBookShelfStoriesArgs
    accessKeys?: boolean | UserCountOutputTypeCountAccessKeysArgs
    paragraphComments?: boolean | UserCountOutputTypeCountParagraphCommentsArgs
    files?: boolean | UserCountOutputTypeCountFilesArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    storyReadStatuses?: boolean | UserCountOutputTypeCountStoryReadStatusesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBookShelfStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookShelfStoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccessKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccessKeyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountParagraphCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParagraphCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStoryReadStatusesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryReadStatusWhereInput
  }


  /**
   * Count Type StoryCountOutputType
   */

  export type StoryCountOutputType = {
    bookShelfStories: number
    books: number
    files: number
    storyReadStatuses: number
    storyTags: number
    characters: number
    locations: number
    plotPoints: number
    items: number
  }

  export type StoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookShelfStories?: boolean | StoryCountOutputTypeCountBookShelfStoriesArgs
    books?: boolean | StoryCountOutputTypeCountBooksArgs
    files?: boolean | StoryCountOutputTypeCountFilesArgs
    storyReadStatuses?: boolean | StoryCountOutputTypeCountStoryReadStatusesArgs
    storyTags?: boolean | StoryCountOutputTypeCountStoryTagsArgs
    characters?: boolean | StoryCountOutputTypeCountCharactersArgs
    locations?: boolean | StoryCountOutputTypeCountLocationsArgs
    plotPoints?: boolean | StoryCountOutputTypeCountPlotPointsArgs
    items?: boolean | StoryCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryCountOutputType
     */
    select?: StoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeCountBookShelfStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookShelfStoryWhereInput
  }

  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeCountBooksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookWhereInput
  }

  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeCountStoryReadStatusesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryReadStatusWhereInput
  }

  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeCountStoryTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryTagWhereInput
  }

  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeCountCharactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterWhereInput
  }

  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeCountLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
  }

  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeCountPlotPointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlotPointWhereInput
  }

  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    storyTags: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    storyTags?: boolean | TagCountOutputTypeCountStoryTagsArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountStoryTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryTagWhereInput
  }


  /**
   * Count Type BookCountOutputType
   */

  export type BookCountOutputType = {
    arcs: number
  }

  export type BookCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arcs?: boolean | BookCountOutputTypeCountArcsArgs
  }

  // Custom InputTypes
  /**
   * BookCountOutputType without action
   */
  export type BookCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookCountOutputType
     */
    select?: BookCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BookCountOutputType without action
   */
  export type BookCountOutputTypeCountArcsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArcWhereInput
  }


  /**
   * Count Type ArcCountOutputType
   */

  export type ArcCountOutputType = {
    chapters: number
  }

  export type ArcCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapters?: boolean | ArcCountOutputTypeCountChaptersArgs
  }

  // Custom InputTypes
  /**
   * ArcCountOutputType without action
   */
  export type ArcCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArcCountOutputType
     */
    select?: ArcCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArcCountOutputType without action
   */
  export type ArcCountOutputTypeCountChaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterWhereInput
  }


  /**
   * Count Type ChapterCountOutputType
   */

  export type ChapterCountOutputType = {
    scenes: number
    StoryReadStatus: number
    publishingStatus: number
  }

  export type ChapterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scenes?: boolean | ChapterCountOutputTypeCountScenesArgs
    StoryReadStatus?: boolean | ChapterCountOutputTypeCountStoryReadStatusArgs
    publishingStatus?: boolean | ChapterCountOutputTypeCountPublishingStatusArgs
  }

  // Custom InputTypes
  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterCountOutputType
     */
    select?: ChapterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeCountScenesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneWhereInput
  }

  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeCountStoryReadStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryReadStatusWhereInput
  }

  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeCountPublishingStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterPublishingWhereInput
  }


  /**
   * Count Type SceneCountOutputType
   */

  export type SceneCountOutputType = {
    paragraphs: number
    participatingCharacters: number
    referredCharacters: number
  }

  export type SceneCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paragraphs?: boolean | SceneCountOutputTypeCountParagraphsArgs
    participatingCharacters?: boolean | SceneCountOutputTypeCountParticipatingCharactersArgs
    referredCharacters?: boolean | SceneCountOutputTypeCountReferredCharactersArgs
  }

  // Custom InputTypes
  /**
   * SceneCountOutputType without action
   */
  export type SceneCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneCountOutputType
     */
    select?: SceneCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SceneCountOutputType without action
   */
  export type SceneCountOutputTypeCountParagraphsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParagraphWhereInput
  }

  /**
   * SceneCountOutputType without action
   */
  export type SceneCountOutputTypeCountParticipatingCharactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneCharacterWhereInput
  }

  /**
   * SceneCountOutputType without action
   */
  export type SceneCountOutputTypeCountReferredCharactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneReferredCharacterWhereInput
  }


  /**
   * Count Type ParagraphCountOutputType
   */

  export type ParagraphCountOutputType = {
    paragraphRevisions: number
  }

  export type ParagraphCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paragraphRevisions?: boolean | ParagraphCountOutputTypeCountParagraphRevisionsArgs
  }

  // Custom InputTypes
  /**
   * ParagraphCountOutputType without action
   */
  export type ParagraphCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphCountOutputType
     */
    select?: ParagraphCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ParagraphCountOutputType without action
   */
  export type ParagraphCountOutputTypeCountParagraphRevisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParagraphRevisionWhereInput
  }


  /**
   * Count Type ParagraphRevisionCountOutputType
   */

  export type ParagraphRevisionCountOutputType = {
    paragraphComment: number
  }

  export type ParagraphRevisionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paragraphComment?: boolean | ParagraphRevisionCountOutputTypeCountParagraphCommentArgs
  }

  // Custom InputTypes
  /**
   * ParagraphRevisionCountOutputType without action
   */
  export type ParagraphRevisionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphRevisionCountOutputType
     */
    select?: ParagraphRevisionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ParagraphRevisionCountOutputType without action
   */
  export type ParagraphRevisionCountOutputTypeCountParagraphCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParagraphCommentWhereInput
  }


  /**
   * Count Type FileCountOutputType
   */

  export type FileCountOutputType = {
    storyCoverArt: number
    bookCoverArt: number
    bookSpineArt: number
    characterPicture: number
    locationPicture: number
  }

  export type FileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    storyCoverArt?: boolean | FileCountOutputTypeCountStoryCoverArtArgs
    bookCoverArt?: boolean | FileCountOutputTypeCountBookCoverArtArgs
    bookSpineArt?: boolean | FileCountOutputTypeCountBookSpineArtArgs
    characterPicture?: boolean | FileCountOutputTypeCountCharacterPictureArgs
    locationPicture?: boolean | FileCountOutputTypeCountLocationPictureArgs
  }

  // Custom InputTypes
  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileCountOutputType
     */
    select?: FileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountStoryCoverArtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryWhereInput
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountBookCoverArtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookWhereInput
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountBookSpineArtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookWhereInput
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountCharacterPictureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterWhereInput
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountLocationPictureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
  }


  /**
   * Count Type CharacterCountOutputType
   */

  export type CharacterCountOutputType = {
    previousVersion: number
    defaultProtagonistForStory: number
    sceneProtagonistIn: number
    participatingInScenes: number
    referredInScenes: number
  }

  export type CharacterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    previousVersion?: boolean | CharacterCountOutputTypeCountPreviousVersionArgs
    defaultProtagonistForStory?: boolean | CharacterCountOutputTypeCountDefaultProtagonistForStoryArgs
    sceneProtagonistIn?: boolean | CharacterCountOutputTypeCountSceneProtagonistInArgs
    participatingInScenes?: boolean | CharacterCountOutputTypeCountParticipatingInScenesArgs
    referredInScenes?: boolean | CharacterCountOutputTypeCountReferredInScenesArgs
  }

  // Custom InputTypes
  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterCountOutputType
     */
    select?: CharacterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountPreviousVersionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterWhereInput
  }

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountDefaultProtagonistForStoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryWhereInput
  }

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountSceneProtagonistInArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneWhereInput
  }

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountParticipatingInScenesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneCharacterWhereInput
  }

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountReferredInScenesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneReferredCharacterWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    scenes: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scenes?: boolean | LocationCountOutputTypeCountScenesArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountScenesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    role: string | null
    avatarUrl: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    role: string | null
    avatarUrl: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    role: number
    avatarUrl: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    avatarUrl?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    avatarUrl?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    avatarUrl?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string
    password: string
    role: string
    avatarUrl: string | null
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    avatarUrl?: boolean
    createdAt?: boolean
    ownedStories?: boolean | User$ownedStoriesArgs<ExtArgs>
    bookShelfStories?: boolean | User$bookShelfStoriesArgs<ExtArgs>
    accessKeys?: boolean | User$accessKeysArgs<ExtArgs>
    paragraphComments?: boolean | User$paragraphCommentsArgs<ExtArgs>
    files?: boolean | User$filesArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    storyReadStatuses?: boolean | User$storyReadStatusesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    avatarUrl?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "role" | "avatarUrl" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedStories?: boolean | User$ownedStoriesArgs<ExtArgs>
    bookShelfStories?: boolean | User$bookShelfStoriesArgs<ExtArgs>
    accessKeys?: boolean | User$accessKeysArgs<ExtArgs>
    paragraphComments?: boolean | User$paragraphCommentsArgs<ExtArgs>
    files?: boolean | User$filesArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    storyReadStatuses?: boolean | User$storyReadStatusesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      ownedStories: Prisma.$StoryPayload<ExtArgs>[]
      bookShelfStories: Prisma.$BookShelfStoryPayload<ExtArgs>[]
      accessKeys: Prisma.$AccessKeyPayload<ExtArgs>[]
      paragraphComments: Prisma.$ParagraphCommentPayload<ExtArgs>[]
      files: Prisma.$FilePayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      storyReadStatuses: Prisma.$StoryReadStatusPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      name: string
      password: string
      role: string
      avatarUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ownedStories<T extends User$ownedStoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedStoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bookShelfStories<T extends User$bookShelfStoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$bookShelfStoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookShelfStoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accessKeys<T extends User$accessKeysArgs<ExtArgs> = {}>(args?: Subset<T, User$accessKeysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccessKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    paragraphComments<T extends User$paragraphCommentsArgs<ExtArgs> = {}>(args?: Subset<T, User$paragraphCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParagraphCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    files<T extends User$filesArgs<ExtArgs> = {}>(args?: Subset<T, User$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    storyReadStatuses<T extends User$storyReadStatusesArgs<ExtArgs> = {}>(args?: Subset<T, User$storyReadStatusesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryReadStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.ownedStories
   */
  export type User$ownedStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    where?: StoryWhereInput
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    cursor?: StoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }

  /**
   * User.bookShelfStories
   */
  export type User$bookShelfStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookShelfStory
     */
    select?: BookShelfStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookShelfStory
     */
    omit?: BookShelfStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookShelfStoryInclude<ExtArgs> | null
    where?: BookShelfStoryWhereInput
    orderBy?: BookShelfStoryOrderByWithRelationInput | BookShelfStoryOrderByWithRelationInput[]
    cursor?: BookShelfStoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookShelfStoryScalarFieldEnum | BookShelfStoryScalarFieldEnum[]
  }

  /**
   * User.accessKeys
   */
  export type User$accessKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessKey
     */
    select?: AccessKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessKey
     */
    omit?: AccessKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessKeyInclude<ExtArgs> | null
    where?: AccessKeyWhereInput
    orderBy?: AccessKeyOrderByWithRelationInput | AccessKeyOrderByWithRelationInput[]
    cursor?: AccessKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccessKeyScalarFieldEnum | AccessKeyScalarFieldEnum[]
  }

  /**
   * User.paragraphComments
   */
  export type User$paragraphCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphComment
     */
    select?: ParagraphCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphComment
     */
    omit?: ParagraphCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphCommentInclude<ExtArgs> | null
    where?: ParagraphCommentWhereInput
    orderBy?: ParagraphCommentOrderByWithRelationInput | ParagraphCommentOrderByWithRelationInput[]
    cursor?: ParagraphCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParagraphCommentScalarFieldEnum | ParagraphCommentScalarFieldEnum[]
  }

  /**
   * User.files
   */
  export type User$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.storyReadStatuses
   */
  export type User$storyReadStatusesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryReadStatus
     */
    select?: StoryReadStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryReadStatus
     */
    omit?: StoryReadStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryReadStatusInclude<ExtArgs> | null
    where?: StoryReadStatusWhereInput
    orderBy?: StoryReadStatusOrderByWithRelationInput | StoryReadStatusOrderByWithRelationInput[]
    cursor?: StoryReadStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoryReadStatusScalarFieldEnum | StoryReadStatusScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    ownerId: number | null
  }

  export type SessionSumAggregateOutputType = {
    ownerId: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    ownerId: number | null
    validUntil: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    ownerId: number | null
    validUntil: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    ownerId: number
    validUntil: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    ownerId?: true
  }

  export type SessionSumAggregateInputType = {
    ownerId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    ownerId?: true
    validUntil?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    ownerId?: true
    validUntil?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    ownerId?: true
    validUntil?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    ownerId: number
    validUntil: Date
    createdAt: Date
    updatedAt: Date
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    validUntil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>



  export type SessionSelectScalar = {
    id?: boolean
    ownerId?: boolean
    validUntil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ownerId" | "validUntil" | "createdAt" | "updatedAt", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ownerId: number
      validUntil: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly ownerId: FieldRef<"Session", 'Int'>
    readonly validUntil: FieldRef<"Session", 'DateTime'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model AccessKey
   */

  export type AggregateAccessKey = {
    _count: AccessKeyCountAggregateOutputType | null
    _avg: AccessKeyAvgAggregateOutputType | null
    _sum: AccessKeySumAggregateOutputType | null
    _min: AccessKeyMinAggregateOutputType | null
    _max: AccessKeyMaxAggregateOutputType | null
  }

  export type AccessKeyAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
  }

  export type AccessKeySumAggregateOutputType = {
    id: number | null
    ownerId: number | null
  }

  export type AccessKeyMinAggregateOutputType = {
    id: number | null
    key: string | null
    description: string | null
    ownerId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    lastUsedAt: Date | null
  }

  export type AccessKeyMaxAggregateOutputType = {
    id: number | null
    key: string | null
    description: string | null
    ownerId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    lastUsedAt: Date | null
  }

  export type AccessKeyCountAggregateOutputType = {
    id: number
    key: number
    description: number
    ownerId: number
    createdAt: number
    updatedAt: number
    lastUsedAt: number
    _all: number
  }


  export type AccessKeyAvgAggregateInputType = {
    id?: true
    ownerId?: true
  }

  export type AccessKeySumAggregateInputType = {
    id?: true
    ownerId?: true
  }

  export type AccessKeyMinAggregateInputType = {
    id?: true
    key?: true
    description?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    lastUsedAt?: true
  }

  export type AccessKeyMaxAggregateInputType = {
    id?: true
    key?: true
    description?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    lastUsedAt?: true
  }

  export type AccessKeyCountAggregateInputType = {
    id?: true
    key?: true
    description?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    lastUsedAt?: true
    _all?: true
  }

  export type AccessKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccessKey to aggregate.
     */
    where?: AccessKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessKeys to fetch.
     */
    orderBy?: AccessKeyOrderByWithRelationInput | AccessKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccessKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccessKeys
    **/
    _count?: true | AccessKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccessKeyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccessKeySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccessKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccessKeyMaxAggregateInputType
  }

  export type GetAccessKeyAggregateType<T extends AccessKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateAccessKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccessKey[P]>
      : GetScalarType<T[P], AggregateAccessKey[P]>
  }




  export type AccessKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccessKeyWhereInput
    orderBy?: AccessKeyOrderByWithAggregationInput | AccessKeyOrderByWithAggregationInput[]
    by: AccessKeyScalarFieldEnum[] | AccessKeyScalarFieldEnum
    having?: AccessKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccessKeyCountAggregateInputType | true
    _avg?: AccessKeyAvgAggregateInputType
    _sum?: AccessKeySumAggregateInputType
    _min?: AccessKeyMinAggregateInputType
    _max?: AccessKeyMaxAggregateInputType
  }

  export type AccessKeyGroupByOutputType = {
    id: number
    key: string
    description: string | null
    ownerId: number
    createdAt: Date
    updatedAt: Date
    lastUsedAt: Date | null
    _count: AccessKeyCountAggregateOutputType | null
    _avg: AccessKeyAvgAggregateOutputType | null
    _sum: AccessKeySumAggregateOutputType | null
    _min: AccessKeyMinAggregateOutputType | null
    _max: AccessKeyMaxAggregateOutputType | null
  }

  type GetAccessKeyGroupByPayload<T extends AccessKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccessKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccessKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccessKeyGroupByOutputType[P]>
            : GetScalarType<T[P], AccessKeyGroupByOutputType[P]>
        }
      >
    >


  export type AccessKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    description?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastUsedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accessKey"]>



  export type AccessKeySelectScalar = {
    id?: boolean
    key?: boolean
    description?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastUsedAt?: boolean
  }

  export type AccessKeyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "description" | "ownerId" | "createdAt" | "updatedAt" | "lastUsedAt", ExtArgs["result"]["accessKey"]>
  export type AccessKeyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccessKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccessKey"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      key: string
      description: string | null
      ownerId: number
      createdAt: Date
      updatedAt: Date
      lastUsedAt: Date | null
    }, ExtArgs["result"]["accessKey"]>
    composites: {}
  }

  type AccessKeyGetPayload<S extends boolean | null | undefined | AccessKeyDefaultArgs> = $Result.GetResult<Prisma.$AccessKeyPayload, S>

  type AccessKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccessKeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccessKeyCountAggregateInputType | true
    }

  export interface AccessKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccessKey'], meta: { name: 'AccessKey' } }
    /**
     * Find zero or one AccessKey that matches the filter.
     * @param {AccessKeyFindUniqueArgs} args - Arguments to find a AccessKey
     * @example
     * // Get one AccessKey
     * const accessKey = await prisma.accessKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccessKeyFindUniqueArgs>(args: SelectSubset<T, AccessKeyFindUniqueArgs<ExtArgs>>): Prisma__AccessKeyClient<$Result.GetResult<Prisma.$AccessKeyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccessKey that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccessKeyFindUniqueOrThrowArgs} args - Arguments to find a AccessKey
     * @example
     * // Get one AccessKey
     * const accessKey = await prisma.accessKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccessKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, AccessKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccessKeyClient<$Result.GetResult<Prisma.$AccessKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccessKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessKeyFindFirstArgs} args - Arguments to find a AccessKey
     * @example
     * // Get one AccessKey
     * const accessKey = await prisma.accessKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccessKeyFindFirstArgs>(args?: SelectSubset<T, AccessKeyFindFirstArgs<ExtArgs>>): Prisma__AccessKeyClient<$Result.GetResult<Prisma.$AccessKeyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccessKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessKeyFindFirstOrThrowArgs} args - Arguments to find a AccessKey
     * @example
     * // Get one AccessKey
     * const accessKey = await prisma.accessKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccessKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, AccessKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccessKeyClient<$Result.GetResult<Prisma.$AccessKeyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccessKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccessKeys
     * const accessKeys = await prisma.accessKey.findMany()
     * 
     * // Get first 10 AccessKeys
     * const accessKeys = await prisma.accessKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accessKeyWithIdOnly = await prisma.accessKey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccessKeyFindManyArgs>(args?: SelectSubset<T, AccessKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccessKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccessKey.
     * @param {AccessKeyCreateArgs} args - Arguments to create a AccessKey.
     * @example
     * // Create one AccessKey
     * const AccessKey = await prisma.accessKey.create({
     *   data: {
     *     // ... data to create a AccessKey
     *   }
     * })
     * 
     */
    create<T extends AccessKeyCreateArgs>(args: SelectSubset<T, AccessKeyCreateArgs<ExtArgs>>): Prisma__AccessKeyClient<$Result.GetResult<Prisma.$AccessKeyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccessKeys.
     * @param {AccessKeyCreateManyArgs} args - Arguments to create many AccessKeys.
     * @example
     * // Create many AccessKeys
     * const accessKey = await prisma.accessKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccessKeyCreateManyArgs>(args?: SelectSubset<T, AccessKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccessKey.
     * @param {AccessKeyDeleteArgs} args - Arguments to delete one AccessKey.
     * @example
     * // Delete one AccessKey
     * const AccessKey = await prisma.accessKey.delete({
     *   where: {
     *     // ... filter to delete one AccessKey
     *   }
     * })
     * 
     */
    delete<T extends AccessKeyDeleteArgs>(args: SelectSubset<T, AccessKeyDeleteArgs<ExtArgs>>): Prisma__AccessKeyClient<$Result.GetResult<Prisma.$AccessKeyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccessKey.
     * @param {AccessKeyUpdateArgs} args - Arguments to update one AccessKey.
     * @example
     * // Update one AccessKey
     * const accessKey = await prisma.accessKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccessKeyUpdateArgs>(args: SelectSubset<T, AccessKeyUpdateArgs<ExtArgs>>): Prisma__AccessKeyClient<$Result.GetResult<Prisma.$AccessKeyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccessKeys.
     * @param {AccessKeyDeleteManyArgs} args - Arguments to filter AccessKeys to delete.
     * @example
     * // Delete a few AccessKeys
     * const { count } = await prisma.accessKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccessKeyDeleteManyArgs>(args?: SelectSubset<T, AccessKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccessKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccessKeys
     * const accessKey = await prisma.accessKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccessKeyUpdateManyArgs>(args: SelectSubset<T, AccessKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccessKey.
     * @param {AccessKeyUpsertArgs} args - Arguments to update or create a AccessKey.
     * @example
     * // Update or create a AccessKey
     * const accessKey = await prisma.accessKey.upsert({
     *   create: {
     *     // ... data to create a AccessKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccessKey we want to update
     *   }
     * })
     */
    upsert<T extends AccessKeyUpsertArgs>(args: SelectSubset<T, AccessKeyUpsertArgs<ExtArgs>>): Prisma__AccessKeyClient<$Result.GetResult<Prisma.$AccessKeyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccessKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessKeyCountArgs} args - Arguments to filter AccessKeys to count.
     * @example
     * // Count the number of AccessKeys
     * const count = await prisma.accessKey.count({
     *   where: {
     *     // ... the filter for the AccessKeys we want to count
     *   }
     * })
    **/
    count<T extends AccessKeyCountArgs>(
      args?: Subset<T, AccessKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccessKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccessKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccessKeyAggregateArgs>(args: Subset<T, AccessKeyAggregateArgs>): Prisma.PrismaPromise<GetAccessKeyAggregateType<T>>

    /**
     * Group by AccessKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccessKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccessKeyGroupByArgs['orderBy'] }
        : { orderBy?: AccessKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccessKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccessKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccessKey model
   */
  readonly fields: AccessKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccessKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccessKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccessKey model
   */
  interface AccessKeyFieldRefs {
    readonly id: FieldRef<"AccessKey", 'Int'>
    readonly key: FieldRef<"AccessKey", 'String'>
    readonly description: FieldRef<"AccessKey", 'String'>
    readonly ownerId: FieldRef<"AccessKey", 'Int'>
    readonly createdAt: FieldRef<"AccessKey", 'DateTime'>
    readonly updatedAt: FieldRef<"AccessKey", 'DateTime'>
    readonly lastUsedAt: FieldRef<"AccessKey", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AccessKey findUnique
   */
  export type AccessKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessKey
     */
    select?: AccessKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessKey
     */
    omit?: AccessKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessKeyInclude<ExtArgs> | null
    /**
     * Filter, which AccessKey to fetch.
     */
    where: AccessKeyWhereUniqueInput
  }

  /**
   * AccessKey findUniqueOrThrow
   */
  export type AccessKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessKey
     */
    select?: AccessKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessKey
     */
    omit?: AccessKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessKeyInclude<ExtArgs> | null
    /**
     * Filter, which AccessKey to fetch.
     */
    where: AccessKeyWhereUniqueInput
  }

  /**
   * AccessKey findFirst
   */
  export type AccessKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessKey
     */
    select?: AccessKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessKey
     */
    omit?: AccessKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessKeyInclude<ExtArgs> | null
    /**
     * Filter, which AccessKey to fetch.
     */
    where?: AccessKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessKeys to fetch.
     */
    orderBy?: AccessKeyOrderByWithRelationInput | AccessKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccessKeys.
     */
    cursor?: AccessKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccessKeys.
     */
    distinct?: AccessKeyScalarFieldEnum | AccessKeyScalarFieldEnum[]
  }

  /**
   * AccessKey findFirstOrThrow
   */
  export type AccessKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessKey
     */
    select?: AccessKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessKey
     */
    omit?: AccessKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessKeyInclude<ExtArgs> | null
    /**
     * Filter, which AccessKey to fetch.
     */
    where?: AccessKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessKeys to fetch.
     */
    orderBy?: AccessKeyOrderByWithRelationInput | AccessKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccessKeys.
     */
    cursor?: AccessKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccessKeys.
     */
    distinct?: AccessKeyScalarFieldEnum | AccessKeyScalarFieldEnum[]
  }

  /**
   * AccessKey findMany
   */
  export type AccessKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessKey
     */
    select?: AccessKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessKey
     */
    omit?: AccessKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessKeyInclude<ExtArgs> | null
    /**
     * Filter, which AccessKeys to fetch.
     */
    where?: AccessKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessKeys to fetch.
     */
    orderBy?: AccessKeyOrderByWithRelationInput | AccessKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccessKeys.
     */
    cursor?: AccessKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessKeys.
     */
    skip?: number
    distinct?: AccessKeyScalarFieldEnum | AccessKeyScalarFieldEnum[]
  }

  /**
   * AccessKey create
   */
  export type AccessKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessKey
     */
    select?: AccessKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessKey
     */
    omit?: AccessKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessKeyInclude<ExtArgs> | null
    /**
     * The data needed to create a AccessKey.
     */
    data: XOR<AccessKeyCreateInput, AccessKeyUncheckedCreateInput>
  }

  /**
   * AccessKey createMany
   */
  export type AccessKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccessKeys.
     */
    data: AccessKeyCreateManyInput | AccessKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccessKey update
   */
  export type AccessKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessKey
     */
    select?: AccessKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessKey
     */
    omit?: AccessKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessKeyInclude<ExtArgs> | null
    /**
     * The data needed to update a AccessKey.
     */
    data: XOR<AccessKeyUpdateInput, AccessKeyUncheckedUpdateInput>
    /**
     * Choose, which AccessKey to update.
     */
    where: AccessKeyWhereUniqueInput
  }

  /**
   * AccessKey updateMany
   */
  export type AccessKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccessKeys.
     */
    data: XOR<AccessKeyUpdateManyMutationInput, AccessKeyUncheckedUpdateManyInput>
    /**
     * Filter which AccessKeys to update
     */
    where?: AccessKeyWhereInput
    /**
     * Limit how many AccessKeys to update.
     */
    limit?: number
  }

  /**
   * AccessKey upsert
   */
  export type AccessKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessKey
     */
    select?: AccessKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessKey
     */
    omit?: AccessKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessKeyInclude<ExtArgs> | null
    /**
     * The filter to search for the AccessKey to update in case it exists.
     */
    where: AccessKeyWhereUniqueInput
    /**
     * In case the AccessKey found by the `where` argument doesn't exist, create a new AccessKey with this data.
     */
    create: XOR<AccessKeyCreateInput, AccessKeyUncheckedCreateInput>
    /**
     * In case the AccessKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccessKeyUpdateInput, AccessKeyUncheckedUpdateInput>
  }

  /**
   * AccessKey delete
   */
  export type AccessKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessKey
     */
    select?: AccessKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessKey
     */
    omit?: AccessKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessKeyInclude<ExtArgs> | null
    /**
     * Filter which AccessKey to delete.
     */
    where: AccessKeyWhereUniqueInput
  }

  /**
   * AccessKey deleteMany
   */
  export type AccessKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccessKeys to delete
     */
    where?: AccessKeyWhereInput
    /**
     * Limit how many AccessKeys to delete.
     */
    limit?: number
  }

  /**
   * AccessKey without action
   */
  export type AccessKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessKey
     */
    select?: AccessKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccessKey
     */
    omit?: AccessKeyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccessKeyInclude<ExtArgs> | null
  }


  /**
   * Model BookShelfStory
   */

  export type AggregateBookShelfStory = {
    _count: BookShelfStoryCountAggregateOutputType | null
    _avg: BookShelfStoryAvgAggregateOutputType | null
    _sum: BookShelfStorySumAggregateOutputType | null
    _min: BookShelfStoryMinAggregateOutputType | null
    _max: BookShelfStoryMaxAggregateOutputType | null
  }

  export type BookShelfStoryAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
  }

  export type BookShelfStorySumAggregateOutputType = {
    id: number | null
    ownerId: number | null
  }

  export type BookShelfStoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    ownerId: number | null
    storyId: string | null
    kind: $Enums.SavedType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookShelfStoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    ownerId: number | null
    storyId: string | null
    kind: $Enums.SavedType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookShelfStoryCountAggregateOutputType = {
    id: number
    name: number
    ownerId: number
    storyId: number
    kind: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookShelfStoryAvgAggregateInputType = {
    id?: true
    ownerId?: true
  }

  export type BookShelfStorySumAggregateInputType = {
    id?: true
    ownerId?: true
  }

  export type BookShelfStoryMinAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    storyId?: true
    kind?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookShelfStoryMaxAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    storyId?: true
    kind?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookShelfStoryCountAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    storyId?: true
    kind?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookShelfStoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookShelfStory to aggregate.
     */
    where?: BookShelfStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookShelfStories to fetch.
     */
    orderBy?: BookShelfStoryOrderByWithRelationInput | BookShelfStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookShelfStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookShelfStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookShelfStories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookShelfStories
    **/
    _count?: true | BookShelfStoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookShelfStoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookShelfStorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookShelfStoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookShelfStoryMaxAggregateInputType
  }

  export type GetBookShelfStoryAggregateType<T extends BookShelfStoryAggregateArgs> = {
        [P in keyof T & keyof AggregateBookShelfStory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookShelfStory[P]>
      : GetScalarType<T[P], AggregateBookShelfStory[P]>
  }




  export type BookShelfStoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookShelfStoryWhereInput
    orderBy?: BookShelfStoryOrderByWithAggregationInput | BookShelfStoryOrderByWithAggregationInput[]
    by: BookShelfStoryScalarFieldEnum[] | BookShelfStoryScalarFieldEnum
    having?: BookShelfStoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookShelfStoryCountAggregateInputType | true
    _avg?: BookShelfStoryAvgAggregateInputType
    _sum?: BookShelfStorySumAggregateInputType
    _min?: BookShelfStoryMinAggregateInputType
    _max?: BookShelfStoryMaxAggregateInputType
  }

  export type BookShelfStoryGroupByOutputType = {
    id: number
    name: string
    ownerId: number
    storyId: string
    kind: $Enums.SavedType
    createdAt: Date
    updatedAt: Date
    _count: BookShelfStoryCountAggregateOutputType | null
    _avg: BookShelfStoryAvgAggregateOutputType | null
    _sum: BookShelfStorySumAggregateOutputType | null
    _min: BookShelfStoryMinAggregateOutputType | null
    _max: BookShelfStoryMaxAggregateOutputType | null
  }

  type GetBookShelfStoryGroupByPayload<T extends BookShelfStoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookShelfStoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookShelfStoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookShelfStoryGroupByOutputType[P]>
            : GetScalarType<T[P], BookShelfStoryGroupByOutputType[P]>
        }
      >
    >


  export type BookShelfStorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ownerId?: boolean
    storyId?: boolean
    kind?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    story?: boolean | StoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookShelfStory"]>



  export type BookShelfStorySelectScalar = {
    id?: boolean
    name?: boolean
    ownerId?: boolean
    storyId?: boolean
    kind?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookShelfStoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "ownerId" | "storyId" | "kind" | "createdAt" | "updatedAt", ExtArgs["result"]["bookShelfStory"]>
  export type BookShelfStoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    story?: boolean | StoryDefaultArgs<ExtArgs>
  }

  export type $BookShelfStoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookShelfStory"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      story: Prisma.$StoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      ownerId: number
      storyId: string
      kind: $Enums.SavedType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bookShelfStory"]>
    composites: {}
  }

  type BookShelfStoryGetPayload<S extends boolean | null | undefined | BookShelfStoryDefaultArgs> = $Result.GetResult<Prisma.$BookShelfStoryPayload, S>

  type BookShelfStoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookShelfStoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookShelfStoryCountAggregateInputType | true
    }

  export interface BookShelfStoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookShelfStory'], meta: { name: 'BookShelfStory' } }
    /**
     * Find zero or one BookShelfStory that matches the filter.
     * @param {BookShelfStoryFindUniqueArgs} args - Arguments to find a BookShelfStory
     * @example
     * // Get one BookShelfStory
     * const bookShelfStory = await prisma.bookShelfStory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookShelfStoryFindUniqueArgs>(args: SelectSubset<T, BookShelfStoryFindUniqueArgs<ExtArgs>>): Prisma__BookShelfStoryClient<$Result.GetResult<Prisma.$BookShelfStoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BookShelfStory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookShelfStoryFindUniqueOrThrowArgs} args - Arguments to find a BookShelfStory
     * @example
     * // Get one BookShelfStory
     * const bookShelfStory = await prisma.bookShelfStory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookShelfStoryFindUniqueOrThrowArgs>(args: SelectSubset<T, BookShelfStoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookShelfStoryClient<$Result.GetResult<Prisma.$BookShelfStoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookShelfStory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookShelfStoryFindFirstArgs} args - Arguments to find a BookShelfStory
     * @example
     * // Get one BookShelfStory
     * const bookShelfStory = await prisma.bookShelfStory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookShelfStoryFindFirstArgs>(args?: SelectSubset<T, BookShelfStoryFindFirstArgs<ExtArgs>>): Prisma__BookShelfStoryClient<$Result.GetResult<Prisma.$BookShelfStoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookShelfStory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookShelfStoryFindFirstOrThrowArgs} args - Arguments to find a BookShelfStory
     * @example
     * // Get one BookShelfStory
     * const bookShelfStory = await prisma.bookShelfStory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookShelfStoryFindFirstOrThrowArgs>(args?: SelectSubset<T, BookShelfStoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookShelfStoryClient<$Result.GetResult<Prisma.$BookShelfStoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BookShelfStories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookShelfStoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookShelfStories
     * const bookShelfStories = await prisma.bookShelfStory.findMany()
     * 
     * // Get first 10 BookShelfStories
     * const bookShelfStories = await prisma.bookShelfStory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookShelfStoryWithIdOnly = await prisma.bookShelfStory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookShelfStoryFindManyArgs>(args?: SelectSubset<T, BookShelfStoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookShelfStoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BookShelfStory.
     * @param {BookShelfStoryCreateArgs} args - Arguments to create a BookShelfStory.
     * @example
     * // Create one BookShelfStory
     * const BookShelfStory = await prisma.bookShelfStory.create({
     *   data: {
     *     // ... data to create a BookShelfStory
     *   }
     * })
     * 
     */
    create<T extends BookShelfStoryCreateArgs>(args: SelectSubset<T, BookShelfStoryCreateArgs<ExtArgs>>): Prisma__BookShelfStoryClient<$Result.GetResult<Prisma.$BookShelfStoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BookShelfStories.
     * @param {BookShelfStoryCreateManyArgs} args - Arguments to create many BookShelfStories.
     * @example
     * // Create many BookShelfStories
     * const bookShelfStory = await prisma.bookShelfStory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookShelfStoryCreateManyArgs>(args?: SelectSubset<T, BookShelfStoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BookShelfStory.
     * @param {BookShelfStoryDeleteArgs} args - Arguments to delete one BookShelfStory.
     * @example
     * // Delete one BookShelfStory
     * const BookShelfStory = await prisma.bookShelfStory.delete({
     *   where: {
     *     // ... filter to delete one BookShelfStory
     *   }
     * })
     * 
     */
    delete<T extends BookShelfStoryDeleteArgs>(args: SelectSubset<T, BookShelfStoryDeleteArgs<ExtArgs>>): Prisma__BookShelfStoryClient<$Result.GetResult<Prisma.$BookShelfStoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BookShelfStory.
     * @param {BookShelfStoryUpdateArgs} args - Arguments to update one BookShelfStory.
     * @example
     * // Update one BookShelfStory
     * const bookShelfStory = await prisma.bookShelfStory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookShelfStoryUpdateArgs>(args: SelectSubset<T, BookShelfStoryUpdateArgs<ExtArgs>>): Prisma__BookShelfStoryClient<$Result.GetResult<Prisma.$BookShelfStoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BookShelfStories.
     * @param {BookShelfStoryDeleteManyArgs} args - Arguments to filter BookShelfStories to delete.
     * @example
     * // Delete a few BookShelfStories
     * const { count } = await prisma.bookShelfStory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookShelfStoryDeleteManyArgs>(args?: SelectSubset<T, BookShelfStoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookShelfStories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookShelfStoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookShelfStories
     * const bookShelfStory = await prisma.bookShelfStory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookShelfStoryUpdateManyArgs>(args: SelectSubset<T, BookShelfStoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BookShelfStory.
     * @param {BookShelfStoryUpsertArgs} args - Arguments to update or create a BookShelfStory.
     * @example
     * // Update or create a BookShelfStory
     * const bookShelfStory = await prisma.bookShelfStory.upsert({
     *   create: {
     *     // ... data to create a BookShelfStory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookShelfStory we want to update
     *   }
     * })
     */
    upsert<T extends BookShelfStoryUpsertArgs>(args: SelectSubset<T, BookShelfStoryUpsertArgs<ExtArgs>>): Prisma__BookShelfStoryClient<$Result.GetResult<Prisma.$BookShelfStoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BookShelfStories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookShelfStoryCountArgs} args - Arguments to filter BookShelfStories to count.
     * @example
     * // Count the number of BookShelfStories
     * const count = await prisma.bookShelfStory.count({
     *   where: {
     *     // ... the filter for the BookShelfStories we want to count
     *   }
     * })
    **/
    count<T extends BookShelfStoryCountArgs>(
      args?: Subset<T, BookShelfStoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookShelfStoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookShelfStory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookShelfStoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookShelfStoryAggregateArgs>(args: Subset<T, BookShelfStoryAggregateArgs>): Prisma.PrismaPromise<GetBookShelfStoryAggregateType<T>>

    /**
     * Group by BookShelfStory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookShelfStoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookShelfStoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookShelfStoryGroupByArgs['orderBy'] }
        : { orderBy?: BookShelfStoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookShelfStoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookShelfStoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookShelfStory model
   */
  readonly fields: BookShelfStoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookShelfStory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookShelfStoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    story<T extends StoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoryDefaultArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BookShelfStory model
   */
  interface BookShelfStoryFieldRefs {
    readonly id: FieldRef<"BookShelfStory", 'Int'>
    readonly name: FieldRef<"BookShelfStory", 'String'>
    readonly ownerId: FieldRef<"BookShelfStory", 'Int'>
    readonly storyId: FieldRef<"BookShelfStory", 'String'>
    readonly kind: FieldRef<"BookShelfStory", 'SavedType'>
    readonly createdAt: FieldRef<"BookShelfStory", 'DateTime'>
    readonly updatedAt: FieldRef<"BookShelfStory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BookShelfStory findUnique
   */
  export type BookShelfStoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookShelfStory
     */
    select?: BookShelfStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookShelfStory
     */
    omit?: BookShelfStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookShelfStoryInclude<ExtArgs> | null
    /**
     * Filter, which BookShelfStory to fetch.
     */
    where: BookShelfStoryWhereUniqueInput
  }

  /**
   * BookShelfStory findUniqueOrThrow
   */
  export type BookShelfStoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookShelfStory
     */
    select?: BookShelfStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookShelfStory
     */
    omit?: BookShelfStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookShelfStoryInclude<ExtArgs> | null
    /**
     * Filter, which BookShelfStory to fetch.
     */
    where: BookShelfStoryWhereUniqueInput
  }

  /**
   * BookShelfStory findFirst
   */
  export type BookShelfStoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookShelfStory
     */
    select?: BookShelfStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookShelfStory
     */
    omit?: BookShelfStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookShelfStoryInclude<ExtArgs> | null
    /**
     * Filter, which BookShelfStory to fetch.
     */
    where?: BookShelfStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookShelfStories to fetch.
     */
    orderBy?: BookShelfStoryOrderByWithRelationInput | BookShelfStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookShelfStories.
     */
    cursor?: BookShelfStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookShelfStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookShelfStories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookShelfStories.
     */
    distinct?: BookShelfStoryScalarFieldEnum | BookShelfStoryScalarFieldEnum[]
  }

  /**
   * BookShelfStory findFirstOrThrow
   */
  export type BookShelfStoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookShelfStory
     */
    select?: BookShelfStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookShelfStory
     */
    omit?: BookShelfStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookShelfStoryInclude<ExtArgs> | null
    /**
     * Filter, which BookShelfStory to fetch.
     */
    where?: BookShelfStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookShelfStories to fetch.
     */
    orderBy?: BookShelfStoryOrderByWithRelationInput | BookShelfStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookShelfStories.
     */
    cursor?: BookShelfStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookShelfStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookShelfStories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookShelfStories.
     */
    distinct?: BookShelfStoryScalarFieldEnum | BookShelfStoryScalarFieldEnum[]
  }

  /**
   * BookShelfStory findMany
   */
  export type BookShelfStoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookShelfStory
     */
    select?: BookShelfStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookShelfStory
     */
    omit?: BookShelfStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookShelfStoryInclude<ExtArgs> | null
    /**
     * Filter, which BookShelfStories to fetch.
     */
    where?: BookShelfStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookShelfStories to fetch.
     */
    orderBy?: BookShelfStoryOrderByWithRelationInput | BookShelfStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookShelfStories.
     */
    cursor?: BookShelfStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookShelfStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookShelfStories.
     */
    skip?: number
    distinct?: BookShelfStoryScalarFieldEnum | BookShelfStoryScalarFieldEnum[]
  }

  /**
   * BookShelfStory create
   */
  export type BookShelfStoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookShelfStory
     */
    select?: BookShelfStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookShelfStory
     */
    omit?: BookShelfStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookShelfStoryInclude<ExtArgs> | null
    /**
     * The data needed to create a BookShelfStory.
     */
    data: XOR<BookShelfStoryCreateInput, BookShelfStoryUncheckedCreateInput>
  }

  /**
   * BookShelfStory createMany
   */
  export type BookShelfStoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookShelfStories.
     */
    data: BookShelfStoryCreateManyInput | BookShelfStoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BookShelfStory update
   */
  export type BookShelfStoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookShelfStory
     */
    select?: BookShelfStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookShelfStory
     */
    omit?: BookShelfStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookShelfStoryInclude<ExtArgs> | null
    /**
     * The data needed to update a BookShelfStory.
     */
    data: XOR<BookShelfStoryUpdateInput, BookShelfStoryUncheckedUpdateInput>
    /**
     * Choose, which BookShelfStory to update.
     */
    where: BookShelfStoryWhereUniqueInput
  }

  /**
   * BookShelfStory updateMany
   */
  export type BookShelfStoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookShelfStories.
     */
    data: XOR<BookShelfStoryUpdateManyMutationInput, BookShelfStoryUncheckedUpdateManyInput>
    /**
     * Filter which BookShelfStories to update
     */
    where?: BookShelfStoryWhereInput
    /**
     * Limit how many BookShelfStories to update.
     */
    limit?: number
  }

  /**
   * BookShelfStory upsert
   */
  export type BookShelfStoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookShelfStory
     */
    select?: BookShelfStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookShelfStory
     */
    omit?: BookShelfStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookShelfStoryInclude<ExtArgs> | null
    /**
     * The filter to search for the BookShelfStory to update in case it exists.
     */
    where: BookShelfStoryWhereUniqueInput
    /**
     * In case the BookShelfStory found by the `where` argument doesn't exist, create a new BookShelfStory with this data.
     */
    create: XOR<BookShelfStoryCreateInput, BookShelfStoryUncheckedCreateInput>
    /**
     * In case the BookShelfStory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookShelfStoryUpdateInput, BookShelfStoryUncheckedUpdateInput>
  }

  /**
   * BookShelfStory delete
   */
  export type BookShelfStoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookShelfStory
     */
    select?: BookShelfStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookShelfStory
     */
    omit?: BookShelfStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookShelfStoryInclude<ExtArgs> | null
    /**
     * Filter which BookShelfStory to delete.
     */
    where: BookShelfStoryWhereUniqueInput
  }

  /**
   * BookShelfStory deleteMany
   */
  export type BookShelfStoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookShelfStories to delete
     */
    where?: BookShelfStoryWhereInput
    /**
     * Limit how many BookShelfStories to delete.
     */
    limit?: number
  }

  /**
   * BookShelfStory without action
   */
  export type BookShelfStoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookShelfStory
     */
    select?: BookShelfStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookShelfStory
     */
    omit?: BookShelfStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookShelfStoryInclude<ExtArgs> | null
  }


  /**
   * Model Story
   */

  export type AggregateStory = {
    _count: StoryCountAggregateOutputType | null
    _avg: StoryAvgAggregateOutputType | null
    _sum: StorySumAggregateOutputType | null
    _min: StoryMinAggregateOutputType | null
    _max: StoryMaxAggregateOutputType | null
  }

  export type StoryAvgAggregateOutputType = {
    ownerId: number | null
    royalRoadId: number | null
    wordsPerWeek: number | null
    spellingLevel: number | null
    chapters: number | null
    sortOrder: number | null
    pages: number | null
  }

  export type StorySumAggregateOutputType = {
    ownerId: number | null
    royalRoadId: number | null
    wordsPerWeek: number | null
    spellingLevel: number | null
    chapters: number | null
    sortOrder: number | null
    pages: number | null
  }

  export type StoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    summary: string | null
    ownerId: number | null
    royalRoadId: number | null
    published: boolean | null
    status: $Enums.StoryStatus | null
    type: $Enums.StoryType | null
    wordsPerWeek: number | null
    spellingLevel: number | null
    chapters: number | null
    firstChapterReleasedAt: Date | null
    lastChapterReleasedAt: Date | null
    coverArtFileId: string | null
    coverColor: string | null
    coverTextColor: string | null
    coverFontFamily: string | null
    defaultPerspective: $Enums.Perspective | null
    defaultProtagonistId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sortOrder: number | null
    pages: number | null
  }

  export type StoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    summary: string | null
    ownerId: number | null
    royalRoadId: number | null
    published: boolean | null
    status: $Enums.StoryStatus | null
    type: $Enums.StoryType | null
    wordsPerWeek: number | null
    spellingLevel: number | null
    chapters: number | null
    firstChapterReleasedAt: Date | null
    lastChapterReleasedAt: Date | null
    coverArtFileId: string | null
    coverColor: string | null
    coverTextColor: string | null
    coverFontFamily: string | null
    defaultPerspective: $Enums.Perspective | null
    defaultProtagonistId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sortOrder: number | null
    pages: number | null
  }

  export type StoryCountAggregateOutputType = {
    id: number
    name: number
    summary: number
    ownerId: number
    royalRoadId: number
    published: number
    status: number
    type: number
    wordsPerWeek: number
    spellingLevel: number
    chapters: number
    firstChapterReleasedAt: number
    lastChapterReleasedAt: number
    coverArtFileId: number
    coverColor: number
    coverTextColor: number
    coverFontFamily: number
    defaultPerspective: number
    defaultProtagonistId: number
    createdAt: number
    updatedAt: number
    sortOrder: number
    pages: number
    _all: number
  }


  export type StoryAvgAggregateInputType = {
    ownerId?: true
    royalRoadId?: true
    wordsPerWeek?: true
    spellingLevel?: true
    chapters?: true
    sortOrder?: true
    pages?: true
  }

  export type StorySumAggregateInputType = {
    ownerId?: true
    royalRoadId?: true
    wordsPerWeek?: true
    spellingLevel?: true
    chapters?: true
    sortOrder?: true
    pages?: true
  }

  export type StoryMinAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    ownerId?: true
    royalRoadId?: true
    published?: true
    status?: true
    type?: true
    wordsPerWeek?: true
    spellingLevel?: true
    chapters?: true
    firstChapterReleasedAt?: true
    lastChapterReleasedAt?: true
    coverArtFileId?: true
    coverColor?: true
    coverTextColor?: true
    coverFontFamily?: true
    defaultPerspective?: true
    defaultProtagonistId?: true
    createdAt?: true
    updatedAt?: true
    sortOrder?: true
    pages?: true
  }

  export type StoryMaxAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    ownerId?: true
    royalRoadId?: true
    published?: true
    status?: true
    type?: true
    wordsPerWeek?: true
    spellingLevel?: true
    chapters?: true
    firstChapterReleasedAt?: true
    lastChapterReleasedAt?: true
    coverArtFileId?: true
    coverColor?: true
    coverTextColor?: true
    coverFontFamily?: true
    defaultPerspective?: true
    defaultProtagonistId?: true
    createdAt?: true
    updatedAt?: true
    sortOrder?: true
    pages?: true
  }

  export type StoryCountAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    ownerId?: true
    royalRoadId?: true
    published?: true
    status?: true
    type?: true
    wordsPerWeek?: true
    spellingLevel?: true
    chapters?: true
    firstChapterReleasedAt?: true
    lastChapterReleasedAt?: true
    coverArtFileId?: true
    coverColor?: true
    coverTextColor?: true
    coverFontFamily?: true
    defaultPerspective?: true
    defaultProtagonistId?: true
    createdAt?: true
    updatedAt?: true
    sortOrder?: true
    pages?: true
    _all?: true
  }

  export type StoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Story to aggregate.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stories
    **/
    _count?: true | StoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoryMaxAggregateInputType
  }

  export type GetStoryAggregateType<T extends StoryAggregateArgs> = {
        [P in keyof T & keyof AggregateStory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStory[P]>
      : GetScalarType<T[P], AggregateStory[P]>
  }




  export type StoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryWhereInput
    orderBy?: StoryOrderByWithAggregationInput | StoryOrderByWithAggregationInput[]
    by: StoryScalarFieldEnum[] | StoryScalarFieldEnum
    having?: StoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoryCountAggregateInputType | true
    _avg?: StoryAvgAggregateInputType
    _sum?: StorySumAggregateInputType
    _min?: StoryMinAggregateInputType
    _max?: StoryMaxAggregateInputType
  }

  export type StoryGroupByOutputType = {
    id: string
    name: string
    summary: string | null
    ownerId: number
    royalRoadId: number | null
    published: boolean
    status: $Enums.StoryStatus
    type: $Enums.StoryType
    wordsPerWeek: number | null
    spellingLevel: number | null
    chapters: number | null
    firstChapterReleasedAt: Date | null
    lastChapterReleasedAt: Date | null
    coverArtFileId: string | null
    coverColor: string
    coverTextColor: string
    coverFontFamily: string
    defaultPerspective: $Enums.Perspective | null
    defaultProtagonistId: string | null
    createdAt: Date
    updatedAt: Date
    sortOrder: number
    pages: number | null
    _count: StoryCountAggregateOutputType | null
    _avg: StoryAvgAggregateOutputType | null
    _sum: StorySumAggregateOutputType | null
    _min: StoryMinAggregateOutputType | null
    _max: StoryMaxAggregateOutputType | null
  }

  type GetStoryGroupByPayload<T extends StoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoryGroupByOutputType[P]>
            : GetScalarType<T[P], StoryGroupByOutputType[P]>
        }
      >
    >


  export type StorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    summary?: boolean
    ownerId?: boolean
    royalRoadId?: boolean
    published?: boolean
    status?: boolean
    type?: boolean
    wordsPerWeek?: boolean
    spellingLevel?: boolean
    chapters?: boolean
    firstChapterReleasedAt?: boolean
    lastChapterReleasedAt?: boolean
    coverArtFileId?: boolean
    coverColor?: boolean
    coverTextColor?: boolean
    coverFontFamily?: boolean
    defaultPerspective?: boolean
    defaultProtagonistId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sortOrder?: boolean
    pages?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    bookShelfStories?: boolean | Story$bookShelfStoriesArgs<ExtArgs>
    coverArtFile?: boolean | Story$coverArtFileArgs<ExtArgs>
    defaultProtagonist?: boolean | Story$defaultProtagonistArgs<ExtArgs>
    books?: boolean | Story$booksArgs<ExtArgs>
    files?: boolean | Story$filesArgs<ExtArgs>
    storyReadStatuses?: boolean | Story$storyReadStatusesArgs<ExtArgs>
    storyTags?: boolean | Story$storyTagsArgs<ExtArgs>
    characters?: boolean | Story$charactersArgs<ExtArgs>
    locations?: boolean | Story$locationsArgs<ExtArgs>
    plotPoints?: boolean | Story$plotPointsArgs<ExtArgs>
    items?: boolean | Story$itemsArgs<ExtArgs>
    _count?: boolean | StoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["story"]>



  export type StorySelectScalar = {
    id?: boolean
    name?: boolean
    summary?: boolean
    ownerId?: boolean
    royalRoadId?: boolean
    published?: boolean
    status?: boolean
    type?: boolean
    wordsPerWeek?: boolean
    spellingLevel?: boolean
    chapters?: boolean
    firstChapterReleasedAt?: boolean
    lastChapterReleasedAt?: boolean
    coverArtFileId?: boolean
    coverColor?: boolean
    coverTextColor?: boolean
    coverFontFamily?: boolean
    defaultPerspective?: boolean
    defaultProtagonistId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sortOrder?: boolean
    pages?: boolean
  }

  export type StoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "summary" | "ownerId" | "royalRoadId" | "published" | "status" | "type" | "wordsPerWeek" | "spellingLevel" | "chapters" | "firstChapterReleasedAt" | "lastChapterReleasedAt" | "coverArtFileId" | "coverColor" | "coverTextColor" | "coverFontFamily" | "defaultPerspective" | "defaultProtagonistId" | "createdAt" | "updatedAt" | "sortOrder" | "pages", ExtArgs["result"]["story"]>
  export type StoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    bookShelfStories?: boolean | Story$bookShelfStoriesArgs<ExtArgs>
    coverArtFile?: boolean | Story$coverArtFileArgs<ExtArgs>
    defaultProtagonist?: boolean | Story$defaultProtagonistArgs<ExtArgs>
    books?: boolean | Story$booksArgs<ExtArgs>
    files?: boolean | Story$filesArgs<ExtArgs>
    storyReadStatuses?: boolean | Story$storyReadStatusesArgs<ExtArgs>
    storyTags?: boolean | Story$storyTagsArgs<ExtArgs>
    characters?: boolean | Story$charactersArgs<ExtArgs>
    locations?: boolean | Story$locationsArgs<ExtArgs>
    plotPoints?: boolean | Story$plotPointsArgs<ExtArgs>
    items?: boolean | Story$itemsArgs<ExtArgs>
    _count?: boolean | StoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $StoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Story"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      bookShelfStories: Prisma.$BookShelfStoryPayload<ExtArgs>[]
      coverArtFile: Prisma.$FilePayload<ExtArgs> | null
      defaultProtagonist: Prisma.$CharacterPayload<ExtArgs> | null
      books: Prisma.$BookPayload<ExtArgs>[]
      files: Prisma.$FilePayload<ExtArgs>[]
      storyReadStatuses: Prisma.$StoryReadStatusPayload<ExtArgs>[]
      storyTags: Prisma.$StoryTagPayload<ExtArgs>[]
      characters: Prisma.$CharacterPayload<ExtArgs>[]
      locations: Prisma.$LocationPayload<ExtArgs>[]
      plotPoints: Prisma.$PlotPointPayload<ExtArgs>[]
      items: Prisma.$ItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      summary: string | null
      ownerId: number
      royalRoadId: number | null
      published: boolean
      status: $Enums.StoryStatus
      type: $Enums.StoryType
      wordsPerWeek: number | null
      spellingLevel: number | null
      chapters: number | null
      firstChapterReleasedAt: Date | null
      lastChapterReleasedAt: Date | null
      coverArtFileId: string | null
      coverColor: string
      coverTextColor: string
      coverFontFamily: string
      defaultPerspective: $Enums.Perspective | null
      defaultProtagonistId: string | null
      createdAt: Date
      updatedAt: Date
      sortOrder: number
      pages: number | null
    }, ExtArgs["result"]["story"]>
    composites: {}
  }

  type StoryGetPayload<S extends boolean | null | undefined | StoryDefaultArgs> = $Result.GetResult<Prisma.$StoryPayload, S>

  type StoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StoryCountAggregateInputType | true
    }

  export interface StoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Story'], meta: { name: 'Story' } }
    /**
     * Find zero or one Story that matches the filter.
     * @param {StoryFindUniqueArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StoryFindUniqueArgs>(args: SelectSubset<T, StoryFindUniqueArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Story that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StoryFindUniqueOrThrowArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StoryFindUniqueOrThrowArgs>(args: SelectSubset<T, StoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Story that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindFirstArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StoryFindFirstArgs>(args?: SelectSubset<T, StoryFindFirstArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Story that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindFirstOrThrowArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StoryFindFirstOrThrowArgs>(args?: SelectSubset<T, StoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stories
     * const stories = await prisma.story.findMany()
     * 
     * // Get first 10 Stories
     * const stories = await prisma.story.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storyWithIdOnly = await prisma.story.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StoryFindManyArgs>(args?: SelectSubset<T, StoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Story.
     * @param {StoryCreateArgs} args - Arguments to create a Story.
     * @example
     * // Create one Story
     * const Story = await prisma.story.create({
     *   data: {
     *     // ... data to create a Story
     *   }
     * })
     * 
     */
    create<T extends StoryCreateArgs>(args: SelectSubset<T, StoryCreateArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stories.
     * @param {StoryCreateManyArgs} args - Arguments to create many Stories.
     * @example
     * // Create many Stories
     * const story = await prisma.story.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StoryCreateManyArgs>(args?: SelectSubset<T, StoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Story.
     * @param {StoryDeleteArgs} args - Arguments to delete one Story.
     * @example
     * // Delete one Story
     * const Story = await prisma.story.delete({
     *   where: {
     *     // ... filter to delete one Story
     *   }
     * })
     * 
     */
    delete<T extends StoryDeleteArgs>(args: SelectSubset<T, StoryDeleteArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Story.
     * @param {StoryUpdateArgs} args - Arguments to update one Story.
     * @example
     * // Update one Story
     * const story = await prisma.story.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StoryUpdateArgs>(args: SelectSubset<T, StoryUpdateArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stories.
     * @param {StoryDeleteManyArgs} args - Arguments to filter Stories to delete.
     * @example
     * // Delete a few Stories
     * const { count } = await prisma.story.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StoryDeleteManyArgs>(args?: SelectSubset<T, StoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stories
     * const story = await prisma.story.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StoryUpdateManyArgs>(args: SelectSubset<T, StoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Story.
     * @param {StoryUpsertArgs} args - Arguments to update or create a Story.
     * @example
     * // Update or create a Story
     * const story = await prisma.story.upsert({
     *   create: {
     *     // ... data to create a Story
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Story we want to update
     *   }
     * })
     */
    upsert<T extends StoryUpsertArgs>(args: SelectSubset<T, StoryUpsertArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryCountArgs} args - Arguments to filter Stories to count.
     * @example
     * // Count the number of Stories
     * const count = await prisma.story.count({
     *   where: {
     *     // ... the filter for the Stories we want to count
     *   }
     * })
    **/
    count<T extends StoryCountArgs>(
      args?: Subset<T, StoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoryAggregateArgs>(args: Subset<T, StoryAggregateArgs>): Prisma.PrismaPromise<GetStoryAggregateType<T>>

    /**
     * Group by Story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoryGroupByArgs['orderBy'] }
        : { orderBy?: StoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Story model
   */
  readonly fields: StoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Story.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    bookShelfStories<T extends Story$bookShelfStoriesArgs<ExtArgs> = {}>(args?: Subset<T, Story$bookShelfStoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookShelfStoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    coverArtFile<T extends Story$coverArtFileArgs<ExtArgs> = {}>(args?: Subset<T, Story$coverArtFileArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    defaultProtagonist<T extends Story$defaultProtagonistArgs<ExtArgs> = {}>(args?: Subset<T, Story$defaultProtagonistArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    books<T extends Story$booksArgs<ExtArgs> = {}>(args?: Subset<T, Story$booksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    files<T extends Story$filesArgs<ExtArgs> = {}>(args?: Subset<T, Story$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    storyReadStatuses<T extends Story$storyReadStatusesArgs<ExtArgs> = {}>(args?: Subset<T, Story$storyReadStatusesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryReadStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    storyTags<T extends Story$storyTagsArgs<ExtArgs> = {}>(args?: Subset<T, Story$storyTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    characters<T extends Story$charactersArgs<ExtArgs> = {}>(args?: Subset<T, Story$charactersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    locations<T extends Story$locationsArgs<ExtArgs> = {}>(args?: Subset<T, Story$locationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    plotPoints<T extends Story$plotPointsArgs<ExtArgs> = {}>(args?: Subset<T, Story$plotPointsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlotPointPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    items<T extends Story$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Story$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Story model
   */
  interface StoryFieldRefs {
    readonly id: FieldRef<"Story", 'String'>
    readonly name: FieldRef<"Story", 'String'>
    readonly summary: FieldRef<"Story", 'String'>
    readonly ownerId: FieldRef<"Story", 'Int'>
    readonly royalRoadId: FieldRef<"Story", 'Int'>
    readonly published: FieldRef<"Story", 'Boolean'>
    readonly status: FieldRef<"Story", 'StoryStatus'>
    readonly type: FieldRef<"Story", 'StoryType'>
    readonly wordsPerWeek: FieldRef<"Story", 'Int'>
    readonly spellingLevel: FieldRef<"Story", 'Int'>
    readonly chapters: FieldRef<"Story", 'Int'>
    readonly firstChapterReleasedAt: FieldRef<"Story", 'DateTime'>
    readonly lastChapterReleasedAt: FieldRef<"Story", 'DateTime'>
    readonly coverArtFileId: FieldRef<"Story", 'String'>
    readonly coverColor: FieldRef<"Story", 'String'>
    readonly coverTextColor: FieldRef<"Story", 'String'>
    readonly coverFontFamily: FieldRef<"Story", 'String'>
    readonly defaultPerspective: FieldRef<"Story", 'Perspective'>
    readonly defaultProtagonistId: FieldRef<"Story", 'String'>
    readonly createdAt: FieldRef<"Story", 'DateTime'>
    readonly updatedAt: FieldRef<"Story", 'DateTime'>
    readonly sortOrder: FieldRef<"Story", 'Int'>
    readonly pages: FieldRef<"Story", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Story findUnique
   */
  export type StoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where: StoryWhereUniqueInput
  }

  /**
   * Story findUniqueOrThrow
   */
  export type StoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where: StoryWhereUniqueInput
  }

  /**
   * Story findFirst
   */
  export type StoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stories.
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stories.
     */
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }

  /**
   * Story findFirstOrThrow
   */
  export type StoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stories.
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stories.
     */
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }

  /**
   * Story findMany
   */
  export type StoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Stories to fetch.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stories.
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }

  /**
   * Story create
   */
  export type StoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Story.
     */
    data: XOR<StoryCreateInput, StoryUncheckedCreateInput>
  }

  /**
   * Story createMany
   */
  export type StoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stories.
     */
    data: StoryCreateManyInput | StoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Story update
   */
  export type StoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Story.
     */
    data: XOR<StoryUpdateInput, StoryUncheckedUpdateInput>
    /**
     * Choose, which Story to update.
     */
    where: StoryWhereUniqueInput
  }

  /**
   * Story updateMany
   */
  export type StoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stories.
     */
    data: XOR<StoryUpdateManyMutationInput, StoryUncheckedUpdateManyInput>
    /**
     * Filter which Stories to update
     */
    where?: StoryWhereInput
    /**
     * Limit how many Stories to update.
     */
    limit?: number
  }

  /**
   * Story upsert
   */
  export type StoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Story to update in case it exists.
     */
    where: StoryWhereUniqueInput
    /**
     * In case the Story found by the `where` argument doesn't exist, create a new Story with this data.
     */
    create: XOR<StoryCreateInput, StoryUncheckedCreateInput>
    /**
     * In case the Story was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoryUpdateInput, StoryUncheckedUpdateInput>
  }

  /**
   * Story delete
   */
  export type StoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter which Story to delete.
     */
    where: StoryWhereUniqueInput
  }

  /**
   * Story deleteMany
   */
  export type StoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stories to delete
     */
    where?: StoryWhereInput
    /**
     * Limit how many Stories to delete.
     */
    limit?: number
  }

  /**
   * Story.bookShelfStories
   */
  export type Story$bookShelfStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookShelfStory
     */
    select?: BookShelfStorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookShelfStory
     */
    omit?: BookShelfStoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookShelfStoryInclude<ExtArgs> | null
    where?: BookShelfStoryWhereInput
    orderBy?: BookShelfStoryOrderByWithRelationInput | BookShelfStoryOrderByWithRelationInput[]
    cursor?: BookShelfStoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookShelfStoryScalarFieldEnum | BookShelfStoryScalarFieldEnum[]
  }

  /**
   * Story.coverArtFile
   */
  export type Story$coverArtFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
  }

  /**
   * Story.defaultProtagonist
   */
  export type Story$defaultProtagonistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    where?: CharacterWhereInput
  }

  /**
   * Story.books
   */
  export type Story$booksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    where?: BookWhereInput
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    cursor?: BookWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Story.files
   */
  export type Story$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Story.storyReadStatuses
   */
  export type Story$storyReadStatusesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryReadStatus
     */
    select?: StoryReadStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryReadStatus
     */
    omit?: StoryReadStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryReadStatusInclude<ExtArgs> | null
    where?: StoryReadStatusWhereInput
    orderBy?: StoryReadStatusOrderByWithRelationInput | StoryReadStatusOrderByWithRelationInput[]
    cursor?: StoryReadStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoryReadStatusScalarFieldEnum | StoryReadStatusScalarFieldEnum[]
  }

  /**
   * Story.storyTags
   */
  export type Story$storyTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryTag
     */
    select?: StoryTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryTag
     */
    omit?: StoryTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryTagInclude<ExtArgs> | null
    where?: StoryTagWhereInput
    orderBy?: StoryTagOrderByWithRelationInput | StoryTagOrderByWithRelationInput[]
    cursor?: StoryTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoryTagScalarFieldEnum | StoryTagScalarFieldEnum[]
  }

  /**
   * Story.characters
   */
  export type Story$charactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    where?: CharacterWhereInput
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    cursor?: CharacterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Story.locations
   */
  export type Story$locationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    cursor?: LocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Story.plotPoints
   */
  export type Story$plotPointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlotPoint
     */
    select?: PlotPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlotPoint
     */
    omit?: PlotPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlotPointInclude<ExtArgs> | null
    where?: PlotPointWhereInput
    orderBy?: PlotPointOrderByWithRelationInput | PlotPointOrderByWithRelationInput[]
    cursor?: PlotPointWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlotPointScalarFieldEnum | PlotPointScalarFieldEnum[]
  }

  /**
   * Story.items
   */
  export type Story$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Story without action
   */
  export type StoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    storyTags?: boolean | Tag$storyTagsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>



  export type TagSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["tag"]>
  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    storyTags?: boolean | Tag$storyTagsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      storyTags: Prisma.$StoryTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    storyTags<T extends Tag$storyTagsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$storyTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'String'>
    readonly name: FieldRef<"Tag", 'String'>
    readonly createdAt: FieldRef<"Tag", 'DateTime'>
    readonly updatedAt: FieldRef<"Tag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to delete.
     */
    limit?: number
  }

  /**
   * Tag.storyTags
   */
  export type Tag$storyTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryTag
     */
    select?: StoryTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryTag
     */
    omit?: StoryTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryTagInclude<ExtArgs> | null
    where?: StoryTagWhereInput
    orderBy?: StoryTagOrderByWithRelationInput | StoryTagOrderByWithRelationInput[]
    cursor?: StoryTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoryTagScalarFieldEnum | StoryTagScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model StoryTag
   */

  export type AggregateStoryTag = {
    _count: StoryTagCountAggregateOutputType | null
    _min: StoryTagMinAggregateOutputType | null
    _max: StoryTagMaxAggregateOutputType | null
  }

  export type StoryTagMinAggregateOutputType = {
    id: string | null
    storyId: string | null
    tagId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StoryTagMaxAggregateOutputType = {
    id: string | null
    storyId: string | null
    tagId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StoryTagCountAggregateOutputType = {
    id: number
    storyId: number
    tagId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StoryTagMinAggregateInputType = {
    id?: true
    storyId?: true
    tagId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StoryTagMaxAggregateInputType = {
    id?: true
    storyId?: true
    tagId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StoryTagCountAggregateInputType = {
    id?: true
    storyId?: true
    tagId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StoryTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StoryTag to aggregate.
     */
    where?: StoryTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoryTags to fetch.
     */
    orderBy?: StoryTagOrderByWithRelationInput | StoryTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoryTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoryTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoryTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StoryTags
    **/
    _count?: true | StoryTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoryTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoryTagMaxAggregateInputType
  }

  export type GetStoryTagAggregateType<T extends StoryTagAggregateArgs> = {
        [P in keyof T & keyof AggregateStoryTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStoryTag[P]>
      : GetScalarType<T[P], AggregateStoryTag[P]>
  }




  export type StoryTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryTagWhereInput
    orderBy?: StoryTagOrderByWithAggregationInput | StoryTagOrderByWithAggregationInput[]
    by: StoryTagScalarFieldEnum[] | StoryTagScalarFieldEnum
    having?: StoryTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoryTagCountAggregateInputType | true
    _min?: StoryTagMinAggregateInputType
    _max?: StoryTagMaxAggregateInputType
  }

  export type StoryTagGroupByOutputType = {
    id: string
    storyId: string
    tagId: string
    createdAt: Date
    updatedAt: Date
    _count: StoryTagCountAggregateOutputType | null
    _min: StoryTagMinAggregateOutputType | null
    _max: StoryTagMaxAggregateOutputType | null
  }

  type GetStoryTagGroupByPayload<T extends StoryTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoryTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoryTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoryTagGroupByOutputType[P]>
            : GetScalarType<T[P], StoryTagGroupByOutputType[P]>
        }
      >
    >


  export type StoryTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    storyId?: boolean
    tagId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    story?: boolean | StoryDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["storyTag"]>



  export type StoryTagSelectScalar = {
    id?: boolean
    storyId?: boolean
    tagId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StoryTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "storyId" | "tagId" | "createdAt" | "updatedAt", ExtArgs["result"]["storyTag"]>
  export type StoryTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    story?: boolean | StoryDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $StoryTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StoryTag"
    objects: {
      story: Prisma.$StoryPayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      storyId: string
      tagId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["storyTag"]>
    composites: {}
  }

  type StoryTagGetPayload<S extends boolean | null | undefined | StoryTagDefaultArgs> = $Result.GetResult<Prisma.$StoryTagPayload, S>

  type StoryTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StoryTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StoryTagCountAggregateInputType | true
    }

  export interface StoryTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StoryTag'], meta: { name: 'StoryTag' } }
    /**
     * Find zero or one StoryTag that matches the filter.
     * @param {StoryTagFindUniqueArgs} args - Arguments to find a StoryTag
     * @example
     * // Get one StoryTag
     * const storyTag = await prisma.storyTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StoryTagFindUniqueArgs>(args: SelectSubset<T, StoryTagFindUniqueArgs<ExtArgs>>): Prisma__StoryTagClient<$Result.GetResult<Prisma.$StoryTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StoryTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StoryTagFindUniqueOrThrowArgs} args - Arguments to find a StoryTag
     * @example
     * // Get one StoryTag
     * const storyTag = await prisma.storyTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StoryTagFindUniqueOrThrowArgs>(args: SelectSubset<T, StoryTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StoryTagClient<$Result.GetResult<Prisma.$StoryTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StoryTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryTagFindFirstArgs} args - Arguments to find a StoryTag
     * @example
     * // Get one StoryTag
     * const storyTag = await prisma.storyTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StoryTagFindFirstArgs>(args?: SelectSubset<T, StoryTagFindFirstArgs<ExtArgs>>): Prisma__StoryTagClient<$Result.GetResult<Prisma.$StoryTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StoryTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryTagFindFirstOrThrowArgs} args - Arguments to find a StoryTag
     * @example
     * // Get one StoryTag
     * const storyTag = await prisma.storyTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StoryTagFindFirstOrThrowArgs>(args?: SelectSubset<T, StoryTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__StoryTagClient<$Result.GetResult<Prisma.$StoryTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StoryTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StoryTags
     * const storyTags = await prisma.storyTag.findMany()
     * 
     * // Get first 10 StoryTags
     * const storyTags = await prisma.storyTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storyTagWithIdOnly = await prisma.storyTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StoryTagFindManyArgs>(args?: SelectSubset<T, StoryTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StoryTag.
     * @param {StoryTagCreateArgs} args - Arguments to create a StoryTag.
     * @example
     * // Create one StoryTag
     * const StoryTag = await prisma.storyTag.create({
     *   data: {
     *     // ... data to create a StoryTag
     *   }
     * })
     * 
     */
    create<T extends StoryTagCreateArgs>(args: SelectSubset<T, StoryTagCreateArgs<ExtArgs>>): Prisma__StoryTagClient<$Result.GetResult<Prisma.$StoryTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StoryTags.
     * @param {StoryTagCreateManyArgs} args - Arguments to create many StoryTags.
     * @example
     * // Create many StoryTags
     * const storyTag = await prisma.storyTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StoryTagCreateManyArgs>(args?: SelectSubset<T, StoryTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StoryTag.
     * @param {StoryTagDeleteArgs} args - Arguments to delete one StoryTag.
     * @example
     * // Delete one StoryTag
     * const StoryTag = await prisma.storyTag.delete({
     *   where: {
     *     // ... filter to delete one StoryTag
     *   }
     * })
     * 
     */
    delete<T extends StoryTagDeleteArgs>(args: SelectSubset<T, StoryTagDeleteArgs<ExtArgs>>): Prisma__StoryTagClient<$Result.GetResult<Prisma.$StoryTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StoryTag.
     * @param {StoryTagUpdateArgs} args - Arguments to update one StoryTag.
     * @example
     * // Update one StoryTag
     * const storyTag = await prisma.storyTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StoryTagUpdateArgs>(args: SelectSubset<T, StoryTagUpdateArgs<ExtArgs>>): Prisma__StoryTagClient<$Result.GetResult<Prisma.$StoryTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StoryTags.
     * @param {StoryTagDeleteManyArgs} args - Arguments to filter StoryTags to delete.
     * @example
     * // Delete a few StoryTags
     * const { count } = await prisma.storyTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StoryTagDeleteManyArgs>(args?: SelectSubset<T, StoryTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StoryTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StoryTags
     * const storyTag = await prisma.storyTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StoryTagUpdateManyArgs>(args: SelectSubset<T, StoryTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StoryTag.
     * @param {StoryTagUpsertArgs} args - Arguments to update or create a StoryTag.
     * @example
     * // Update or create a StoryTag
     * const storyTag = await prisma.storyTag.upsert({
     *   create: {
     *     // ... data to create a StoryTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StoryTag we want to update
     *   }
     * })
     */
    upsert<T extends StoryTagUpsertArgs>(args: SelectSubset<T, StoryTagUpsertArgs<ExtArgs>>): Prisma__StoryTagClient<$Result.GetResult<Prisma.$StoryTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StoryTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryTagCountArgs} args - Arguments to filter StoryTags to count.
     * @example
     * // Count the number of StoryTags
     * const count = await prisma.storyTag.count({
     *   where: {
     *     // ... the filter for the StoryTags we want to count
     *   }
     * })
    **/
    count<T extends StoryTagCountArgs>(
      args?: Subset<T, StoryTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoryTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StoryTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoryTagAggregateArgs>(args: Subset<T, StoryTagAggregateArgs>): Prisma.PrismaPromise<GetStoryTagAggregateType<T>>

    /**
     * Group by StoryTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoryTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoryTagGroupByArgs['orderBy'] }
        : { orderBy?: StoryTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoryTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoryTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StoryTag model
   */
  readonly fields: StoryTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StoryTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoryTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    story<T extends StoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoryDefaultArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StoryTag model
   */
  interface StoryTagFieldRefs {
    readonly id: FieldRef<"StoryTag", 'String'>
    readonly storyId: FieldRef<"StoryTag", 'String'>
    readonly tagId: FieldRef<"StoryTag", 'String'>
    readonly createdAt: FieldRef<"StoryTag", 'DateTime'>
    readonly updatedAt: FieldRef<"StoryTag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StoryTag findUnique
   */
  export type StoryTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryTag
     */
    select?: StoryTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryTag
     */
    omit?: StoryTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryTagInclude<ExtArgs> | null
    /**
     * Filter, which StoryTag to fetch.
     */
    where: StoryTagWhereUniqueInput
  }

  /**
   * StoryTag findUniqueOrThrow
   */
  export type StoryTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryTag
     */
    select?: StoryTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryTag
     */
    omit?: StoryTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryTagInclude<ExtArgs> | null
    /**
     * Filter, which StoryTag to fetch.
     */
    where: StoryTagWhereUniqueInput
  }

  /**
   * StoryTag findFirst
   */
  export type StoryTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryTag
     */
    select?: StoryTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryTag
     */
    omit?: StoryTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryTagInclude<ExtArgs> | null
    /**
     * Filter, which StoryTag to fetch.
     */
    where?: StoryTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoryTags to fetch.
     */
    orderBy?: StoryTagOrderByWithRelationInput | StoryTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StoryTags.
     */
    cursor?: StoryTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoryTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoryTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StoryTags.
     */
    distinct?: StoryTagScalarFieldEnum | StoryTagScalarFieldEnum[]
  }

  /**
   * StoryTag findFirstOrThrow
   */
  export type StoryTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryTag
     */
    select?: StoryTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryTag
     */
    omit?: StoryTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryTagInclude<ExtArgs> | null
    /**
     * Filter, which StoryTag to fetch.
     */
    where?: StoryTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoryTags to fetch.
     */
    orderBy?: StoryTagOrderByWithRelationInput | StoryTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StoryTags.
     */
    cursor?: StoryTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoryTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoryTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StoryTags.
     */
    distinct?: StoryTagScalarFieldEnum | StoryTagScalarFieldEnum[]
  }

  /**
   * StoryTag findMany
   */
  export type StoryTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryTag
     */
    select?: StoryTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryTag
     */
    omit?: StoryTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryTagInclude<ExtArgs> | null
    /**
     * Filter, which StoryTags to fetch.
     */
    where?: StoryTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoryTags to fetch.
     */
    orderBy?: StoryTagOrderByWithRelationInput | StoryTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StoryTags.
     */
    cursor?: StoryTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoryTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoryTags.
     */
    skip?: number
    distinct?: StoryTagScalarFieldEnum | StoryTagScalarFieldEnum[]
  }

  /**
   * StoryTag create
   */
  export type StoryTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryTag
     */
    select?: StoryTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryTag
     */
    omit?: StoryTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryTagInclude<ExtArgs> | null
    /**
     * The data needed to create a StoryTag.
     */
    data: XOR<StoryTagCreateInput, StoryTagUncheckedCreateInput>
  }

  /**
   * StoryTag createMany
   */
  export type StoryTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StoryTags.
     */
    data: StoryTagCreateManyInput | StoryTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StoryTag update
   */
  export type StoryTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryTag
     */
    select?: StoryTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryTag
     */
    omit?: StoryTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryTagInclude<ExtArgs> | null
    /**
     * The data needed to update a StoryTag.
     */
    data: XOR<StoryTagUpdateInput, StoryTagUncheckedUpdateInput>
    /**
     * Choose, which StoryTag to update.
     */
    where: StoryTagWhereUniqueInput
  }

  /**
   * StoryTag updateMany
   */
  export type StoryTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StoryTags.
     */
    data: XOR<StoryTagUpdateManyMutationInput, StoryTagUncheckedUpdateManyInput>
    /**
     * Filter which StoryTags to update
     */
    where?: StoryTagWhereInput
    /**
     * Limit how many StoryTags to update.
     */
    limit?: number
  }

  /**
   * StoryTag upsert
   */
  export type StoryTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryTag
     */
    select?: StoryTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryTag
     */
    omit?: StoryTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryTagInclude<ExtArgs> | null
    /**
     * The filter to search for the StoryTag to update in case it exists.
     */
    where: StoryTagWhereUniqueInput
    /**
     * In case the StoryTag found by the `where` argument doesn't exist, create a new StoryTag with this data.
     */
    create: XOR<StoryTagCreateInput, StoryTagUncheckedCreateInput>
    /**
     * In case the StoryTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoryTagUpdateInput, StoryTagUncheckedUpdateInput>
  }

  /**
   * StoryTag delete
   */
  export type StoryTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryTag
     */
    select?: StoryTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryTag
     */
    omit?: StoryTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryTagInclude<ExtArgs> | null
    /**
     * Filter which StoryTag to delete.
     */
    where: StoryTagWhereUniqueInput
  }

  /**
   * StoryTag deleteMany
   */
  export type StoryTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StoryTags to delete
     */
    where?: StoryTagWhereInput
    /**
     * Limit how many StoryTags to delete.
     */
    limit?: number
  }

  /**
   * StoryTag without action
   */
  export type StoryTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryTag
     */
    select?: StoryTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryTag
     */
    omit?: StoryTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryTagInclude<ExtArgs> | null
  }


  /**
   * Model StoryReadStatus
   */

  export type AggregateStoryReadStatus = {
    _count: StoryReadStatusCountAggregateOutputType | null
    _avg: StoryReadStatusAvgAggregateOutputType | null
    _sum: StoryReadStatusSumAggregateOutputType | null
    _min: StoryReadStatusMinAggregateOutputType | null
    _max: StoryReadStatusMaxAggregateOutputType | null
  }

  export type StoryReadStatusAvgAggregateOutputType = {
    userId: number | null
  }

  export type StoryReadStatusSumAggregateOutputType = {
    userId: number | null
  }

  export type StoryReadStatusMinAggregateOutputType = {
    id: string | null
    storyId: string | null
    userId: number | null
    lastChapterId: string | null
    lastChapterReadAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StoryReadStatusMaxAggregateOutputType = {
    id: string | null
    storyId: string | null
    userId: number | null
    lastChapterId: string | null
    lastChapterReadAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StoryReadStatusCountAggregateOutputType = {
    id: number
    storyId: number
    userId: number
    lastChapterId: number
    lastChapterReadAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StoryReadStatusAvgAggregateInputType = {
    userId?: true
  }

  export type StoryReadStatusSumAggregateInputType = {
    userId?: true
  }

  export type StoryReadStatusMinAggregateInputType = {
    id?: true
    storyId?: true
    userId?: true
    lastChapterId?: true
    lastChapterReadAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StoryReadStatusMaxAggregateInputType = {
    id?: true
    storyId?: true
    userId?: true
    lastChapterId?: true
    lastChapterReadAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StoryReadStatusCountAggregateInputType = {
    id?: true
    storyId?: true
    userId?: true
    lastChapterId?: true
    lastChapterReadAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StoryReadStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StoryReadStatus to aggregate.
     */
    where?: StoryReadStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoryReadStatuses to fetch.
     */
    orderBy?: StoryReadStatusOrderByWithRelationInput | StoryReadStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoryReadStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoryReadStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoryReadStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StoryReadStatuses
    **/
    _count?: true | StoryReadStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoryReadStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StoryReadStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoryReadStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoryReadStatusMaxAggregateInputType
  }

  export type GetStoryReadStatusAggregateType<T extends StoryReadStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStoryReadStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStoryReadStatus[P]>
      : GetScalarType<T[P], AggregateStoryReadStatus[P]>
  }




  export type StoryReadStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryReadStatusWhereInput
    orderBy?: StoryReadStatusOrderByWithAggregationInput | StoryReadStatusOrderByWithAggregationInput[]
    by: StoryReadStatusScalarFieldEnum[] | StoryReadStatusScalarFieldEnum
    having?: StoryReadStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoryReadStatusCountAggregateInputType | true
    _avg?: StoryReadStatusAvgAggregateInputType
    _sum?: StoryReadStatusSumAggregateInputType
    _min?: StoryReadStatusMinAggregateInputType
    _max?: StoryReadStatusMaxAggregateInputType
  }

  export type StoryReadStatusGroupByOutputType = {
    id: string
    storyId: string
    userId: number
    lastChapterId: string | null
    lastChapterReadAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: StoryReadStatusCountAggregateOutputType | null
    _avg: StoryReadStatusAvgAggregateOutputType | null
    _sum: StoryReadStatusSumAggregateOutputType | null
    _min: StoryReadStatusMinAggregateOutputType | null
    _max: StoryReadStatusMaxAggregateOutputType | null
  }

  type GetStoryReadStatusGroupByPayload<T extends StoryReadStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoryReadStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoryReadStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoryReadStatusGroupByOutputType[P]>
            : GetScalarType<T[P], StoryReadStatusGroupByOutputType[P]>
        }
      >
    >


  export type StoryReadStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    storyId?: boolean
    userId?: boolean
    lastChapterId?: boolean
    lastChapterReadAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    story?: boolean | StoryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    lastChapter?: boolean | StoryReadStatus$lastChapterArgs<ExtArgs>
  }, ExtArgs["result"]["storyReadStatus"]>



  export type StoryReadStatusSelectScalar = {
    id?: boolean
    storyId?: boolean
    userId?: boolean
    lastChapterId?: boolean
    lastChapterReadAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StoryReadStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "storyId" | "userId" | "lastChapterId" | "lastChapterReadAt" | "createdAt" | "updatedAt", ExtArgs["result"]["storyReadStatus"]>
  export type StoryReadStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    story?: boolean | StoryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    lastChapter?: boolean | StoryReadStatus$lastChapterArgs<ExtArgs>
  }

  export type $StoryReadStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StoryReadStatus"
    objects: {
      story: Prisma.$StoryPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      lastChapter: Prisma.$ChapterPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      storyId: string
      userId: number
      lastChapterId: string | null
      lastChapterReadAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["storyReadStatus"]>
    composites: {}
  }

  type StoryReadStatusGetPayload<S extends boolean | null | undefined | StoryReadStatusDefaultArgs> = $Result.GetResult<Prisma.$StoryReadStatusPayload, S>

  type StoryReadStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StoryReadStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StoryReadStatusCountAggregateInputType | true
    }

  export interface StoryReadStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StoryReadStatus'], meta: { name: 'StoryReadStatus' } }
    /**
     * Find zero or one StoryReadStatus that matches the filter.
     * @param {StoryReadStatusFindUniqueArgs} args - Arguments to find a StoryReadStatus
     * @example
     * // Get one StoryReadStatus
     * const storyReadStatus = await prisma.storyReadStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StoryReadStatusFindUniqueArgs>(args: SelectSubset<T, StoryReadStatusFindUniqueArgs<ExtArgs>>): Prisma__StoryReadStatusClient<$Result.GetResult<Prisma.$StoryReadStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StoryReadStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StoryReadStatusFindUniqueOrThrowArgs} args - Arguments to find a StoryReadStatus
     * @example
     * // Get one StoryReadStatus
     * const storyReadStatus = await prisma.storyReadStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StoryReadStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, StoryReadStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StoryReadStatusClient<$Result.GetResult<Prisma.$StoryReadStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StoryReadStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryReadStatusFindFirstArgs} args - Arguments to find a StoryReadStatus
     * @example
     * // Get one StoryReadStatus
     * const storyReadStatus = await prisma.storyReadStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StoryReadStatusFindFirstArgs>(args?: SelectSubset<T, StoryReadStatusFindFirstArgs<ExtArgs>>): Prisma__StoryReadStatusClient<$Result.GetResult<Prisma.$StoryReadStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StoryReadStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryReadStatusFindFirstOrThrowArgs} args - Arguments to find a StoryReadStatus
     * @example
     * // Get one StoryReadStatus
     * const storyReadStatus = await prisma.storyReadStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StoryReadStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, StoryReadStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__StoryReadStatusClient<$Result.GetResult<Prisma.$StoryReadStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StoryReadStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryReadStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StoryReadStatuses
     * const storyReadStatuses = await prisma.storyReadStatus.findMany()
     * 
     * // Get first 10 StoryReadStatuses
     * const storyReadStatuses = await prisma.storyReadStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storyReadStatusWithIdOnly = await prisma.storyReadStatus.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StoryReadStatusFindManyArgs>(args?: SelectSubset<T, StoryReadStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryReadStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StoryReadStatus.
     * @param {StoryReadStatusCreateArgs} args - Arguments to create a StoryReadStatus.
     * @example
     * // Create one StoryReadStatus
     * const StoryReadStatus = await prisma.storyReadStatus.create({
     *   data: {
     *     // ... data to create a StoryReadStatus
     *   }
     * })
     * 
     */
    create<T extends StoryReadStatusCreateArgs>(args: SelectSubset<T, StoryReadStatusCreateArgs<ExtArgs>>): Prisma__StoryReadStatusClient<$Result.GetResult<Prisma.$StoryReadStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StoryReadStatuses.
     * @param {StoryReadStatusCreateManyArgs} args - Arguments to create many StoryReadStatuses.
     * @example
     * // Create many StoryReadStatuses
     * const storyReadStatus = await prisma.storyReadStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StoryReadStatusCreateManyArgs>(args?: SelectSubset<T, StoryReadStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StoryReadStatus.
     * @param {StoryReadStatusDeleteArgs} args - Arguments to delete one StoryReadStatus.
     * @example
     * // Delete one StoryReadStatus
     * const StoryReadStatus = await prisma.storyReadStatus.delete({
     *   where: {
     *     // ... filter to delete one StoryReadStatus
     *   }
     * })
     * 
     */
    delete<T extends StoryReadStatusDeleteArgs>(args: SelectSubset<T, StoryReadStatusDeleteArgs<ExtArgs>>): Prisma__StoryReadStatusClient<$Result.GetResult<Prisma.$StoryReadStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StoryReadStatus.
     * @param {StoryReadStatusUpdateArgs} args - Arguments to update one StoryReadStatus.
     * @example
     * // Update one StoryReadStatus
     * const storyReadStatus = await prisma.storyReadStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StoryReadStatusUpdateArgs>(args: SelectSubset<T, StoryReadStatusUpdateArgs<ExtArgs>>): Prisma__StoryReadStatusClient<$Result.GetResult<Prisma.$StoryReadStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StoryReadStatuses.
     * @param {StoryReadStatusDeleteManyArgs} args - Arguments to filter StoryReadStatuses to delete.
     * @example
     * // Delete a few StoryReadStatuses
     * const { count } = await prisma.storyReadStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StoryReadStatusDeleteManyArgs>(args?: SelectSubset<T, StoryReadStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StoryReadStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryReadStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StoryReadStatuses
     * const storyReadStatus = await prisma.storyReadStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StoryReadStatusUpdateManyArgs>(args: SelectSubset<T, StoryReadStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StoryReadStatus.
     * @param {StoryReadStatusUpsertArgs} args - Arguments to update or create a StoryReadStatus.
     * @example
     * // Update or create a StoryReadStatus
     * const storyReadStatus = await prisma.storyReadStatus.upsert({
     *   create: {
     *     // ... data to create a StoryReadStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StoryReadStatus we want to update
     *   }
     * })
     */
    upsert<T extends StoryReadStatusUpsertArgs>(args: SelectSubset<T, StoryReadStatusUpsertArgs<ExtArgs>>): Prisma__StoryReadStatusClient<$Result.GetResult<Prisma.$StoryReadStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StoryReadStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryReadStatusCountArgs} args - Arguments to filter StoryReadStatuses to count.
     * @example
     * // Count the number of StoryReadStatuses
     * const count = await prisma.storyReadStatus.count({
     *   where: {
     *     // ... the filter for the StoryReadStatuses we want to count
     *   }
     * })
    **/
    count<T extends StoryReadStatusCountArgs>(
      args?: Subset<T, StoryReadStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoryReadStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StoryReadStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryReadStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoryReadStatusAggregateArgs>(args: Subset<T, StoryReadStatusAggregateArgs>): Prisma.PrismaPromise<GetStoryReadStatusAggregateType<T>>

    /**
     * Group by StoryReadStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryReadStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoryReadStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoryReadStatusGroupByArgs['orderBy'] }
        : { orderBy?: StoryReadStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoryReadStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoryReadStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StoryReadStatus model
   */
  readonly fields: StoryReadStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StoryReadStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoryReadStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    story<T extends StoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoryDefaultArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lastChapter<T extends StoryReadStatus$lastChapterArgs<ExtArgs> = {}>(args?: Subset<T, StoryReadStatus$lastChapterArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StoryReadStatus model
   */
  interface StoryReadStatusFieldRefs {
    readonly id: FieldRef<"StoryReadStatus", 'String'>
    readonly storyId: FieldRef<"StoryReadStatus", 'String'>
    readonly userId: FieldRef<"StoryReadStatus", 'Int'>
    readonly lastChapterId: FieldRef<"StoryReadStatus", 'String'>
    readonly lastChapterReadAt: FieldRef<"StoryReadStatus", 'DateTime'>
    readonly createdAt: FieldRef<"StoryReadStatus", 'DateTime'>
    readonly updatedAt: FieldRef<"StoryReadStatus", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StoryReadStatus findUnique
   */
  export type StoryReadStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryReadStatus
     */
    select?: StoryReadStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryReadStatus
     */
    omit?: StoryReadStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryReadStatusInclude<ExtArgs> | null
    /**
     * Filter, which StoryReadStatus to fetch.
     */
    where: StoryReadStatusWhereUniqueInput
  }

  /**
   * StoryReadStatus findUniqueOrThrow
   */
  export type StoryReadStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryReadStatus
     */
    select?: StoryReadStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryReadStatus
     */
    omit?: StoryReadStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryReadStatusInclude<ExtArgs> | null
    /**
     * Filter, which StoryReadStatus to fetch.
     */
    where: StoryReadStatusWhereUniqueInput
  }

  /**
   * StoryReadStatus findFirst
   */
  export type StoryReadStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryReadStatus
     */
    select?: StoryReadStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryReadStatus
     */
    omit?: StoryReadStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryReadStatusInclude<ExtArgs> | null
    /**
     * Filter, which StoryReadStatus to fetch.
     */
    where?: StoryReadStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoryReadStatuses to fetch.
     */
    orderBy?: StoryReadStatusOrderByWithRelationInput | StoryReadStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StoryReadStatuses.
     */
    cursor?: StoryReadStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoryReadStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoryReadStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StoryReadStatuses.
     */
    distinct?: StoryReadStatusScalarFieldEnum | StoryReadStatusScalarFieldEnum[]
  }

  /**
   * StoryReadStatus findFirstOrThrow
   */
  export type StoryReadStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryReadStatus
     */
    select?: StoryReadStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryReadStatus
     */
    omit?: StoryReadStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryReadStatusInclude<ExtArgs> | null
    /**
     * Filter, which StoryReadStatus to fetch.
     */
    where?: StoryReadStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoryReadStatuses to fetch.
     */
    orderBy?: StoryReadStatusOrderByWithRelationInput | StoryReadStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StoryReadStatuses.
     */
    cursor?: StoryReadStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoryReadStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoryReadStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StoryReadStatuses.
     */
    distinct?: StoryReadStatusScalarFieldEnum | StoryReadStatusScalarFieldEnum[]
  }

  /**
   * StoryReadStatus findMany
   */
  export type StoryReadStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryReadStatus
     */
    select?: StoryReadStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryReadStatus
     */
    omit?: StoryReadStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryReadStatusInclude<ExtArgs> | null
    /**
     * Filter, which StoryReadStatuses to fetch.
     */
    where?: StoryReadStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoryReadStatuses to fetch.
     */
    orderBy?: StoryReadStatusOrderByWithRelationInput | StoryReadStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StoryReadStatuses.
     */
    cursor?: StoryReadStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoryReadStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoryReadStatuses.
     */
    skip?: number
    distinct?: StoryReadStatusScalarFieldEnum | StoryReadStatusScalarFieldEnum[]
  }

  /**
   * StoryReadStatus create
   */
  export type StoryReadStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryReadStatus
     */
    select?: StoryReadStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryReadStatus
     */
    omit?: StoryReadStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryReadStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a StoryReadStatus.
     */
    data: XOR<StoryReadStatusCreateInput, StoryReadStatusUncheckedCreateInput>
  }

  /**
   * StoryReadStatus createMany
   */
  export type StoryReadStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StoryReadStatuses.
     */
    data: StoryReadStatusCreateManyInput | StoryReadStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StoryReadStatus update
   */
  export type StoryReadStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryReadStatus
     */
    select?: StoryReadStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryReadStatus
     */
    omit?: StoryReadStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryReadStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a StoryReadStatus.
     */
    data: XOR<StoryReadStatusUpdateInput, StoryReadStatusUncheckedUpdateInput>
    /**
     * Choose, which StoryReadStatus to update.
     */
    where: StoryReadStatusWhereUniqueInput
  }

  /**
   * StoryReadStatus updateMany
   */
  export type StoryReadStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StoryReadStatuses.
     */
    data: XOR<StoryReadStatusUpdateManyMutationInput, StoryReadStatusUncheckedUpdateManyInput>
    /**
     * Filter which StoryReadStatuses to update
     */
    where?: StoryReadStatusWhereInput
    /**
     * Limit how many StoryReadStatuses to update.
     */
    limit?: number
  }

  /**
   * StoryReadStatus upsert
   */
  export type StoryReadStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryReadStatus
     */
    select?: StoryReadStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryReadStatus
     */
    omit?: StoryReadStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryReadStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the StoryReadStatus to update in case it exists.
     */
    where: StoryReadStatusWhereUniqueInput
    /**
     * In case the StoryReadStatus found by the `where` argument doesn't exist, create a new StoryReadStatus with this data.
     */
    create: XOR<StoryReadStatusCreateInput, StoryReadStatusUncheckedCreateInput>
    /**
     * In case the StoryReadStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoryReadStatusUpdateInput, StoryReadStatusUncheckedUpdateInput>
  }

  /**
   * StoryReadStatus delete
   */
  export type StoryReadStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryReadStatus
     */
    select?: StoryReadStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryReadStatus
     */
    omit?: StoryReadStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryReadStatusInclude<ExtArgs> | null
    /**
     * Filter which StoryReadStatus to delete.
     */
    where: StoryReadStatusWhereUniqueInput
  }

  /**
   * StoryReadStatus deleteMany
   */
  export type StoryReadStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StoryReadStatuses to delete
     */
    where?: StoryReadStatusWhereInput
    /**
     * Limit how many StoryReadStatuses to delete.
     */
    limit?: number
  }

  /**
   * StoryReadStatus.lastChapter
   */
  export type StoryReadStatus$lastChapterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    where?: ChapterWhereInput
  }

  /**
   * StoryReadStatus without action
   */
  export type StoryReadStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryReadStatus
     */
    select?: StoryReadStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryReadStatus
     */
    omit?: StoryReadStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryReadStatusInclude<ExtArgs> | null
  }


  /**
   * Model Book
   */

  export type AggregateBook = {
    _count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  export type BookAvgAggregateOutputType = {
    pages: number | null
    sortOrder: number | null
  }

  export type BookSumAggregateOutputType = {
    pages: number | null
    sortOrder: number | null
  }

  export type BookMinAggregateOutputType = {
    id: string | null
    name: string | null
    summary: string | null
    storyId: string | null
    coverArtFileId: string | null
    spineArtFileId: string | null
    pages: number | null
    sortOrder: number | null
    nodeType: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookMaxAggregateOutputType = {
    id: string | null
    name: string | null
    summary: string | null
    storyId: string | null
    coverArtFileId: string | null
    spineArtFileId: string | null
    pages: number | null
    sortOrder: number | null
    nodeType: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookCountAggregateOutputType = {
    id: number
    name: number
    summary: number
    storyId: number
    coverArtFileId: number
    spineArtFileId: number
    pages: number
    sortOrder: number
    nodeType: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookAvgAggregateInputType = {
    pages?: true
    sortOrder?: true
  }

  export type BookSumAggregateInputType = {
    pages?: true
    sortOrder?: true
  }

  export type BookMinAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    storyId?: true
    coverArtFileId?: true
    spineArtFileId?: true
    pages?: true
    sortOrder?: true
    nodeType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookMaxAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    storyId?: true
    coverArtFileId?: true
    spineArtFileId?: true
    pages?: true
    sortOrder?: true
    nodeType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookCountAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    storyId?: true
    coverArtFileId?: true
    spineArtFileId?: true
    pages?: true
    sortOrder?: true
    nodeType?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Book to aggregate.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Books
    **/
    _count?: true | BookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookMaxAggregateInputType
  }

  export type GetBookAggregateType<T extends BookAggregateArgs> = {
        [P in keyof T & keyof AggregateBook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBook[P]>
      : GetScalarType<T[P], AggregateBook[P]>
  }




  export type BookGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookWhereInput
    orderBy?: BookOrderByWithAggregationInput | BookOrderByWithAggregationInput[]
    by: BookScalarFieldEnum[] | BookScalarFieldEnum
    having?: BookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookCountAggregateInputType | true
    _avg?: BookAvgAggregateInputType
    _sum?: BookSumAggregateInputType
    _min?: BookMinAggregateInputType
    _max?: BookMaxAggregateInputType
  }

  export type BookGroupByOutputType = {
    id: string
    name: string
    summary: string | null
    storyId: string
    coverArtFileId: string | null
    spineArtFileId: string | null
    pages: number | null
    sortOrder: number
    nodeType: string
    createdAt: Date
    updatedAt: Date
    _count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  type GetBookGroupByPayload<T extends BookGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookGroupByOutputType[P]>
            : GetScalarType<T[P], BookGroupByOutputType[P]>
        }
      >
    >


  export type BookSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    summary?: boolean
    storyId?: boolean
    coverArtFileId?: boolean
    spineArtFileId?: boolean
    pages?: boolean
    sortOrder?: boolean
    nodeType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    story?: boolean | StoryDefaultArgs<ExtArgs>
    coverArtFile?: boolean | Book$coverArtFileArgs<ExtArgs>
    spineArtFile?: boolean | Book$spineArtFileArgs<ExtArgs>
    arcs?: boolean | Book$arcsArgs<ExtArgs>
    _count?: boolean | BookCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["book"]>



  export type BookSelectScalar = {
    id?: boolean
    name?: boolean
    summary?: boolean
    storyId?: boolean
    coverArtFileId?: boolean
    spineArtFileId?: boolean
    pages?: boolean
    sortOrder?: boolean
    nodeType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "summary" | "storyId" | "coverArtFileId" | "spineArtFileId" | "pages" | "sortOrder" | "nodeType" | "createdAt" | "updatedAt", ExtArgs["result"]["book"]>
  export type BookInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    story?: boolean | StoryDefaultArgs<ExtArgs>
    coverArtFile?: boolean | Book$coverArtFileArgs<ExtArgs>
    spineArtFile?: boolean | Book$spineArtFileArgs<ExtArgs>
    arcs?: boolean | Book$arcsArgs<ExtArgs>
    _count?: boolean | BookCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BookPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Book"
    objects: {
      story: Prisma.$StoryPayload<ExtArgs>
      coverArtFile: Prisma.$FilePayload<ExtArgs> | null
      spineArtFile: Prisma.$FilePayload<ExtArgs> | null
      arcs: Prisma.$ArcPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      summary: string | null
      storyId: string
      coverArtFileId: string | null
      spineArtFileId: string | null
      pages: number | null
      sortOrder: number
      nodeType: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["book"]>
    composites: {}
  }

  type BookGetPayload<S extends boolean | null | undefined | BookDefaultArgs> = $Result.GetResult<Prisma.$BookPayload, S>

  type BookCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookCountAggregateInputType | true
    }

  export interface BookDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Book'], meta: { name: 'Book' } }
    /**
     * Find zero or one Book that matches the filter.
     * @param {BookFindUniqueArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookFindUniqueArgs>(args: SelectSubset<T, BookFindUniqueArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Book that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookFindUniqueOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookFindUniqueOrThrowArgs>(args: SelectSubset<T, BookFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Book that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookFindFirstArgs>(args?: SelectSubset<T, BookFindFirstArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Book that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookFindFirstOrThrowArgs>(args?: SelectSubset<T, BookFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Books
     * const books = await prisma.book.findMany()
     * 
     * // Get first 10 Books
     * const books = await prisma.book.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookWithIdOnly = await prisma.book.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookFindManyArgs>(args?: SelectSubset<T, BookFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Book.
     * @param {BookCreateArgs} args - Arguments to create a Book.
     * @example
     * // Create one Book
     * const Book = await prisma.book.create({
     *   data: {
     *     // ... data to create a Book
     *   }
     * })
     * 
     */
    create<T extends BookCreateArgs>(args: SelectSubset<T, BookCreateArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Books.
     * @param {BookCreateManyArgs} args - Arguments to create many Books.
     * @example
     * // Create many Books
     * const book = await prisma.book.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookCreateManyArgs>(args?: SelectSubset<T, BookCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Book.
     * @param {BookDeleteArgs} args - Arguments to delete one Book.
     * @example
     * // Delete one Book
     * const Book = await prisma.book.delete({
     *   where: {
     *     // ... filter to delete one Book
     *   }
     * })
     * 
     */
    delete<T extends BookDeleteArgs>(args: SelectSubset<T, BookDeleteArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Book.
     * @param {BookUpdateArgs} args - Arguments to update one Book.
     * @example
     * // Update one Book
     * const book = await prisma.book.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookUpdateArgs>(args: SelectSubset<T, BookUpdateArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Books.
     * @param {BookDeleteManyArgs} args - Arguments to filter Books to delete.
     * @example
     * // Delete a few Books
     * const { count } = await prisma.book.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookDeleteManyArgs>(args?: SelectSubset<T, BookDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Books
     * const book = await prisma.book.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookUpdateManyArgs>(args: SelectSubset<T, BookUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Book.
     * @param {BookUpsertArgs} args - Arguments to update or create a Book.
     * @example
     * // Update or create a Book
     * const book = await prisma.book.upsert({
     *   create: {
     *     // ... data to create a Book
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Book we want to update
     *   }
     * })
     */
    upsert<T extends BookUpsertArgs>(args: SelectSubset<T, BookUpsertArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookCountArgs} args - Arguments to filter Books to count.
     * @example
     * // Count the number of Books
     * const count = await prisma.book.count({
     *   where: {
     *     // ... the filter for the Books we want to count
     *   }
     * })
    **/
    count<T extends BookCountArgs>(
      args?: Subset<T, BookCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookAggregateArgs>(args: Subset<T, BookAggregateArgs>): Prisma.PrismaPromise<GetBookAggregateType<T>>

    /**
     * Group by Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookGroupByArgs['orderBy'] }
        : { orderBy?: BookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Book model
   */
  readonly fields: BookFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Book.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    story<T extends StoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoryDefaultArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    coverArtFile<T extends Book$coverArtFileArgs<ExtArgs> = {}>(args?: Subset<T, Book$coverArtFileArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    spineArtFile<T extends Book$spineArtFileArgs<ExtArgs> = {}>(args?: Subset<T, Book$spineArtFileArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    arcs<T extends Book$arcsArgs<ExtArgs> = {}>(args?: Subset<T, Book$arcsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArcPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Book model
   */
  interface BookFieldRefs {
    readonly id: FieldRef<"Book", 'String'>
    readonly name: FieldRef<"Book", 'String'>
    readonly summary: FieldRef<"Book", 'String'>
    readonly storyId: FieldRef<"Book", 'String'>
    readonly coverArtFileId: FieldRef<"Book", 'String'>
    readonly spineArtFileId: FieldRef<"Book", 'String'>
    readonly pages: FieldRef<"Book", 'Int'>
    readonly sortOrder: FieldRef<"Book", 'Int'>
    readonly nodeType: FieldRef<"Book", 'String'>
    readonly createdAt: FieldRef<"Book", 'DateTime'>
    readonly updatedAt: FieldRef<"Book", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Book findUnique
   */
  export type BookFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book findUniqueOrThrow
   */
  export type BookFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book findFirst
   */
  export type BookFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     */
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Book findFirstOrThrow
   */
  export type BookFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Book to fetch.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     */
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Book findMany
   */
  export type BookFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter, which Books to fetch.
     */
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     */
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Books.
     */
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     */
    skip?: number
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * Book create
   */
  export type BookCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * The data needed to create a Book.
     */
    data: XOR<BookCreateInput, BookUncheckedCreateInput>
  }

  /**
   * Book createMany
   */
  export type BookCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Books.
     */
    data: BookCreateManyInput | BookCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Book update
   */
  export type BookUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * The data needed to update a Book.
     */
    data: XOR<BookUpdateInput, BookUncheckedUpdateInput>
    /**
     * Choose, which Book to update.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book updateMany
   */
  export type BookUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Books.
     */
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyInput>
    /**
     * Filter which Books to update
     */
    where?: BookWhereInput
    /**
     * Limit how many Books to update.
     */
    limit?: number
  }

  /**
   * Book upsert
   */
  export type BookUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * The filter to search for the Book to update in case it exists.
     */
    where: BookWhereUniqueInput
    /**
     * In case the Book found by the `where` argument doesn't exist, create a new Book with this data.
     */
    create: XOR<BookCreateInput, BookUncheckedCreateInput>
    /**
     * In case the Book was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookUpdateInput, BookUncheckedUpdateInput>
  }

  /**
   * Book delete
   */
  export type BookDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    /**
     * Filter which Book to delete.
     */
    where: BookWhereUniqueInput
  }

  /**
   * Book deleteMany
   */
  export type BookDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Books to delete
     */
    where?: BookWhereInput
    /**
     * Limit how many Books to delete.
     */
    limit?: number
  }

  /**
   * Book.coverArtFile
   */
  export type Book$coverArtFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
  }

  /**
   * Book.spineArtFile
   */
  export type Book$spineArtFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
  }

  /**
   * Book.arcs
   */
  export type Book$arcsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arc
     */
    select?: ArcSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arc
     */
    omit?: ArcOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArcInclude<ExtArgs> | null
    where?: ArcWhereInput
    orderBy?: ArcOrderByWithRelationInput | ArcOrderByWithRelationInput[]
    cursor?: ArcWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArcScalarFieldEnum | ArcScalarFieldEnum[]
  }

  /**
   * Book without action
   */
  export type BookDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
  }


  /**
   * Model Arc
   */

  export type AggregateArc = {
    _count: ArcCountAggregateOutputType | null
    _avg: ArcAvgAggregateOutputType | null
    _sum: ArcSumAggregateOutputType | null
    _min: ArcMinAggregateOutputType | null
    _max: ArcMaxAggregateOutputType | null
  }

  export type ArcAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type ArcSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type ArcMinAggregateOutputType = {
    id: string | null
    name: string | null
    summary: string | null
    bookId: string | null
    sortOrder: number | null
    nodeType: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArcMaxAggregateOutputType = {
    id: string | null
    name: string | null
    summary: string | null
    bookId: string | null
    sortOrder: number | null
    nodeType: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArcCountAggregateOutputType = {
    id: number
    name: number
    summary: number
    bookId: number
    sortOrder: number
    nodeType: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ArcAvgAggregateInputType = {
    sortOrder?: true
  }

  export type ArcSumAggregateInputType = {
    sortOrder?: true
  }

  export type ArcMinAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    bookId?: true
    sortOrder?: true
    nodeType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArcMaxAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    bookId?: true
    sortOrder?: true
    nodeType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArcCountAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    bookId?: true
    sortOrder?: true
    nodeType?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ArcAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Arc to aggregate.
     */
    where?: ArcWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arcs to fetch.
     */
    orderBy?: ArcOrderByWithRelationInput | ArcOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArcWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arcs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arcs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Arcs
    **/
    _count?: true | ArcCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArcAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArcSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArcMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArcMaxAggregateInputType
  }

  export type GetArcAggregateType<T extends ArcAggregateArgs> = {
        [P in keyof T & keyof AggregateArc]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArc[P]>
      : GetScalarType<T[P], AggregateArc[P]>
  }




  export type ArcGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArcWhereInput
    orderBy?: ArcOrderByWithAggregationInput | ArcOrderByWithAggregationInput[]
    by: ArcScalarFieldEnum[] | ArcScalarFieldEnum
    having?: ArcScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArcCountAggregateInputType | true
    _avg?: ArcAvgAggregateInputType
    _sum?: ArcSumAggregateInputType
    _min?: ArcMinAggregateInputType
    _max?: ArcMaxAggregateInputType
  }

  export type ArcGroupByOutputType = {
    id: string
    name: string
    summary: string | null
    bookId: string
    sortOrder: number
    nodeType: string
    createdAt: Date
    updatedAt: Date
    _count: ArcCountAggregateOutputType | null
    _avg: ArcAvgAggregateOutputType | null
    _sum: ArcSumAggregateOutputType | null
    _min: ArcMinAggregateOutputType | null
    _max: ArcMaxAggregateOutputType | null
  }

  type GetArcGroupByPayload<T extends ArcGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArcGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArcGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArcGroupByOutputType[P]>
            : GetScalarType<T[P], ArcGroupByOutputType[P]>
        }
      >
    >


  export type ArcSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    summary?: boolean
    bookId?: boolean
    sortOrder?: boolean
    nodeType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    book?: boolean | BookDefaultArgs<ExtArgs>
    chapters?: boolean | Arc$chaptersArgs<ExtArgs>
    _count?: boolean | ArcCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["arc"]>



  export type ArcSelectScalar = {
    id?: boolean
    name?: boolean
    summary?: boolean
    bookId?: boolean
    sortOrder?: boolean
    nodeType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ArcOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "summary" | "bookId" | "sortOrder" | "nodeType" | "createdAt" | "updatedAt", ExtArgs["result"]["arc"]>
  export type ArcInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    book?: boolean | BookDefaultArgs<ExtArgs>
    chapters?: boolean | Arc$chaptersArgs<ExtArgs>
    _count?: boolean | ArcCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ArcPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Arc"
    objects: {
      book: Prisma.$BookPayload<ExtArgs>
      chapters: Prisma.$ChapterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      summary: string | null
      bookId: string
      sortOrder: number
      nodeType: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["arc"]>
    composites: {}
  }

  type ArcGetPayload<S extends boolean | null | undefined | ArcDefaultArgs> = $Result.GetResult<Prisma.$ArcPayload, S>

  type ArcCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArcFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArcCountAggregateInputType | true
    }

  export interface ArcDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Arc'], meta: { name: 'Arc' } }
    /**
     * Find zero or one Arc that matches the filter.
     * @param {ArcFindUniqueArgs} args - Arguments to find a Arc
     * @example
     * // Get one Arc
     * const arc = await prisma.arc.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArcFindUniqueArgs>(args: SelectSubset<T, ArcFindUniqueArgs<ExtArgs>>): Prisma__ArcClient<$Result.GetResult<Prisma.$ArcPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Arc that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArcFindUniqueOrThrowArgs} args - Arguments to find a Arc
     * @example
     * // Get one Arc
     * const arc = await prisma.arc.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArcFindUniqueOrThrowArgs>(args: SelectSubset<T, ArcFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArcClient<$Result.GetResult<Prisma.$ArcPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Arc that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArcFindFirstArgs} args - Arguments to find a Arc
     * @example
     * // Get one Arc
     * const arc = await prisma.arc.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArcFindFirstArgs>(args?: SelectSubset<T, ArcFindFirstArgs<ExtArgs>>): Prisma__ArcClient<$Result.GetResult<Prisma.$ArcPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Arc that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArcFindFirstOrThrowArgs} args - Arguments to find a Arc
     * @example
     * // Get one Arc
     * const arc = await prisma.arc.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArcFindFirstOrThrowArgs>(args?: SelectSubset<T, ArcFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArcClient<$Result.GetResult<Prisma.$ArcPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Arcs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArcFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Arcs
     * const arcs = await prisma.arc.findMany()
     * 
     * // Get first 10 Arcs
     * const arcs = await prisma.arc.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const arcWithIdOnly = await prisma.arc.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArcFindManyArgs>(args?: SelectSubset<T, ArcFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArcPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Arc.
     * @param {ArcCreateArgs} args - Arguments to create a Arc.
     * @example
     * // Create one Arc
     * const Arc = await prisma.arc.create({
     *   data: {
     *     // ... data to create a Arc
     *   }
     * })
     * 
     */
    create<T extends ArcCreateArgs>(args: SelectSubset<T, ArcCreateArgs<ExtArgs>>): Prisma__ArcClient<$Result.GetResult<Prisma.$ArcPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Arcs.
     * @param {ArcCreateManyArgs} args - Arguments to create many Arcs.
     * @example
     * // Create many Arcs
     * const arc = await prisma.arc.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArcCreateManyArgs>(args?: SelectSubset<T, ArcCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Arc.
     * @param {ArcDeleteArgs} args - Arguments to delete one Arc.
     * @example
     * // Delete one Arc
     * const Arc = await prisma.arc.delete({
     *   where: {
     *     // ... filter to delete one Arc
     *   }
     * })
     * 
     */
    delete<T extends ArcDeleteArgs>(args: SelectSubset<T, ArcDeleteArgs<ExtArgs>>): Prisma__ArcClient<$Result.GetResult<Prisma.$ArcPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Arc.
     * @param {ArcUpdateArgs} args - Arguments to update one Arc.
     * @example
     * // Update one Arc
     * const arc = await prisma.arc.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArcUpdateArgs>(args: SelectSubset<T, ArcUpdateArgs<ExtArgs>>): Prisma__ArcClient<$Result.GetResult<Prisma.$ArcPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Arcs.
     * @param {ArcDeleteManyArgs} args - Arguments to filter Arcs to delete.
     * @example
     * // Delete a few Arcs
     * const { count } = await prisma.arc.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArcDeleteManyArgs>(args?: SelectSubset<T, ArcDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Arcs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArcUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Arcs
     * const arc = await prisma.arc.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArcUpdateManyArgs>(args: SelectSubset<T, ArcUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Arc.
     * @param {ArcUpsertArgs} args - Arguments to update or create a Arc.
     * @example
     * // Update or create a Arc
     * const arc = await prisma.arc.upsert({
     *   create: {
     *     // ... data to create a Arc
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Arc we want to update
     *   }
     * })
     */
    upsert<T extends ArcUpsertArgs>(args: SelectSubset<T, ArcUpsertArgs<ExtArgs>>): Prisma__ArcClient<$Result.GetResult<Prisma.$ArcPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Arcs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArcCountArgs} args - Arguments to filter Arcs to count.
     * @example
     * // Count the number of Arcs
     * const count = await prisma.arc.count({
     *   where: {
     *     // ... the filter for the Arcs we want to count
     *   }
     * })
    **/
    count<T extends ArcCountArgs>(
      args?: Subset<T, ArcCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArcCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Arc.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArcAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArcAggregateArgs>(args: Subset<T, ArcAggregateArgs>): Prisma.PrismaPromise<GetArcAggregateType<T>>

    /**
     * Group by Arc.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArcGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArcGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArcGroupByArgs['orderBy'] }
        : { orderBy?: ArcGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArcGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArcGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Arc model
   */
  readonly fields: ArcFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Arc.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArcClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    book<T extends BookDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookDefaultArgs<ExtArgs>>): Prisma__BookClient<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chapters<T extends Arc$chaptersArgs<ExtArgs> = {}>(args?: Subset<T, Arc$chaptersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Arc model
   */
  interface ArcFieldRefs {
    readonly id: FieldRef<"Arc", 'String'>
    readonly name: FieldRef<"Arc", 'String'>
    readonly summary: FieldRef<"Arc", 'String'>
    readonly bookId: FieldRef<"Arc", 'String'>
    readonly sortOrder: FieldRef<"Arc", 'Int'>
    readonly nodeType: FieldRef<"Arc", 'String'>
    readonly createdAt: FieldRef<"Arc", 'DateTime'>
    readonly updatedAt: FieldRef<"Arc", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Arc findUnique
   */
  export type ArcFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arc
     */
    select?: ArcSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arc
     */
    omit?: ArcOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArcInclude<ExtArgs> | null
    /**
     * Filter, which Arc to fetch.
     */
    where: ArcWhereUniqueInput
  }

  /**
   * Arc findUniqueOrThrow
   */
  export type ArcFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arc
     */
    select?: ArcSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arc
     */
    omit?: ArcOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArcInclude<ExtArgs> | null
    /**
     * Filter, which Arc to fetch.
     */
    where: ArcWhereUniqueInput
  }

  /**
   * Arc findFirst
   */
  export type ArcFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arc
     */
    select?: ArcSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arc
     */
    omit?: ArcOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArcInclude<ExtArgs> | null
    /**
     * Filter, which Arc to fetch.
     */
    where?: ArcWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arcs to fetch.
     */
    orderBy?: ArcOrderByWithRelationInput | ArcOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Arcs.
     */
    cursor?: ArcWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arcs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arcs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Arcs.
     */
    distinct?: ArcScalarFieldEnum | ArcScalarFieldEnum[]
  }

  /**
   * Arc findFirstOrThrow
   */
  export type ArcFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arc
     */
    select?: ArcSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arc
     */
    omit?: ArcOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArcInclude<ExtArgs> | null
    /**
     * Filter, which Arc to fetch.
     */
    where?: ArcWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arcs to fetch.
     */
    orderBy?: ArcOrderByWithRelationInput | ArcOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Arcs.
     */
    cursor?: ArcWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arcs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arcs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Arcs.
     */
    distinct?: ArcScalarFieldEnum | ArcScalarFieldEnum[]
  }

  /**
   * Arc findMany
   */
  export type ArcFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arc
     */
    select?: ArcSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arc
     */
    omit?: ArcOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArcInclude<ExtArgs> | null
    /**
     * Filter, which Arcs to fetch.
     */
    where?: ArcWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arcs to fetch.
     */
    orderBy?: ArcOrderByWithRelationInput | ArcOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Arcs.
     */
    cursor?: ArcWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arcs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arcs.
     */
    skip?: number
    distinct?: ArcScalarFieldEnum | ArcScalarFieldEnum[]
  }

  /**
   * Arc create
   */
  export type ArcCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arc
     */
    select?: ArcSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arc
     */
    omit?: ArcOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArcInclude<ExtArgs> | null
    /**
     * The data needed to create a Arc.
     */
    data: XOR<ArcCreateInput, ArcUncheckedCreateInput>
  }

  /**
   * Arc createMany
   */
  export type ArcCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Arcs.
     */
    data: ArcCreateManyInput | ArcCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Arc update
   */
  export type ArcUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arc
     */
    select?: ArcSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arc
     */
    omit?: ArcOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArcInclude<ExtArgs> | null
    /**
     * The data needed to update a Arc.
     */
    data: XOR<ArcUpdateInput, ArcUncheckedUpdateInput>
    /**
     * Choose, which Arc to update.
     */
    where: ArcWhereUniqueInput
  }

  /**
   * Arc updateMany
   */
  export type ArcUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Arcs.
     */
    data: XOR<ArcUpdateManyMutationInput, ArcUncheckedUpdateManyInput>
    /**
     * Filter which Arcs to update
     */
    where?: ArcWhereInput
    /**
     * Limit how many Arcs to update.
     */
    limit?: number
  }

  /**
   * Arc upsert
   */
  export type ArcUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arc
     */
    select?: ArcSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arc
     */
    omit?: ArcOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArcInclude<ExtArgs> | null
    /**
     * The filter to search for the Arc to update in case it exists.
     */
    where: ArcWhereUniqueInput
    /**
     * In case the Arc found by the `where` argument doesn't exist, create a new Arc with this data.
     */
    create: XOR<ArcCreateInput, ArcUncheckedCreateInput>
    /**
     * In case the Arc was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArcUpdateInput, ArcUncheckedUpdateInput>
  }

  /**
   * Arc delete
   */
  export type ArcDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arc
     */
    select?: ArcSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arc
     */
    omit?: ArcOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArcInclude<ExtArgs> | null
    /**
     * Filter which Arc to delete.
     */
    where: ArcWhereUniqueInput
  }

  /**
   * Arc deleteMany
   */
  export type ArcDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Arcs to delete
     */
    where?: ArcWhereInput
    /**
     * Limit how many Arcs to delete.
     */
    limit?: number
  }

  /**
   * Arc.chapters
   */
  export type Arc$chaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    where?: ChapterWhereInput
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    cursor?: ChapterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Arc without action
   */
  export type ArcDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arc
     */
    select?: ArcSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arc
     */
    omit?: ArcOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArcInclude<ExtArgs> | null
  }


  /**
   * Model Chapter
   */

  export type AggregateChapter = {
    _count: ChapterCountAggregateOutputType | null
    _avg: ChapterAvgAggregateOutputType | null
    _sum: ChapterSumAggregateOutputType | null
    _min: ChapterMinAggregateOutputType | null
    _max: ChapterMaxAggregateOutputType | null
  }

  export type ChapterAvgAggregateOutputType = {
    sortOrder: number | null
    royalRoadId: number | null
  }

  export type ChapterSumAggregateOutputType = {
    sortOrder: number | null
    royalRoadId: number | null
  }

  export type ChapterMinAggregateOutputType = {
    id: string | null
    name: string | null
    summary: string | null
    arcId: string | null
    publishedOn: Date | null
    sortOrder: number | null
    royalRoadId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    nodeType: string | null
  }

  export type ChapterMaxAggregateOutputType = {
    id: string | null
    name: string | null
    summary: string | null
    arcId: string | null
    publishedOn: Date | null
    sortOrder: number | null
    royalRoadId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    nodeType: string | null
  }

  export type ChapterCountAggregateOutputType = {
    id: number
    name: number
    summary: number
    arcId: number
    publishedOn: number
    sortOrder: number
    royalRoadId: number
    createdAt: number
    updatedAt: number
    nodeType: number
    _all: number
  }


  export type ChapterAvgAggregateInputType = {
    sortOrder?: true
    royalRoadId?: true
  }

  export type ChapterSumAggregateInputType = {
    sortOrder?: true
    royalRoadId?: true
  }

  export type ChapterMinAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    arcId?: true
    publishedOn?: true
    sortOrder?: true
    royalRoadId?: true
    createdAt?: true
    updatedAt?: true
    nodeType?: true
  }

  export type ChapterMaxAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    arcId?: true
    publishedOn?: true
    sortOrder?: true
    royalRoadId?: true
    createdAt?: true
    updatedAt?: true
    nodeType?: true
  }

  export type ChapterCountAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    arcId?: true
    publishedOn?: true
    sortOrder?: true
    royalRoadId?: true
    createdAt?: true
    updatedAt?: true
    nodeType?: true
    _all?: true
  }

  export type ChapterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chapter to aggregate.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chapters
    **/
    _count?: true | ChapterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChapterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChapterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChapterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChapterMaxAggregateInputType
  }

  export type GetChapterAggregateType<T extends ChapterAggregateArgs> = {
        [P in keyof T & keyof AggregateChapter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChapter[P]>
      : GetScalarType<T[P], AggregateChapter[P]>
  }




  export type ChapterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterWhereInput
    orderBy?: ChapterOrderByWithAggregationInput | ChapterOrderByWithAggregationInput[]
    by: ChapterScalarFieldEnum[] | ChapterScalarFieldEnum
    having?: ChapterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChapterCountAggregateInputType | true
    _avg?: ChapterAvgAggregateInputType
    _sum?: ChapterSumAggregateInputType
    _min?: ChapterMinAggregateInputType
    _max?: ChapterMaxAggregateInputType
  }

  export type ChapterGroupByOutputType = {
    id: string
    name: string
    summary: string | null
    arcId: string
    publishedOn: Date | null
    sortOrder: number
    royalRoadId: number | null
    createdAt: Date
    updatedAt: Date
    nodeType: string
    _count: ChapterCountAggregateOutputType | null
    _avg: ChapterAvgAggregateOutputType | null
    _sum: ChapterSumAggregateOutputType | null
    _min: ChapterMinAggregateOutputType | null
    _max: ChapterMaxAggregateOutputType | null
  }

  type GetChapterGroupByPayload<T extends ChapterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChapterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChapterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChapterGroupByOutputType[P]>
            : GetScalarType<T[P], ChapterGroupByOutputType[P]>
        }
      >
    >


  export type ChapterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    summary?: boolean
    arcId?: boolean
    publishedOn?: boolean
    sortOrder?: boolean
    royalRoadId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    nodeType?: boolean
    arc?: boolean | ArcDefaultArgs<ExtArgs>
    scenes?: boolean | Chapter$scenesArgs<ExtArgs>
    StoryReadStatus?: boolean | Chapter$StoryReadStatusArgs<ExtArgs>
    publishingStatus?: boolean | Chapter$publishingStatusArgs<ExtArgs>
    _count?: boolean | ChapterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chapter"]>



  export type ChapterSelectScalar = {
    id?: boolean
    name?: boolean
    summary?: boolean
    arcId?: boolean
    publishedOn?: boolean
    sortOrder?: boolean
    royalRoadId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    nodeType?: boolean
  }

  export type ChapterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "summary" | "arcId" | "publishedOn" | "sortOrder" | "royalRoadId" | "createdAt" | "updatedAt" | "nodeType", ExtArgs["result"]["chapter"]>
  export type ChapterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arc?: boolean | ArcDefaultArgs<ExtArgs>
    scenes?: boolean | Chapter$scenesArgs<ExtArgs>
    StoryReadStatus?: boolean | Chapter$StoryReadStatusArgs<ExtArgs>
    publishingStatus?: boolean | Chapter$publishingStatusArgs<ExtArgs>
    _count?: boolean | ChapterCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ChapterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Chapter"
    objects: {
      arc: Prisma.$ArcPayload<ExtArgs>
      scenes: Prisma.$ScenePayload<ExtArgs>[]
      StoryReadStatus: Prisma.$StoryReadStatusPayload<ExtArgs>[]
      publishingStatus: Prisma.$ChapterPublishingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      summary: string | null
      arcId: string
      publishedOn: Date | null
      sortOrder: number
      royalRoadId: number | null
      createdAt: Date
      updatedAt: Date
      nodeType: string
    }, ExtArgs["result"]["chapter"]>
    composites: {}
  }

  type ChapterGetPayload<S extends boolean | null | undefined | ChapterDefaultArgs> = $Result.GetResult<Prisma.$ChapterPayload, S>

  type ChapterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChapterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChapterCountAggregateInputType | true
    }

  export interface ChapterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chapter'], meta: { name: 'Chapter' } }
    /**
     * Find zero or one Chapter that matches the filter.
     * @param {ChapterFindUniqueArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChapterFindUniqueArgs>(args: SelectSubset<T, ChapterFindUniqueArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Chapter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChapterFindUniqueOrThrowArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChapterFindUniqueOrThrowArgs>(args: SelectSubset<T, ChapterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chapter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterFindFirstArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChapterFindFirstArgs>(args?: SelectSubset<T, ChapterFindFirstArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chapter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterFindFirstOrThrowArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChapterFindFirstOrThrowArgs>(args?: SelectSubset<T, ChapterFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Chapters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chapters
     * const chapters = await prisma.chapter.findMany()
     * 
     * // Get first 10 Chapters
     * const chapters = await prisma.chapter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chapterWithIdOnly = await prisma.chapter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChapterFindManyArgs>(args?: SelectSubset<T, ChapterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Chapter.
     * @param {ChapterCreateArgs} args - Arguments to create a Chapter.
     * @example
     * // Create one Chapter
     * const Chapter = await prisma.chapter.create({
     *   data: {
     *     // ... data to create a Chapter
     *   }
     * })
     * 
     */
    create<T extends ChapterCreateArgs>(args: SelectSubset<T, ChapterCreateArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Chapters.
     * @param {ChapterCreateManyArgs} args - Arguments to create many Chapters.
     * @example
     * // Create many Chapters
     * const chapter = await prisma.chapter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChapterCreateManyArgs>(args?: SelectSubset<T, ChapterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chapter.
     * @param {ChapterDeleteArgs} args - Arguments to delete one Chapter.
     * @example
     * // Delete one Chapter
     * const Chapter = await prisma.chapter.delete({
     *   where: {
     *     // ... filter to delete one Chapter
     *   }
     * })
     * 
     */
    delete<T extends ChapterDeleteArgs>(args: SelectSubset<T, ChapterDeleteArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Chapter.
     * @param {ChapterUpdateArgs} args - Arguments to update one Chapter.
     * @example
     * // Update one Chapter
     * const chapter = await prisma.chapter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChapterUpdateArgs>(args: SelectSubset<T, ChapterUpdateArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Chapters.
     * @param {ChapterDeleteManyArgs} args - Arguments to filter Chapters to delete.
     * @example
     * // Delete a few Chapters
     * const { count } = await prisma.chapter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChapterDeleteManyArgs>(args?: SelectSubset<T, ChapterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chapters
     * const chapter = await prisma.chapter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChapterUpdateManyArgs>(args: SelectSubset<T, ChapterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chapter.
     * @param {ChapterUpsertArgs} args - Arguments to update or create a Chapter.
     * @example
     * // Update or create a Chapter
     * const chapter = await prisma.chapter.upsert({
     *   create: {
     *     // ... data to create a Chapter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chapter we want to update
     *   }
     * })
     */
    upsert<T extends ChapterUpsertArgs>(args: SelectSubset<T, ChapterUpsertArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterCountArgs} args - Arguments to filter Chapters to count.
     * @example
     * // Count the number of Chapters
     * const count = await prisma.chapter.count({
     *   where: {
     *     // ... the filter for the Chapters we want to count
     *   }
     * })
    **/
    count<T extends ChapterCountArgs>(
      args?: Subset<T, ChapterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChapterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chapter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChapterAggregateArgs>(args: Subset<T, ChapterAggregateArgs>): Prisma.PrismaPromise<GetChapterAggregateType<T>>

    /**
     * Group by Chapter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChapterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChapterGroupByArgs['orderBy'] }
        : { orderBy?: ChapterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChapterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChapterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chapter model
   */
  readonly fields: ChapterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chapter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChapterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    arc<T extends ArcDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArcDefaultArgs<ExtArgs>>): Prisma__ArcClient<$Result.GetResult<Prisma.$ArcPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    scenes<T extends Chapter$scenesArgs<ExtArgs> = {}>(args?: Subset<T, Chapter$scenesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    StoryReadStatus<T extends Chapter$StoryReadStatusArgs<ExtArgs> = {}>(args?: Subset<T, Chapter$StoryReadStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryReadStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    publishingStatus<T extends Chapter$publishingStatusArgs<ExtArgs> = {}>(args?: Subset<T, Chapter$publishingStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPublishingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Chapter model
   */
  interface ChapterFieldRefs {
    readonly id: FieldRef<"Chapter", 'String'>
    readonly name: FieldRef<"Chapter", 'String'>
    readonly summary: FieldRef<"Chapter", 'String'>
    readonly arcId: FieldRef<"Chapter", 'String'>
    readonly publishedOn: FieldRef<"Chapter", 'DateTime'>
    readonly sortOrder: FieldRef<"Chapter", 'Int'>
    readonly royalRoadId: FieldRef<"Chapter", 'Int'>
    readonly createdAt: FieldRef<"Chapter", 'DateTime'>
    readonly updatedAt: FieldRef<"Chapter", 'DateTime'>
    readonly nodeType: FieldRef<"Chapter", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Chapter findUnique
   */
  export type ChapterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter findUniqueOrThrow
   */
  export type ChapterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter findFirst
   */
  export type ChapterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chapters.
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chapters.
     */
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Chapter findFirstOrThrow
   */
  export type ChapterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chapters.
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chapters.
     */
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Chapter findMany
   */
  export type ChapterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapters to fetch.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chapters.
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Chapter create
   */
  export type ChapterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * The data needed to create a Chapter.
     */
    data: XOR<ChapterCreateInput, ChapterUncheckedCreateInput>
  }

  /**
   * Chapter createMany
   */
  export type ChapterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chapters.
     */
    data: ChapterCreateManyInput | ChapterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Chapter update
   */
  export type ChapterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * The data needed to update a Chapter.
     */
    data: XOR<ChapterUpdateInput, ChapterUncheckedUpdateInput>
    /**
     * Choose, which Chapter to update.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter updateMany
   */
  export type ChapterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chapters.
     */
    data: XOR<ChapterUpdateManyMutationInput, ChapterUncheckedUpdateManyInput>
    /**
     * Filter which Chapters to update
     */
    where?: ChapterWhereInput
    /**
     * Limit how many Chapters to update.
     */
    limit?: number
  }

  /**
   * Chapter upsert
   */
  export type ChapterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * The filter to search for the Chapter to update in case it exists.
     */
    where: ChapterWhereUniqueInput
    /**
     * In case the Chapter found by the `where` argument doesn't exist, create a new Chapter with this data.
     */
    create: XOR<ChapterCreateInput, ChapterUncheckedCreateInput>
    /**
     * In case the Chapter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChapterUpdateInput, ChapterUncheckedUpdateInput>
  }

  /**
   * Chapter delete
   */
  export type ChapterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter which Chapter to delete.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter deleteMany
   */
  export type ChapterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chapters to delete
     */
    where?: ChapterWhereInput
    /**
     * Limit how many Chapters to delete.
     */
    limit?: number
  }

  /**
   * Chapter.scenes
   */
  export type Chapter$scenesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    where?: SceneWhereInput
    orderBy?: SceneOrderByWithRelationInput | SceneOrderByWithRelationInput[]
    cursor?: SceneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SceneScalarFieldEnum | SceneScalarFieldEnum[]
  }

  /**
   * Chapter.StoryReadStatus
   */
  export type Chapter$StoryReadStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryReadStatus
     */
    select?: StoryReadStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryReadStatus
     */
    omit?: StoryReadStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryReadStatusInclude<ExtArgs> | null
    where?: StoryReadStatusWhereInput
    orderBy?: StoryReadStatusOrderByWithRelationInput | StoryReadStatusOrderByWithRelationInput[]
    cursor?: StoryReadStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoryReadStatusScalarFieldEnum | StoryReadStatusScalarFieldEnum[]
  }

  /**
   * Chapter.publishingStatus
   */
  export type Chapter$publishingStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterPublishing
     */
    select?: ChapterPublishingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChapterPublishing
     */
    omit?: ChapterPublishingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterPublishingInclude<ExtArgs> | null
    where?: ChapterPublishingWhereInput
    orderBy?: ChapterPublishingOrderByWithRelationInput | ChapterPublishingOrderByWithRelationInput[]
    cursor?: ChapterPublishingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChapterPublishingScalarFieldEnum | ChapterPublishingScalarFieldEnum[]
  }

  /**
   * Chapter without action
   */
  export type ChapterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chapter
     */
    omit?: ChapterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
  }


  /**
   * Model Scene
   */

  export type AggregateScene = {
    _count: SceneCountAggregateOutputType | null
    _avg: SceneAvgAggregateOutputType | null
    _sum: SceneSumAggregateOutputType | null
    _min: SceneMinAggregateOutputType | null
    _max: SceneMaxAggregateOutputType | null
  }

  export type SceneAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type SceneSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type SceneMinAggregateOutputType = {
    id: string | null
    name: string | null
    summary: string | null
    body: string | null
    chapterId: string | null
    sortOrder: number | null
    nodeType: string | null
    perspective: $Enums.Perspective | null
    protagonistId: string | null
    locationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SceneMaxAggregateOutputType = {
    id: string | null
    name: string | null
    summary: string | null
    body: string | null
    chapterId: string | null
    sortOrder: number | null
    nodeType: string | null
    perspective: $Enums.Perspective | null
    protagonistId: string | null
    locationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SceneCountAggregateOutputType = {
    id: number
    name: number
    summary: number
    body: number
    chapterId: number
    sortOrder: number
    nodeType: number
    perspective: number
    protagonistId: number
    locationId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SceneAvgAggregateInputType = {
    sortOrder?: true
  }

  export type SceneSumAggregateInputType = {
    sortOrder?: true
  }

  export type SceneMinAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    body?: true
    chapterId?: true
    sortOrder?: true
    nodeType?: true
    perspective?: true
    protagonistId?: true
    locationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SceneMaxAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    body?: true
    chapterId?: true
    sortOrder?: true
    nodeType?: true
    perspective?: true
    protagonistId?: true
    locationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SceneCountAggregateInputType = {
    id?: true
    name?: true
    summary?: true
    body?: true
    chapterId?: true
    sortOrder?: true
    nodeType?: true
    perspective?: true
    protagonistId?: true
    locationId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SceneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Scene to aggregate.
     */
    where?: SceneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scenes to fetch.
     */
    orderBy?: SceneOrderByWithRelationInput | SceneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SceneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scenes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scenes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Scenes
    **/
    _count?: true | SceneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SceneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SceneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SceneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SceneMaxAggregateInputType
  }

  export type GetSceneAggregateType<T extends SceneAggregateArgs> = {
        [P in keyof T & keyof AggregateScene]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScene[P]>
      : GetScalarType<T[P], AggregateScene[P]>
  }




  export type SceneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneWhereInput
    orderBy?: SceneOrderByWithAggregationInput | SceneOrderByWithAggregationInput[]
    by: SceneScalarFieldEnum[] | SceneScalarFieldEnum
    having?: SceneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SceneCountAggregateInputType | true
    _avg?: SceneAvgAggregateInputType
    _sum?: SceneSumAggregateInputType
    _min?: SceneMinAggregateInputType
    _max?: SceneMaxAggregateInputType
  }

  export type SceneGroupByOutputType = {
    id: string
    name: string
    summary: string | null
    body: string
    chapterId: string
    sortOrder: number
    nodeType: string
    perspective: $Enums.Perspective | null
    protagonistId: string | null
    locationId: string | null
    createdAt: Date
    updatedAt: Date
    _count: SceneCountAggregateOutputType | null
    _avg: SceneAvgAggregateOutputType | null
    _sum: SceneSumAggregateOutputType | null
    _min: SceneMinAggregateOutputType | null
    _max: SceneMaxAggregateOutputType | null
  }

  type GetSceneGroupByPayload<T extends SceneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SceneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SceneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SceneGroupByOutputType[P]>
            : GetScalarType<T[P], SceneGroupByOutputType[P]>
        }
      >
    >


  export type SceneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    summary?: boolean
    body?: boolean
    chapterId?: boolean
    sortOrder?: boolean
    nodeType?: boolean
    perspective?: boolean
    protagonistId?: boolean
    locationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chapter?: boolean | ChapterDefaultArgs<ExtArgs>
    protagonist?: boolean | Scene$protagonistArgs<ExtArgs>
    location?: boolean | Scene$locationArgs<ExtArgs>
    paragraphs?: boolean | Scene$paragraphsArgs<ExtArgs>
    participatingCharacters?: boolean | Scene$participatingCharactersArgs<ExtArgs>
    referredCharacters?: boolean | Scene$referredCharactersArgs<ExtArgs>
    _count?: boolean | SceneCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scene"]>



  export type SceneSelectScalar = {
    id?: boolean
    name?: boolean
    summary?: boolean
    body?: boolean
    chapterId?: boolean
    sortOrder?: boolean
    nodeType?: boolean
    perspective?: boolean
    protagonistId?: boolean
    locationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SceneOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "summary" | "body" | "chapterId" | "sortOrder" | "nodeType" | "perspective" | "protagonistId" | "locationId" | "createdAt" | "updatedAt", ExtArgs["result"]["scene"]>
  export type SceneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapter?: boolean | ChapterDefaultArgs<ExtArgs>
    protagonist?: boolean | Scene$protagonistArgs<ExtArgs>
    location?: boolean | Scene$locationArgs<ExtArgs>
    paragraphs?: boolean | Scene$paragraphsArgs<ExtArgs>
    participatingCharacters?: boolean | Scene$participatingCharactersArgs<ExtArgs>
    referredCharacters?: boolean | Scene$referredCharactersArgs<ExtArgs>
    _count?: boolean | SceneCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ScenePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Scene"
    objects: {
      chapter: Prisma.$ChapterPayload<ExtArgs>
      protagonist: Prisma.$CharacterPayload<ExtArgs> | null
      location: Prisma.$LocationPayload<ExtArgs> | null
      paragraphs: Prisma.$ParagraphPayload<ExtArgs>[]
      participatingCharacters: Prisma.$SceneCharacterPayload<ExtArgs>[]
      referredCharacters: Prisma.$SceneReferredCharacterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      summary: string | null
      body: string
      chapterId: string
      sortOrder: number
      nodeType: string
      perspective: $Enums.Perspective | null
      protagonistId: string | null
      locationId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scene"]>
    composites: {}
  }

  type SceneGetPayload<S extends boolean | null | undefined | SceneDefaultArgs> = $Result.GetResult<Prisma.$ScenePayload, S>

  type SceneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SceneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SceneCountAggregateInputType | true
    }

  export interface SceneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Scene'], meta: { name: 'Scene' } }
    /**
     * Find zero or one Scene that matches the filter.
     * @param {SceneFindUniqueArgs} args - Arguments to find a Scene
     * @example
     * // Get one Scene
     * const scene = await prisma.scene.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SceneFindUniqueArgs>(args: SelectSubset<T, SceneFindUniqueArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Scene that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SceneFindUniqueOrThrowArgs} args - Arguments to find a Scene
     * @example
     * // Get one Scene
     * const scene = await prisma.scene.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SceneFindUniqueOrThrowArgs>(args: SelectSubset<T, SceneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Scene that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneFindFirstArgs} args - Arguments to find a Scene
     * @example
     * // Get one Scene
     * const scene = await prisma.scene.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SceneFindFirstArgs>(args?: SelectSubset<T, SceneFindFirstArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Scene that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneFindFirstOrThrowArgs} args - Arguments to find a Scene
     * @example
     * // Get one Scene
     * const scene = await prisma.scene.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SceneFindFirstOrThrowArgs>(args?: SelectSubset<T, SceneFindFirstOrThrowArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Scenes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Scenes
     * const scenes = await prisma.scene.findMany()
     * 
     * // Get first 10 Scenes
     * const scenes = await prisma.scene.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sceneWithIdOnly = await prisma.scene.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SceneFindManyArgs>(args?: SelectSubset<T, SceneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Scene.
     * @param {SceneCreateArgs} args - Arguments to create a Scene.
     * @example
     * // Create one Scene
     * const Scene = await prisma.scene.create({
     *   data: {
     *     // ... data to create a Scene
     *   }
     * })
     * 
     */
    create<T extends SceneCreateArgs>(args: SelectSubset<T, SceneCreateArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Scenes.
     * @param {SceneCreateManyArgs} args - Arguments to create many Scenes.
     * @example
     * // Create many Scenes
     * const scene = await prisma.scene.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SceneCreateManyArgs>(args?: SelectSubset<T, SceneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Scene.
     * @param {SceneDeleteArgs} args - Arguments to delete one Scene.
     * @example
     * // Delete one Scene
     * const Scene = await prisma.scene.delete({
     *   where: {
     *     // ... filter to delete one Scene
     *   }
     * })
     * 
     */
    delete<T extends SceneDeleteArgs>(args: SelectSubset<T, SceneDeleteArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Scene.
     * @param {SceneUpdateArgs} args - Arguments to update one Scene.
     * @example
     * // Update one Scene
     * const scene = await prisma.scene.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SceneUpdateArgs>(args: SelectSubset<T, SceneUpdateArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Scenes.
     * @param {SceneDeleteManyArgs} args - Arguments to filter Scenes to delete.
     * @example
     * // Delete a few Scenes
     * const { count } = await prisma.scene.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SceneDeleteManyArgs>(args?: SelectSubset<T, SceneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scenes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Scenes
     * const scene = await prisma.scene.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SceneUpdateManyArgs>(args: SelectSubset<T, SceneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Scene.
     * @param {SceneUpsertArgs} args - Arguments to update or create a Scene.
     * @example
     * // Update or create a Scene
     * const scene = await prisma.scene.upsert({
     *   create: {
     *     // ... data to create a Scene
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Scene we want to update
     *   }
     * })
     */
    upsert<T extends SceneUpsertArgs>(args: SelectSubset<T, SceneUpsertArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Scenes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneCountArgs} args - Arguments to filter Scenes to count.
     * @example
     * // Count the number of Scenes
     * const count = await prisma.scene.count({
     *   where: {
     *     // ... the filter for the Scenes we want to count
     *   }
     * })
    **/
    count<T extends SceneCountArgs>(
      args?: Subset<T, SceneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SceneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Scene.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SceneAggregateArgs>(args: Subset<T, SceneAggregateArgs>): Prisma.PrismaPromise<GetSceneAggregateType<T>>

    /**
     * Group by Scene.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SceneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SceneGroupByArgs['orderBy'] }
        : { orderBy?: SceneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SceneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSceneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Scene model
   */
  readonly fields: SceneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Scene.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SceneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chapter<T extends ChapterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChapterDefaultArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    protagonist<T extends Scene$protagonistArgs<ExtArgs> = {}>(args?: Subset<T, Scene$protagonistArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    location<T extends Scene$locationArgs<ExtArgs> = {}>(args?: Subset<T, Scene$locationArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    paragraphs<T extends Scene$paragraphsArgs<ExtArgs> = {}>(args?: Subset<T, Scene$paragraphsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParagraphPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    participatingCharacters<T extends Scene$participatingCharactersArgs<ExtArgs> = {}>(args?: Subset<T, Scene$participatingCharactersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneCharacterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    referredCharacters<T extends Scene$referredCharactersArgs<ExtArgs> = {}>(args?: Subset<T, Scene$referredCharactersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneReferredCharacterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Scene model
   */
  interface SceneFieldRefs {
    readonly id: FieldRef<"Scene", 'String'>
    readonly name: FieldRef<"Scene", 'String'>
    readonly summary: FieldRef<"Scene", 'String'>
    readonly body: FieldRef<"Scene", 'String'>
    readonly chapterId: FieldRef<"Scene", 'String'>
    readonly sortOrder: FieldRef<"Scene", 'Int'>
    readonly nodeType: FieldRef<"Scene", 'String'>
    readonly perspective: FieldRef<"Scene", 'Perspective'>
    readonly protagonistId: FieldRef<"Scene", 'String'>
    readonly locationId: FieldRef<"Scene", 'String'>
    readonly createdAt: FieldRef<"Scene", 'DateTime'>
    readonly updatedAt: FieldRef<"Scene", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Scene findUnique
   */
  export type SceneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * Filter, which Scene to fetch.
     */
    where: SceneWhereUniqueInput
  }

  /**
   * Scene findUniqueOrThrow
   */
  export type SceneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * Filter, which Scene to fetch.
     */
    where: SceneWhereUniqueInput
  }

  /**
   * Scene findFirst
   */
  export type SceneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * Filter, which Scene to fetch.
     */
    where?: SceneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scenes to fetch.
     */
    orderBy?: SceneOrderByWithRelationInput | SceneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scenes.
     */
    cursor?: SceneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scenes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scenes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scenes.
     */
    distinct?: SceneScalarFieldEnum | SceneScalarFieldEnum[]
  }

  /**
   * Scene findFirstOrThrow
   */
  export type SceneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * Filter, which Scene to fetch.
     */
    where?: SceneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scenes to fetch.
     */
    orderBy?: SceneOrderByWithRelationInput | SceneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scenes.
     */
    cursor?: SceneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scenes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scenes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scenes.
     */
    distinct?: SceneScalarFieldEnum | SceneScalarFieldEnum[]
  }

  /**
   * Scene findMany
   */
  export type SceneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * Filter, which Scenes to fetch.
     */
    where?: SceneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scenes to fetch.
     */
    orderBy?: SceneOrderByWithRelationInput | SceneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Scenes.
     */
    cursor?: SceneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scenes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scenes.
     */
    skip?: number
    distinct?: SceneScalarFieldEnum | SceneScalarFieldEnum[]
  }

  /**
   * Scene create
   */
  export type SceneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * The data needed to create a Scene.
     */
    data: XOR<SceneCreateInput, SceneUncheckedCreateInput>
  }

  /**
   * Scene createMany
   */
  export type SceneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Scenes.
     */
    data: SceneCreateManyInput | SceneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Scene update
   */
  export type SceneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * The data needed to update a Scene.
     */
    data: XOR<SceneUpdateInput, SceneUncheckedUpdateInput>
    /**
     * Choose, which Scene to update.
     */
    where: SceneWhereUniqueInput
  }

  /**
   * Scene updateMany
   */
  export type SceneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Scenes.
     */
    data: XOR<SceneUpdateManyMutationInput, SceneUncheckedUpdateManyInput>
    /**
     * Filter which Scenes to update
     */
    where?: SceneWhereInput
    /**
     * Limit how many Scenes to update.
     */
    limit?: number
  }

  /**
   * Scene upsert
   */
  export type SceneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * The filter to search for the Scene to update in case it exists.
     */
    where: SceneWhereUniqueInput
    /**
     * In case the Scene found by the `where` argument doesn't exist, create a new Scene with this data.
     */
    create: XOR<SceneCreateInput, SceneUncheckedCreateInput>
    /**
     * In case the Scene was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SceneUpdateInput, SceneUncheckedUpdateInput>
  }

  /**
   * Scene delete
   */
  export type SceneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    /**
     * Filter which Scene to delete.
     */
    where: SceneWhereUniqueInput
  }

  /**
   * Scene deleteMany
   */
  export type SceneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Scenes to delete
     */
    where?: SceneWhereInput
    /**
     * Limit how many Scenes to delete.
     */
    limit?: number
  }

  /**
   * Scene.protagonist
   */
  export type Scene$protagonistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    where?: CharacterWhereInput
  }

  /**
   * Scene.location
   */
  export type Scene$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
  }

  /**
   * Scene.paragraphs
   */
  export type Scene$paragraphsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paragraph
     */
    select?: ParagraphSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paragraph
     */
    omit?: ParagraphOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphInclude<ExtArgs> | null
    where?: ParagraphWhereInput
    orderBy?: ParagraphOrderByWithRelationInput | ParagraphOrderByWithRelationInput[]
    cursor?: ParagraphWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParagraphScalarFieldEnum | ParagraphScalarFieldEnum[]
  }

  /**
   * Scene.participatingCharacters
   */
  export type Scene$participatingCharactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneCharacter
     */
    select?: SceneCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneCharacter
     */
    omit?: SceneCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneCharacterInclude<ExtArgs> | null
    where?: SceneCharacterWhereInput
    orderBy?: SceneCharacterOrderByWithRelationInput | SceneCharacterOrderByWithRelationInput[]
    cursor?: SceneCharacterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SceneCharacterScalarFieldEnum | SceneCharacterScalarFieldEnum[]
  }

  /**
   * Scene.referredCharacters
   */
  export type Scene$referredCharactersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneReferredCharacter
     */
    select?: SceneReferredCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneReferredCharacter
     */
    omit?: SceneReferredCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneReferredCharacterInclude<ExtArgs> | null
    where?: SceneReferredCharacterWhereInput
    orderBy?: SceneReferredCharacterOrderByWithRelationInput | SceneReferredCharacterOrderByWithRelationInput[]
    cursor?: SceneReferredCharacterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SceneReferredCharacterScalarFieldEnum | SceneReferredCharacterScalarFieldEnum[]
  }

  /**
   * Scene without action
   */
  export type SceneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
  }


  /**
   * Model Paragraph
   */

  export type AggregateParagraph = {
    _count: ParagraphCountAggregateOutputType | null
    _avg: ParagraphAvgAggregateOutputType | null
    _sum: ParagraphSumAggregateOutputType | null
    _min: ParagraphMinAggregateOutputType | null
    _max: ParagraphMaxAggregateOutputType | null
  }

  export type ParagraphAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type ParagraphSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type ParagraphMinAggregateOutputType = {
    id: string | null
    sceneId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sortOrder: number | null
  }

  export type ParagraphMaxAggregateOutputType = {
    id: string | null
    sceneId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sortOrder: number | null
  }

  export type ParagraphCountAggregateOutputType = {
    id: number
    sceneId: number
    createdAt: number
    updatedAt: number
    sortOrder: number
    _all: number
  }


  export type ParagraphAvgAggregateInputType = {
    sortOrder?: true
  }

  export type ParagraphSumAggregateInputType = {
    sortOrder?: true
  }

  export type ParagraphMinAggregateInputType = {
    id?: true
    sceneId?: true
    createdAt?: true
    updatedAt?: true
    sortOrder?: true
  }

  export type ParagraphMaxAggregateInputType = {
    id?: true
    sceneId?: true
    createdAt?: true
    updatedAt?: true
    sortOrder?: true
  }

  export type ParagraphCountAggregateInputType = {
    id?: true
    sceneId?: true
    createdAt?: true
    updatedAt?: true
    sortOrder?: true
    _all?: true
  }

  export type ParagraphAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paragraph to aggregate.
     */
    where?: ParagraphWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paragraphs to fetch.
     */
    orderBy?: ParagraphOrderByWithRelationInput | ParagraphOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParagraphWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paragraphs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paragraphs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Paragraphs
    **/
    _count?: true | ParagraphCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParagraphAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParagraphSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParagraphMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParagraphMaxAggregateInputType
  }

  export type GetParagraphAggregateType<T extends ParagraphAggregateArgs> = {
        [P in keyof T & keyof AggregateParagraph]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParagraph[P]>
      : GetScalarType<T[P], AggregateParagraph[P]>
  }




  export type ParagraphGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParagraphWhereInput
    orderBy?: ParagraphOrderByWithAggregationInput | ParagraphOrderByWithAggregationInput[]
    by: ParagraphScalarFieldEnum[] | ParagraphScalarFieldEnum
    having?: ParagraphScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParagraphCountAggregateInputType | true
    _avg?: ParagraphAvgAggregateInputType
    _sum?: ParagraphSumAggregateInputType
    _min?: ParagraphMinAggregateInputType
    _max?: ParagraphMaxAggregateInputType
  }

  export type ParagraphGroupByOutputType = {
    id: string
    sceneId: string
    createdAt: Date
    updatedAt: Date
    sortOrder: number
    _count: ParagraphCountAggregateOutputType | null
    _avg: ParagraphAvgAggregateOutputType | null
    _sum: ParagraphSumAggregateOutputType | null
    _min: ParagraphMinAggregateOutputType | null
    _max: ParagraphMaxAggregateOutputType | null
  }

  type GetParagraphGroupByPayload<T extends ParagraphGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParagraphGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParagraphGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParagraphGroupByOutputType[P]>
            : GetScalarType<T[P], ParagraphGroupByOutputType[P]>
        }
      >
    >


  export type ParagraphSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sceneId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sortOrder?: boolean
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    paragraphRevisions?: boolean | Paragraph$paragraphRevisionsArgs<ExtArgs>
    _count?: boolean | ParagraphCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paragraph"]>



  export type ParagraphSelectScalar = {
    id?: boolean
    sceneId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sortOrder?: boolean
  }

  export type ParagraphOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sceneId" | "createdAt" | "updatedAt" | "sortOrder", ExtArgs["result"]["paragraph"]>
  export type ParagraphInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    paragraphRevisions?: boolean | Paragraph$paragraphRevisionsArgs<ExtArgs>
    _count?: boolean | ParagraphCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ParagraphPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Paragraph"
    objects: {
      scene: Prisma.$ScenePayload<ExtArgs>
      paragraphRevisions: Prisma.$ParagraphRevisionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sceneId: string
      createdAt: Date
      updatedAt: Date
      sortOrder: number
    }, ExtArgs["result"]["paragraph"]>
    composites: {}
  }

  type ParagraphGetPayload<S extends boolean | null | undefined | ParagraphDefaultArgs> = $Result.GetResult<Prisma.$ParagraphPayload, S>

  type ParagraphCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ParagraphFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ParagraphCountAggregateInputType | true
    }

  export interface ParagraphDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Paragraph'], meta: { name: 'Paragraph' } }
    /**
     * Find zero or one Paragraph that matches the filter.
     * @param {ParagraphFindUniqueArgs} args - Arguments to find a Paragraph
     * @example
     * // Get one Paragraph
     * const paragraph = await prisma.paragraph.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParagraphFindUniqueArgs>(args: SelectSubset<T, ParagraphFindUniqueArgs<ExtArgs>>): Prisma__ParagraphClient<$Result.GetResult<Prisma.$ParagraphPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Paragraph that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ParagraphFindUniqueOrThrowArgs} args - Arguments to find a Paragraph
     * @example
     * // Get one Paragraph
     * const paragraph = await prisma.paragraph.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParagraphFindUniqueOrThrowArgs>(args: SelectSubset<T, ParagraphFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParagraphClient<$Result.GetResult<Prisma.$ParagraphPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Paragraph that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphFindFirstArgs} args - Arguments to find a Paragraph
     * @example
     * // Get one Paragraph
     * const paragraph = await prisma.paragraph.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParagraphFindFirstArgs>(args?: SelectSubset<T, ParagraphFindFirstArgs<ExtArgs>>): Prisma__ParagraphClient<$Result.GetResult<Prisma.$ParagraphPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Paragraph that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphFindFirstOrThrowArgs} args - Arguments to find a Paragraph
     * @example
     * // Get one Paragraph
     * const paragraph = await prisma.paragraph.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParagraphFindFirstOrThrowArgs>(args?: SelectSubset<T, ParagraphFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParagraphClient<$Result.GetResult<Prisma.$ParagraphPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Paragraphs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Paragraphs
     * const paragraphs = await prisma.paragraph.findMany()
     * 
     * // Get first 10 Paragraphs
     * const paragraphs = await prisma.paragraph.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paragraphWithIdOnly = await prisma.paragraph.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParagraphFindManyArgs>(args?: SelectSubset<T, ParagraphFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParagraphPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Paragraph.
     * @param {ParagraphCreateArgs} args - Arguments to create a Paragraph.
     * @example
     * // Create one Paragraph
     * const Paragraph = await prisma.paragraph.create({
     *   data: {
     *     // ... data to create a Paragraph
     *   }
     * })
     * 
     */
    create<T extends ParagraphCreateArgs>(args: SelectSubset<T, ParagraphCreateArgs<ExtArgs>>): Prisma__ParagraphClient<$Result.GetResult<Prisma.$ParagraphPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Paragraphs.
     * @param {ParagraphCreateManyArgs} args - Arguments to create many Paragraphs.
     * @example
     * // Create many Paragraphs
     * const paragraph = await prisma.paragraph.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParagraphCreateManyArgs>(args?: SelectSubset<T, ParagraphCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Paragraph.
     * @param {ParagraphDeleteArgs} args - Arguments to delete one Paragraph.
     * @example
     * // Delete one Paragraph
     * const Paragraph = await prisma.paragraph.delete({
     *   where: {
     *     // ... filter to delete one Paragraph
     *   }
     * })
     * 
     */
    delete<T extends ParagraphDeleteArgs>(args: SelectSubset<T, ParagraphDeleteArgs<ExtArgs>>): Prisma__ParagraphClient<$Result.GetResult<Prisma.$ParagraphPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Paragraph.
     * @param {ParagraphUpdateArgs} args - Arguments to update one Paragraph.
     * @example
     * // Update one Paragraph
     * const paragraph = await prisma.paragraph.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParagraphUpdateArgs>(args: SelectSubset<T, ParagraphUpdateArgs<ExtArgs>>): Prisma__ParagraphClient<$Result.GetResult<Prisma.$ParagraphPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Paragraphs.
     * @param {ParagraphDeleteManyArgs} args - Arguments to filter Paragraphs to delete.
     * @example
     * // Delete a few Paragraphs
     * const { count } = await prisma.paragraph.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParagraphDeleteManyArgs>(args?: SelectSubset<T, ParagraphDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Paragraphs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Paragraphs
     * const paragraph = await prisma.paragraph.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParagraphUpdateManyArgs>(args: SelectSubset<T, ParagraphUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Paragraph.
     * @param {ParagraphUpsertArgs} args - Arguments to update or create a Paragraph.
     * @example
     * // Update or create a Paragraph
     * const paragraph = await prisma.paragraph.upsert({
     *   create: {
     *     // ... data to create a Paragraph
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paragraph we want to update
     *   }
     * })
     */
    upsert<T extends ParagraphUpsertArgs>(args: SelectSubset<T, ParagraphUpsertArgs<ExtArgs>>): Prisma__ParagraphClient<$Result.GetResult<Prisma.$ParagraphPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Paragraphs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphCountArgs} args - Arguments to filter Paragraphs to count.
     * @example
     * // Count the number of Paragraphs
     * const count = await prisma.paragraph.count({
     *   where: {
     *     // ... the filter for the Paragraphs we want to count
     *   }
     * })
    **/
    count<T extends ParagraphCountArgs>(
      args?: Subset<T, ParagraphCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParagraphCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paragraph.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParagraphAggregateArgs>(args: Subset<T, ParagraphAggregateArgs>): Prisma.PrismaPromise<GetParagraphAggregateType<T>>

    /**
     * Group by Paragraph.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParagraphGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParagraphGroupByArgs['orderBy'] }
        : { orderBy?: ParagraphGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParagraphGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParagraphGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Paragraph model
   */
  readonly fields: ParagraphFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Paragraph.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParagraphClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    scene<T extends SceneDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SceneDefaultArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    paragraphRevisions<T extends Paragraph$paragraphRevisionsArgs<ExtArgs> = {}>(args?: Subset<T, Paragraph$paragraphRevisionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParagraphRevisionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Paragraph model
   */
  interface ParagraphFieldRefs {
    readonly id: FieldRef<"Paragraph", 'String'>
    readonly sceneId: FieldRef<"Paragraph", 'String'>
    readonly createdAt: FieldRef<"Paragraph", 'DateTime'>
    readonly updatedAt: FieldRef<"Paragraph", 'DateTime'>
    readonly sortOrder: FieldRef<"Paragraph", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Paragraph findUnique
   */
  export type ParagraphFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paragraph
     */
    select?: ParagraphSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paragraph
     */
    omit?: ParagraphOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphInclude<ExtArgs> | null
    /**
     * Filter, which Paragraph to fetch.
     */
    where: ParagraphWhereUniqueInput
  }

  /**
   * Paragraph findUniqueOrThrow
   */
  export type ParagraphFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paragraph
     */
    select?: ParagraphSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paragraph
     */
    omit?: ParagraphOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphInclude<ExtArgs> | null
    /**
     * Filter, which Paragraph to fetch.
     */
    where: ParagraphWhereUniqueInput
  }

  /**
   * Paragraph findFirst
   */
  export type ParagraphFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paragraph
     */
    select?: ParagraphSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paragraph
     */
    omit?: ParagraphOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphInclude<ExtArgs> | null
    /**
     * Filter, which Paragraph to fetch.
     */
    where?: ParagraphWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paragraphs to fetch.
     */
    orderBy?: ParagraphOrderByWithRelationInput | ParagraphOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paragraphs.
     */
    cursor?: ParagraphWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paragraphs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paragraphs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paragraphs.
     */
    distinct?: ParagraphScalarFieldEnum | ParagraphScalarFieldEnum[]
  }

  /**
   * Paragraph findFirstOrThrow
   */
  export type ParagraphFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paragraph
     */
    select?: ParagraphSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paragraph
     */
    omit?: ParagraphOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphInclude<ExtArgs> | null
    /**
     * Filter, which Paragraph to fetch.
     */
    where?: ParagraphWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paragraphs to fetch.
     */
    orderBy?: ParagraphOrderByWithRelationInput | ParagraphOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paragraphs.
     */
    cursor?: ParagraphWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paragraphs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paragraphs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paragraphs.
     */
    distinct?: ParagraphScalarFieldEnum | ParagraphScalarFieldEnum[]
  }

  /**
   * Paragraph findMany
   */
  export type ParagraphFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paragraph
     */
    select?: ParagraphSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paragraph
     */
    omit?: ParagraphOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphInclude<ExtArgs> | null
    /**
     * Filter, which Paragraphs to fetch.
     */
    where?: ParagraphWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paragraphs to fetch.
     */
    orderBy?: ParagraphOrderByWithRelationInput | ParagraphOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Paragraphs.
     */
    cursor?: ParagraphWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paragraphs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paragraphs.
     */
    skip?: number
    distinct?: ParagraphScalarFieldEnum | ParagraphScalarFieldEnum[]
  }

  /**
   * Paragraph create
   */
  export type ParagraphCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paragraph
     */
    select?: ParagraphSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paragraph
     */
    omit?: ParagraphOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphInclude<ExtArgs> | null
    /**
     * The data needed to create a Paragraph.
     */
    data: XOR<ParagraphCreateInput, ParagraphUncheckedCreateInput>
  }

  /**
   * Paragraph createMany
   */
  export type ParagraphCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Paragraphs.
     */
    data: ParagraphCreateManyInput | ParagraphCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Paragraph update
   */
  export type ParagraphUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paragraph
     */
    select?: ParagraphSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paragraph
     */
    omit?: ParagraphOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphInclude<ExtArgs> | null
    /**
     * The data needed to update a Paragraph.
     */
    data: XOR<ParagraphUpdateInput, ParagraphUncheckedUpdateInput>
    /**
     * Choose, which Paragraph to update.
     */
    where: ParagraphWhereUniqueInput
  }

  /**
   * Paragraph updateMany
   */
  export type ParagraphUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Paragraphs.
     */
    data: XOR<ParagraphUpdateManyMutationInput, ParagraphUncheckedUpdateManyInput>
    /**
     * Filter which Paragraphs to update
     */
    where?: ParagraphWhereInput
    /**
     * Limit how many Paragraphs to update.
     */
    limit?: number
  }

  /**
   * Paragraph upsert
   */
  export type ParagraphUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paragraph
     */
    select?: ParagraphSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paragraph
     */
    omit?: ParagraphOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphInclude<ExtArgs> | null
    /**
     * The filter to search for the Paragraph to update in case it exists.
     */
    where: ParagraphWhereUniqueInput
    /**
     * In case the Paragraph found by the `where` argument doesn't exist, create a new Paragraph with this data.
     */
    create: XOR<ParagraphCreateInput, ParagraphUncheckedCreateInput>
    /**
     * In case the Paragraph was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParagraphUpdateInput, ParagraphUncheckedUpdateInput>
  }

  /**
   * Paragraph delete
   */
  export type ParagraphDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paragraph
     */
    select?: ParagraphSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paragraph
     */
    omit?: ParagraphOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphInclude<ExtArgs> | null
    /**
     * Filter which Paragraph to delete.
     */
    where: ParagraphWhereUniqueInput
  }

  /**
   * Paragraph deleteMany
   */
  export type ParagraphDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paragraphs to delete
     */
    where?: ParagraphWhereInput
    /**
     * Limit how many Paragraphs to delete.
     */
    limit?: number
  }

  /**
   * Paragraph.paragraphRevisions
   */
  export type Paragraph$paragraphRevisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphRevision
     */
    select?: ParagraphRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphRevision
     */
    omit?: ParagraphRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphRevisionInclude<ExtArgs> | null
    where?: ParagraphRevisionWhereInput
    orderBy?: ParagraphRevisionOrderByWithRelationInput | ParagraphRevisionOrderByWithRelationInput[]
    cursor?: ParagraphRevisionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParagraphRevisionScalarFieldEnum | ParagraphRevisionScalarFieldEnum[]
  }

  /**
   * Paragraph without action
   */
  export type ParagraphDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paragraph
     */
    select?: ParagraphSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paragraph
     */
    omit?: ParagraphOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphInclude<ExtArgs> | null
  }


  /**
   * Model ParagraphRevision
   */

  export type AggregateParagraphRevision = {
    _count: ParagraphRevisionCountAggregateOutputType | null
    _avg: ParagraphRevisionAvgAggregateOutputType | null
    _sum: ParagraphRevisionSumAggregateOutputType | null
    _min: ParagraphRevisionMinAggregateOutputType | null
    _max: ParagraphRevisionMaxAggregateOutputType | null
  }

  export type ParagraphRevisionAvgAggregateOutputType = {
    version: number | null
    aiCharacters: number | null
    humanCharacters: number | null
  }

  export type ParagraphRevisionSumAggregateOutputType = {
    version: number | null
    aiCharacters: number | null
    humanCharacters: number | null
  }

  export type ParagraphRevisionMinAggregateOutputType = {
    id: string | null
    paragraphId: string | null
    body: string | null
    contentSchema: string | null
    version: number | null
    state: $Enums.ParagraphState | null
    aiCharacters: number | null
    humanCharacters: number | null
    createdAt: Date | null
  }

  export type ParagraphRevisionMaxAggregateOutputType = {
    id: string | null
    paragraphId: string | null
    body: string | null
    contentSchema: string | null
    version: number | null
    state: $Enums.ParagraphState | null
    aiCharacters: number | null
    humanCharacters: number | null
    createdAt: Date | null
  }

  export type ParagraphRevisionCountAggregateOutputType = {
    id: number
    paragraphId: number
    body: number
    contentSchema: number
    version: number
    state: number
    aiCharacters: number
    humanCharacters: number
    plotPointActions: number
    inventoryActions: number
    createdAt: number
    _all: number
  }


  export type ParagraphRevisionAvgAggregateInputType = {
    version?: true
    aiCharacters?: true
    humanCharacters?: true
  }

  export type ParagraphRevisionSumAggregateInputType = {
    version?: true
    aiCharacters?: true
    humanCharacters?: true
  }

  export type ParagraphRevisionMinAggregateInputType = {
    id?: true
    paragraphId?: true
    body?: true
    contentSchema?: true
    version?: true
    state?: true
    aiCharacters?: true
    humanCharacters?: true
    createdAt?: true
  }

  export type ParagraphRevisionMaxAggregateInputType = {
    id?: true
    paragraphId?: true
    body?: true
    contentSchema?: true
    version?: true
    state?: true
    aiCharacters?: true
    humanCharacters?: true
    createdAt?: true
  }

  export type ParagraphRevisionCountAggregateInputType = {
    id?: true
    paragraphId?: true
    body?: true
    contentSchema?: true
    version?: true
    state?: true
    aiCharacters?: true
    humanCharacters?: true
    plotPointActions?: true
    inventoryActions?: true
    createdAt?: true
    _all?: true
  }

  export type ParagraphRevisionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParagraphRevision to aggregate.
     */
    where?: ParagraphRevisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParagraphRevisions to fetch.
     */
    orderBy?: ParagraphRevisionOrderByWithRelationInput | ParagraphRevisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParagraphRevisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParagraphRevisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParagraphRevisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParagraphRevisions
    **/
    _count?: true | ParagraphRevisionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParagraphRevisionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParagraphRevisionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParagraphRevisionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParagraphRevisionMaxAggregateInputType
  }

  export type GetParagraphRevisionAggregateType<T extends ParagraphRevisionAggregateArgs> = {
        [P in keyof T & keyof AggregateParagraphRevision]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParagraphRevision[P]>
      : GetScalarType<T[P], AggregateParagraphRevision[P]>
  }




  export type ParagraphRevisionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParagraphRevisionWhereInput
    orderBy?: ParagraphRevisionOrderByWithAggregationInput | ParagraphRevisionOrderByWithAggregationInput[]
    by: ParagraphRevisionScalarFieldEnum[] | ParagraphRevisionScalarFieldEnum
    having?: ParagraphRevisionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParagraphRevisionCountAggregateInputType | true
    _avg?: ParagraphRevisionAvgAggregateInputType
    _sum?: ParagraphRevisionSumAggregateInputType
    _min?: ParagraphRevisionMinAggregateInputType
    _max?: ParagraphRevisionMaxAggregateInputType
  }

  export type ParagraphRevisionGroupByOutputType = {
    id: string
    paragraphId: string
    body: string
    contentSchema: string | null
    version: number
    state: $Enums.ParagraphState | null
    aiCharacters: number | null
    humanCharacters: number | null
    plotPointActions: JsonValue | null
    inventoryActions: JsonValue | null
    createdAt: Date
    _count: ParagraphRevisionCountAggregateOutputType | null
    _avg: ParagraphRevisionAvgAggregateOutputType | null
    _sum: ParagraphRevisionSumAggregateOutputType | null
    _min: ParagraphRevisionMinAggregateOutputType | null
    _max: ParagraphRevisionMaxAggregateOutputType | null
  }

  type GetParagraphRevisionGroupByPayload<T extends ParagraphRevisionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParagraphRevisionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParagraphRevisionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParagraphRevisionGroupByOutputType[P]>
            : GetScalarType<T[P], ParagraphRevisionGroupByOutputType[P]>
        }
      >
    >


  export type ParagraphRevisionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paragraphId?: boolean
    body?: boolean
    contentSchema?: boolean
    version?: boolean
    state?: boolean
    aiCharacters?: boolean
    humanCharacters?: boolean
    plotPointActions?: boolean
    inventoryActions?: boolean
    createdAt?: boolean
    paragraph?: boolean | ParagraphDefaultArgs<ExtArgs>
    paragraphComment?: boolean | ParagraphRevision$paragraphCommentArgs<ExtArgs>
    _count?: boolean | ParagraphRevisionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paragraphRevision"]>



  export type ParagraphRevisionSelectScalar = {
    id?: boolean
    paragraphId?: boolean
    body?: boolean
    contentSchema?: boolean
    version?: boolean
    state?: boolean
    aiCharacters?: boolean
    humanCharacters?: boolean
    plotPointActions?: boolean
    inventoryActions?: boolean
    createdAt?: boolean
  }

  export type ParagraphRevisionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "paragraphId" | "body" | "contentSchema" | "version" | "state" | "aiCharacters" | "humanCharacters" | "plotPointActions" | "inventoryActions" | "createdAt", ExtArgs["result"]["paragraphRevision"]>
  export type ParagraphRevisionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paragraph?: boolean | ParagraphDefaultArgs<ExtArgs>
    paragraphComment?: boolean | ParagraphRevision$paragraphCommentArgs<ExtArgs>
    _count?: boolean | ParagraphRevisionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ParagraphRevisionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParagraphRevision"
    objects: {
      paragraph: Prisma.$ParagraphPayload<ExtArgs>
      paragraphComment: Prisma.$ParagraphCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      paragraphId: string
      body: string
      contentSchema: string | null
      version: number
      state: $Enums.ParagraphState | null
      aiCharacters: number | null
      humanCharacters: number | null
      plotPointActions: Prisma.JsonValue | null
      inventoryActions: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["paragraphRevision"]>
    composites: {}
  }

  type ParagraphRevisionGetPayload<S extends boolean | null | undefined | ParagraphRevisionDefaultArgs> = $Result.GetResult<Prisma.$ParagraphRevisionPayload, S>

  type ParagraphRevisionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ParagraphRevisionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ParagraphRevisionCountAggregateInputType | true
    }

  export interface ParagraphRevisionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParagraphRevision'], meta: { name: 'ParagraphRevision' } }
    /**
     * Find zero or one ParagraphRevision that matches the filter.
     * @param {ParagraphRevisionFindUniqueArgs} args - Arguments to find a ParagraphRevision
     * @example
     * // Get one ParagraphRevision
     * const paragraphRevision = await prisma.paragraphRevision.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParagraphRevisionFindUniqueArgs>(args: SelectSubset<T, ParagraphRevisionFindUniqueArgs<ExtArgs>>): Prisma__ParagraphRevisionClient<$Result.GetResult<Prisma.$ParagraphRevisionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ParagraphRevision that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ParagraphRevisionFindUniqueOrThrowArgs} args - Arguments to find a ParagraphRevision
     * @example
     * // Get one ParagraphRevision
     * const paragraphRevision = await prisma.paragraphRevision.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParagraphRevisionFindUniqueOrThrowArgs>(args: SelectSubset<T, ParagraphRevisionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParagraphRevisionClient<$Result.GetResult<Prisma.$ParagraphRevisionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParagraphRevision that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphRevisionFindFirstArgs} args - Arguments to find a ParagraphRevision
     * @example
     * // Get one ParagraphRevision
     * const paragraphRevision = await prisma.paragraphRevision.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParagraphRevisionFindFirstArgs>(args?: SelectSubset<T, ParagraphRevisionFindFirstArgs<ExtArgs>>): Prisma__ParagraphRevisionClient<$Result.GetResult<Prisma.$ParagraphRevisionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParagraphRevision that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphRevisionFindFirstOrThrowArgs} args - Arguments to find a ParagraphRevision
     * @example
     * // Get one ParagraphRevision
     * const paragraphRevision = await prisma.paragraphRevision.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParagraphRevisionFindFirstOrThrowArgs>(args?: SelectSubset<T, ParagraphRevisionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParagraphRevisionClient<$Result.GetResult<Prisma.$ParagraphRevisionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ParagraphRevisions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphRevisionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParagraphRevisions
     * const paragraphRevisions = await prisma.paragraphRevision.findMany()
     * 
     * // Get first 10 ParagraphRevisions
     * const paragraphRevisions = await prisma.paragraphRevision.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paragraphRevisionWithIdOnly = await prisma.paragraphRevision.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParagraphRevisionFindManyArgs>(args?: SelectSubset<T, ParagraphRevisionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParagraphRevisionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ParagraphRevision.
     * @param {ParagraphRevisionCreateArgs} args - Arguments to create a ParagraphRevision.
     * @example
     * // Create one ParagraphRevision
     * const ParagraphRevision = await prisma.paragraphRevision.create({
     *   data: {
     *     // ... data to create a ParagraphRevision
     *   }
     * })
     * 
     */
    create<T extends ParagraphRevisionCreateArgs>(args: SelectSubset<T, ParagraphRevisionCreateArgs<ExtArgs>>): Prisma__ParagraphRevisionClient<$Result.GetResult<Prisma.$ParagraphRevisionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ParagraphRevisions.
     * @param {ParagraphRevisionCreateManyArgs} args - Arguments to create many ParagraphRevisions.
     * @example
     * // Create many ParagraphRevisions
     * const paragraphRevision = await prisma.paragraphRevision.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParagraphRevisionCreateManyArgs>(args?: SelectSubset<T, ParagraphRevisionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ParagraphRevision.
     * @param {ParagraphRevisionDeleteArgs} args - Arguments to delete one ParagraphRevision.
     * @example
     * // Delete one ParagraphRevision
     * const ParagraphRevision = await prisma.paragraphRevision.delete({
     *   where: {
     *     // ... filter to delete one ParagraphRevision
     *   }
     * })
     * 
     */
    delete<T extends ParagraphRevisionDeleteArgs>(args: SelectSubset<T, ParagraphRevisionDeleteArgs<ExtArgs>>): Prisma__ParagraphRevisionClient<$Result.GetResult<Prisma.$ParagraphRevisionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ParagraphRevision.
     * @param {ParagraphRevisionUpdateArgs} args - Arguments to update one ParagraphRevision.
     * @example
     * // Update one ParagraphRevision
     * const paragraphRevision = await prisma.paragraphRevision.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParagraphRevisionUpdateArgs>(args: SelectSubset<T, ParagraphRevisionUpdateArgs<ExtArgs>>): Prisma__ParagraphRevisionClient<$Result.GetResult<Prisma.$ParagraphRevisionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ParagraphRevisions.
     * @param {ParagraphRevisionDeleteManyArgs} args - Arguments to filter ParagraphRevisions to delete.
     * @example
     * // Delete a few ParagraphRevisions
     * const { count } = await prisma.paragraphRevision.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParagraphRevisionDeleteManyArgs>(args?: SelectSubset<T, ParagraphRevisionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParagraphRevisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphRevisionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParagraphRevisions
     * const paragraphRevision = await prisma.paragraphRevision.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParagraphRevisionUpdateManyArgs>(args: SelectSubset<T, ParagraphRevisionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ParagraphRevision.
     * @param {ParagraphRevisionUpsertArgs} args - Arguments to update or create a ParagraphRevision.
     * @example
     * // Update or create a ParagraphRevision
     * const paragraphRevision = await prisma.paragraphRevision.upsert({
     *   create: {
     *     // ... data to create a ParagraphRevision
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParagraphRevision we want to update
     *   }
     * })
     */
    upsert<T extends ParagraphRevisionUpsertArgs>(args: SelectSubset<T, ParagraphRevisionUpsertArgs<ExtArgs>>): Prisma__ParagraphRevisionClient<$Result.GetResult<Prisma.$ParagraphRevisionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ParagraphRevisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphRevisionCountArgs} args - Arguments to filter ParagraphRevisions to count.
     * @example
     * // Count the number of ParagraphRevisions
     * const count = await prisma.paragraphRevision.count({
     *   where: {
     *     // ... the filter for the ParagraphRevisions we want to count
     *   }
     * })
    **/
    count<T extends ParagraphRevisionCountArgs>(
      args?: Subset<T, ParagraphRevisionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParagraphRevisionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParagraphRevision.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphRevisionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParagraphRevisionAggregateArgs>(args: Subset<T, ParagraphRevisionAggregateArgs>): Prisma.PrismaPromise<GetParagraphRevisionAggregateType<T>>

    /**
     * Group by ParagraphRevision.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphRevisionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParagraphRevisionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParagraphRevisionGroupByArgs['orderBy'] }
        : { orderBy?: ParagraphRevisionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParagraphRevisionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParagraphRevisionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParagraphRevision model
   */
  readonly fields: ParagraphRevisionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParagraphRevision.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParagraphRevisionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    paragraph<T extends ParagraphDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParagraphDefaultArgs<ExtArgs>>): Prisma__ParagraphClient<$Result.GetResult<Prisma.$ParagraphPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    paragraphComment<T extends ParagraphRevision$paragraphCommentArgs<ExtArgs> = {}>(args?: Subset<T, ParagraphRevision$paragraphCommentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParagraphCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ParagraphRevision model
   */
  interface ParagraphRevisionFieldRefs {
    readonly id: FieldRef<"ParagraphRevision", 'String'>
    readonly paragraphId: FieldRef<"ParagraphRevision", 'String'>
    readonly body: FieldRef<"ParagraphRevision", 'String'>
    readonly contentSchema: FieldRef<"ParagraphRevision", 'String'>
    readonly version: FieldRef<"ParagraphRevision", 'Int'>
    readonly state: FieldRef<"ParagraphRevision", 'ParagraphState'>
    readonly aiCharacters: FieldRef<"ParagraphRevision", 'Int'>
    readonly humanCharacters: FieldRef<"ParagraphRevision", 'Int'>
    readonly plotPointActions: FieldRef<"ParagraphRevision", 'Json'>
    readonly inventoryActions: FieldRef<"ParagraphRevision", 'Json'>
    readonly createdAt: FieldRef<"ParagraphRevision", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ParagraphRevision findUnique
   */
  export type ParagraphRevisionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphRevision
     */
    select?: ParagraphRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphRevision
     */
    omit?: ParagraphRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphRevisionInclude<ExtArgs> | null
    /**
     * Filter, which ParagraphRevision to fetch.
     */
    where: ParagraphRevisionWhereUniqueInput
  }

  /**
   * ParagraphRevision findUniqueOrThrow
   */
  export type ParagraphRevisionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphRevision
     */
    select?: ParagraphRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphRevision
     */
    omit?: ParagraphRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphRevisionInclude<ExtArgs> | null
    /**
     * Filter, which ParagraphRevision to fetch.
     */
    where: ParagraphRevisionWhereUniqueInput
  }

  /**
   * ParagraphRevision findFirst
   */
  export type ParagraphRevisionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphRevision
     */
    select?: ParagraphRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphRevision
     */
    omit?: ParagraphRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphRevisionInclude<ExtArgs> | null
    /**
     * Filter, which ParagraphRevision to fetch.
     */
    where?: ParagraphRevisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParagraphRevisions to fetch.
     */
    orderBy?: ParagraphRevisionOrderByWithRelationInput | ParagraphRevisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParagraphRevisions.
     */
    cursor?: ParagraphRevisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParagraphRevisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParagraphRevisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParagraphRevisions.
     */
    distinct?: ParagraphRevisionScalarFieldEnum | ParagraphRevisionScalarFieldEnum[]
  }

  /**
   * ParagraphRevision findFirstOrThrow
   */
  export type ParagraphRevisionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphRevision
     */
    select?: ParagraphRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphRevision
     */
    omit?: ParagraphRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphRevisionInclude<ExtArgs> | null
    /**
     * Filter, which ParagraphRevision to fetch.
     */
    where?: ParagraphRevisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParagraphRevisions to fetch.
     */
    orderBy?: ParagraphRevisionOrderByWithRelationInput | ParagraphRevisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParagraphRevisions.
     */
    cursor?: ParagraphRevisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParagraphRevisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParagraphRevisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParagraphRevisions.
     */
    distinct?: ParagraphRevisionScalarFieldEnum | ParagraphRevisionScalarFieldEnum[]
  }

  /**
   * ParagraphRevision findMany
   */
  export type ParagraphRevisionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphRevision
     */
    select?: ParagraphRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphRevision
     */
    omit?: ParagraphRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphRevisionInclude<ExtArgs> | null
    /**
     * Filter, which ParagraphRevisions to fetch.
     */
    where?: ParagraphRevisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParagraphRevisions to fetch.
     */
    orderBy?: ParagraphRevisionOrderByWithRelationInput | ParagraphRevisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParagraphRevisions.
     */
    cursor?: ParagraphRevisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParagraphRevisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParagraphRevisions.
     */
    skip?: number
    distinct?: ParagraphRevisionScalarFieldEnum | ParagraphRevisionScalarFieldEnum[]
  }

  /**
   * ParagraphRevision create
   */
  export type ParagraphRevisionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphRevision
     */
    select?: ParagraphRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphRevision
     */
    omit?: ParagraphRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphRevisionInclude<ExtArgs> | null
    /**
     * The data needed to create a ParagraphRevision.
     */
    data: XOR<ParagraphRevisionCreateInput, ParagraphRevisionUncheckedCreateInput>
  }

  /**
   * ParagraphRevision createMany
   */
  export type ParagraphRevisionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParagraphRevisions.
     */
    data: ParagraphRevisionCreateManyInput | ParagraphRevisionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ParagraphRevision update
   */
  export type ParagraphRevisionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphRevision
     */
    select?: ParagraphRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphRevision
     */
    omit?: ParagraphRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphRevisionInclude<ExtArgs> | null
    /**
     * The data needed to update a ParagraphRevision.
     */
    data: XOR<ParagraphRevisionUpdateInput, ParagraphRevisionUncheckedUpdateInput>
    /**
     * Choose, which ParagraphRevision to update.
     */
    where: ParagraphRevisionWhereUniqueInput
  }

  /**
   * ParagraphRevision updateMany
   */
  export type ParagraphRevisionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParagraphRevisions.
     */
    data: XOR<ParagraphRevisionUpdateManyMutationInput, ParagraphRevisionUncheckedUpdateManyInput>
    /**
     * Filter which ParagraphRevisions to update
     */
    where?: ParagraphRevisionWhereInput
    /**
     * Limit how many ParagraphRevisions to update.
     */
    limit?: number
  }

  /**
   * ParagraphRevision upsert
   */
  export type ParagraphRevisionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphRevision
     */
    select?: ParagraphRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphRevision
     */
    omit?: ParagraphRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphRevisionInclude<ExtArgs> | null
    /**
     * The filter to search for the ParagraphRevision to update in case it exists.
     */
    where: ParagraphRevisionWhereUniqueInput
    /**
     * In case the ParagraphRevision found by the `where` argument doesn't exist, create a new ParagraphRevision with this data.
     */
    create: XOR<ParagraphRevisionCreateInput, ParagraphRevisionUncheckedCreateInput>
    /**
     * In case the ParagraphRevision was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParagraphRevisionUpdateInput, ParagraphRevisionUncheckedUpdateInput>
  }

  /**
   * ParagraphRevision delete
   */
  export type ParagraphRevisionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphRevision
     */
    select?: ParagraphRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphRevision
     */
    omit?: ParagraphRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphRevisionInclude<ExtArgs> | null
    /**
     * Filter which ParagraphRevision to delete.
     */
    where: ParagraphRevisionWhereUniqueInput
  }

  /**
   * ParagraphRevision deleteMany
   */
  export type ParagraphRevisionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParagraphRevisions to delete
     */
    where?: ParagraphRevisionWhereInput
    /**
     * Limit how many ParagraphRevisions to delete.
     */
    limit?: number
  }

  /**
   * ParagraphRevision.paragraphComment
   */
  export type ParagraphRevision$paragraphCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphComment
     */
    select?: ParagraphCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphComment
     */
    omit?: ParagraphCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphCommentInclude<ExtArgs> | null
    where?: ParagraphCommentWhereInput
    orderBy?: ParagraphCommentOrderByWithRelationInput | ParagraphCommentOrderByWithRelationInput[]
    cursor?: ParagraphCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParagraphCommentScalarFieldEnum | ParagraphCommentScalarFieldEnum[]
  }

  /**
   * ParagraphRevision without action
   */
  export type ParagraphRevisionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphRevision
     */
    select?: ParagraphRevisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphRevision
     */
    omit?: ParagraphRevisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphRevisionInclude<ExtArgs> | null
  }


  /**
   * Model ParagraphComment
   */

  export type AggregateParagraphComment = {
    _count: ParagraphCommentCountAggregateOutputType | null
    _avg: ParagraphCommentAvgAggregateOutputType | null
    _sum: ParagraphCommentSumAggregateOutputType | null
    _min: ParagraphCommentMinAggregateOutputType | null
    _max: ParagraphCommentMaxAggregateOutputType | null
  }

  export type ParagraphCommentAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
  }

  export type ParagraphCommentSumAggregateOutputType = {
    id: number | null
    ownerId: number | null
  }

  export type ParagraphCommentMinAggregateOutputType = {
    id: number | null
    paragraphRevisionId: string | null
    ownerId: number | null
    body: string | null
    type: $Enums.ParagraphCommentType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParagraphCommentMaxAggregateOutputType = {
    id: number | null
    paragraphRevisionId: string | null
    ownerId: number | null
    body: string | null
    type: $Enums.ParagraphCommentType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParagraphCommentCountAggregateOutputType = {
    id: number
    paragraphRevisionId: number
    ownerId: number
    body: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ParagraphCommentAvgAggregateInputType = {
    id?: true
    ownerId?: true
  }

  export type ParagraphCommentSumAggregateInputType = {
    id?: true
    ownerId?: true
  }

  export type ParagraphCommentMinAggregateInputType = {
    id?: true
    paragraphRevisionId?: true
    ownerId?: true
    body?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParagraphCommentMaxAggregateInputType = {
    id?: true
    paragraphRevisionId?: true
    ownerId?: true
    body?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParagraphCommentCountAggregateInputType = {
    id?: true
    paragraphRevisionId?: true
    ownerId?: true
    body?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ParagraphCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParagraphComment to aggregate.
     */
    where?: ParagraphCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParagraphComments to fetch.
     */
    orderBy?: ParagraphCommentOrderByWithRelationInput | ParagraphCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParagraphCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParagraphComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParagraphComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParagraphComments
    **/
    _count?: true | ParagraphCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParagraphCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParagraphCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParagraphCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParagraphCommentMaxAggregateInputType
  }

  export type GetParagraphCommentAggregateType<T extends ParagraphCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateParagraphComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParagraphComment[P]>
      : GetScalarType<T[P], AggregateParagraphComment[P]>
  }




  export type ParagraphCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParagraphCommentWhereInput
    orderBy?: ParagraphCommentOrderByWithAggregationInput | ParagraphCommentOrderByWithAggregationInput[]
    by: ParagraphCommentScalarFieldEnum[] | ParagraphCommentScalarFieldEnum
    having?: ParagraphCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParagraphCommentCountAggregateInputType | true
    _avg?: ParagraphCommentAvgAggregateInputType
    _sum?: ParagraphCommentSumAggregateInputType
    _min?: ParagraphCommentMinAggregateInputType
    _max?: ParagraphCommentMaxAggregateInputType
  }

  export type ParagraphCommentGroupByOutputType = {
    id: number
    paragraphRevisionId: string
    ownerId: number
    body: string
    type: $Enums.ParagraphCommentType
    createdAt: Date
    updatedAt: Date
    _count: ParagraphCommentCountAggregateOutputType | null
    _avg: ParagraphCommentAvgAggregateOutputType | null
    _sum: ParagraphCommentSumAggregateOutputType | null
    _min: ParagraphCommentMinAggregateOutputType | null
    _max: ParagraphCommentMaxAggregateOutputType | null
  }

  type GetParagraphCommentGroupByPayload<T extends ParagraphCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParagraphCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParagraphCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParagraphCommentGroupByOutputType[P]>
            : GetScalarType<T[P], ParagraphCommentGroupByOutputType[P]>
        }
      >
    >


  export type ParagraphCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paragraphRevisionId?: boolean
    ownerId?: boolean
    body?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    paragraphRevision?: boolean | ParagraphRevisionDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paragraphComment"]>



  export type ParagraphCommentSelectScalar = {
    id?: boolean
    paragraphRevisionId?: boolean
    ownerId?: boolean
    body?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ParagraphCommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "paragraphRevisionId" | "ownerId" | "body" | "type" | "createdAt" | "updatedAt", ExtArgs["result"]["paragraphComment"]>
  export type ParagraphCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paragraphRevision?: boolean | ParagraphRevisionDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ParagraphCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParagraphComment"
    objects: {
      paragraphRevision: Prisma.$ParagraphRevisionPayload<ExtArgs>
      owner: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      paragraphRevisionId: string
      ownerId: number
      body: string
      type: $Enums.ParagraphCommentType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["paragraphComment"]>
    composites: {}
  }

  type ParagraphCommentGetPayload<S extends boolean | null | undefined | ParagraphCommentDefaultArgs> = $Result.GetResult<Prisma.$ParagraphCommentPayload, S>

  type ParagraphCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ParagraphCommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ParagraphCommentCountAggregateInputType | true
    }

  export interface ParagraphCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParagraphComment'], meta: { name: 'ParagraphComment' } }
    /**
     * Find zero or one ParagraphComment that matches the filter.
     * @param {ParagraphCommentFindUniqueArgs} args - Arguments to find a ParagraphComment
     * @example
     * // Get one ParagraphComment
     * const paragraphComment = await prisma.paragraphComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParagraphCommentFindUniqueArgs>(args: SelectSubset<T, ParagraphCommentFindUniqueArgs<ExtArgs>>): Prisma__ParagraphCommentClient<$Result.GetResult<Prisma.$ParagraphCommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ParagraphComment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ParagraphCommentFindUniqueOrThrowArgs} args - Arguments to find a ParagraphComment
     * @example
     * // Get one ParagraphComment
     * const paragraphComment = await prisma.paragraphComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParagraphCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, ParagraphCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParagraphCommentClient<$Result.GetResult<Prisma.$ParagraphCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParagraphComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphCommentFindFirstArgs} args - Arguments to find a ParagraphComment
     * @example
     * // Get one ParagraphComment
     * const paragraphComment = await prisma.paragraphComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParagraphCommentFindFirstArgs>(args?: SelectSubset<T, ParagraphCommentFindFirstArgs<ExtArgs>>): Prisma__ParagraphCommentClient<$Result.GetResult<Prisma.$ParagraphCommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ParagraphComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphCommentFindFirstOrThrowArgs} args - Arguments to find a ParagraphComment
     * @example
     * // Get one ParagraphComment
     * const paragraphComment = await prisma.paragraphComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParagraphCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, ParagraphCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParagraphCommentClient<$Result.GetResult<Prisma.$ParagraphCommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ParagraphComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParagraphComments
     * const paragraphComments = await prisma.paragraphComment.findMany()
     * 
     * // Get first 10 ParagraphComments
     * const paragraphComments = await prisma.paragraphComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paragraphCommentWithIdOnly = await prisma.paragraphComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParagraphCommentFindManyArgs>(args?: SelectSubset<T, ParagraphCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParagraphCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ParagraphComment.
     * @param {ParagraphCommentCreateArgs} args - Arguments to create a ParagraphComment.
     * @example
     * // Create one ParagraphComment
     * const ParagraphComment = await prisma.paragraphComment.create({
     *   data: {
     *     // ... data to create a ParagraphComment
     *   }
     * })
     * 
     */
    create<T extends ParagraphCommentCreateArgs>(args: SelectSubset<T, ParagraphCommentCreateArgs<ExtArgs>>): Prisma__ParagraphCommentClient<$Result.GetResult<Prisma.$ParagraphCommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ParagraphComments.
     * @param {ParagraphCommentCreateManyArgs} args - Arguments to create many ParagraphComments.
     * @example
     * // Create many ParagraphComments
     * const paragraphComment = await prisma.paragraphComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParagraphCommentCreateManyArgs>(args?: SelectSubset<T, ParagraphCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ParagraphComment.
     * @param {ParagraphCommentDeleteArgs} args - Arguments to delete one ParagraphComment.
     * @example
     * // Delete one ParagraphComment
     * const ParagraphComment = await prisma.paragraphComment.delete({
     *   where: {
     *     // ... filter to delete one ParagraphComment
     *   }
     * })
     * 
     */
    delete<T extends ParagraphCommentDeleteArgs>(args: SelectSubset<T, ParagraphCommentDeleteArgs<ExtArgs>>): Prisma__ParagraphCommentClient<$Result.GetResult<Prisma.$ParagraphCommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ParagraphComment.
     * @param {ParagraphCommentUpdateArgs} args - Arguments to update one ParagraphComment.
     * @example
     * // Update one ParagraphComment
     * const paragraphComment = await prisma.paragraphComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParagraphCommentUpdateArgs>(args: SelectSubset<T, ParagraphCommentUpdateArgs<ExtArgs>>): Prisma__ParagraphCommentClient<$Result.GetResult<Prisma.$ParagraphCommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ParagraphComments.
     * @param {ParagraphCommentDeleteManyArgs} args - Arguments to filter ParagraphComments to delete.
     * @example
     * // Delete a few ParagraphComments
     * const { count } = await prisma.paragraphComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParagraphCommentDeleteManyArgs>(args?: SelectSubset<T, ParagraphCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParagraphComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParagraphComments
     * const paragraphComment = await prisma.paragraphComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParagraphCommentUpdateManyArgs>(args: SelectSubset<T, ParagraphCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ParagraphComment.
     * @param {ParagraphCommentUpsertArgs} args - Arguments to update or create a ParagraphComment.
     * @example
     * // Update or create a ParagraphComment
     * const paragraphComment = await prisma.paragraphComment.upsert({
     *   create: {
     *     // ... data to create a ParagraphComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParagraphComment we want to update
     *   }
     * })
     */
    upsert<T extends ParagraphCommentUpsertArgs>(args: SelectSubset<T, ParagraphCommentUpsertArgs<ExtArgs>>): Prisma__ParagraphCommentClient<$Result.GetResult<Prisma.$ParagraphCommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ParagraphComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphCommentCountArgs} args - Arguments to filter ParagraphComments to count.
     * @example
     * // Count the number of ParagraphComments
     * const count = await prisma.paragraphComment.count({
     *   where: {
     *     // ... the filter for the ParagraphComments we want to count
     *   }
     * })
    **/
    count<T extends ParagraphCommentCountArgs>(
      args?: Subset<T, ParagraphCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParagraphCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParagraphComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParagraphCommentAggregateArgs>(args: Subset<T, ParagraphCommentAggregateArgs>): Prisma.PrismaPromise<GetParagraphCommentAggregateType<T>>

    /**
     * Group by ParagraphComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParagraphCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParagraphCommentGroupByArgs['orderBy'] }
        : { orderBy?: ParagraphCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParagraphCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParagraphCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParagraphComment model
   */
  readonly fields: ParagraphCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParagraphComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParagraphCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    paragraphRevision<T extends ParagraphRevisionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParagraphRevisionDefaultArgs<ExtArgs>>): Prisma__ParagraphRevisionClient<$Result.GetResult<Prisma.$ParagraphRevisionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ParagraphComment model
   */
  interface ParagraphCommentFieldRefs {
    readonly id: FieldRef<"ParagraphComment", 'Int'>
    readonly paragraphRevisionId: FieldRef<"ParagraphComment", 'String'>
    readonly ownerId: FieldRef<"ParagraphComment", 'Int'>
    readonly body: FieldRef<"ParagraphComment", 'String'>
    readonly type: FieldRef<"ParagraphComment", 'ParagraphCommentType'>
    readonly createdAt: FieldRef<"ParagraphComment", 'DateTime'>
    readonly updatedAt: FieldRef<"ParagraphComment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ParagraphComment findUnique
   */
  export type ParagraphCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphComment
     */
    select?: ParagraphCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphComment
     */
    omit?: ParagraphCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphCommentInclude<ExtArgs> | null
    /**
     * Filter, which ParagraphComment to fetch.
     */
    where: ParagraphCommentWhereUniqueInput
  }

  /**
   * ParagraphComment findUniqueOrThrow
   */
  export type ParagraphCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphComment
     */
    select?: ParagraphCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphComment
     */
    omit?: ParagraphCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphCommentInclude<ExtArgs> | null
    /**
     * Filter, which ParagraphComment to fetch.
     */
    where: ParagraphCommentWhereUniqueInput
  }

  /**
   * ParagraphComment findFirst
   */
  export type ParagraphCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphComment
     */
    select?: ParagraphCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphComment
     */
    omit?: ParagraphCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphCommentInclude<ExtArgs> | null
    /**
     * Filter, which ParagraphComment to fetch.
     */
    where?: ParagraphCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParagraphComments to fetch.
     */
    orderBy?: ParagraphCommentOrderByWithRelationInput | ParagraphCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParagraphComments.
     */
    cursor?: ParagraphCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParagraphComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParagraphComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParagraphComments.
     */
    distinct?: ParagraphCommentScalarFieldEnum | ParagraphCommentScalarFieldEnum[]
  }

  /**
   * ParagraphComment findFirstOrThrow
   */
  export type ParagraphCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphComment
     */
    select?: ParagraphCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphComment
     */
    omit?: ParagraphCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphCommentInclude<ExtArgs> | null
    /**
     * Filter, which ParagraphComment to fetch.
     */
    where?: ParagraphCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParagraphComments to fetch.
     */
    orderBy?: ParagraphCommentOrderByWithRelationInput | ParagraphCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParagraphComments.
     */
    cursor?: ParagraphCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParagraphComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParagraphComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParagraphComments.
     */
    distinct?: ParagraphCommentScalarFieldEnum | ParagraphCommentScalarFieldEnum[]
  }

  /**
   * ParagraphComment findMany
   */
  export type ParagraphCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphComment
     */
    select?: ParagraphCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphComment
     */
    omit?: ParagraphCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphCommentInclude<ExtArgs> | null
    /**
     * Filter, which ParagraphComments to fetch.
     */
    where?: ParagraphCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParagraphComments to fetch.
     */
    orderBy?: ParagraphCommentOrderByWithRelationInput | ParagraphCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParagraphComments.
     */
    cursor?: ParagraphCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParagraphComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParagraphComments.
     */
    skip?: number
    distinct?: ParagraphCommentScalarFieldEnum | ParagraphCommentScalarFieldEnum[]
  }

  /**
   * ParagraphComment create
   */
  export type ParagraphCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphComment
     */
    select?: ParagraphCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphComment
     */
    omit?: ParagraphCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a ParagraphComment.
     */
    data: XOR<ParagraphCommentCreateInput, ParagraphCommentUncheckedCreateInput>
  }

  /**
   * ParagraphComment createMany
   */
  export type ParagraphCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParagraphComments.
     */
    data: ParagraphCommentCreateManyInput | ParagraphCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ParagraphComment update
   */
  export type ParagraphCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphComment
     */
    select?: ParagraphCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphComment
     */
    omit?: ParagraphCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a ParagraphComment.
     */
    data: XOR<ParagraphCommentUpdateInput, ParagraphCommentUncheckedUpdateInput>
    /**
     * Choose, which ParagraphComment to update.
     */
    where: ParagraphCommentWhereUniqueInput
  }

  /**
   * ParagraphComment updateMany
   */
  export type ParagraphCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParagraphComments.
     */
    data: XOR<ParagraphCommentUpdateManyMutationInput, ParagraphCommentUncheckedUpdateManyInput>
    /**
     * Filter which ParagraphComments to update
     */
    where?: ParagraphCommentWhereInput
    /**
     * Limit how many ParagraphComments to update.
     */
    limit?: number
  }

  /**
   * ParagraphComment upsert
   */
  export type ParagraphCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphComment
     */
    select?: ParagraphCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphComment
     */
    omit?: ParagraphCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the ParagraphComment to update in case it exists.
     */
    where: ParagraphCommentWhereUniqueInput
    /**
     * In case the ParagraphComment found by the `where` argument doesn't exist, create a new ParagraphComment with this data.
     */
    create: XOR<ParagraphCommentCreateInput, ParagraphCommentUncheckedCreateInput>
    /**
     * In case the ParagraphComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParagraphCommentUpdateInput, ParagraphCommentUncheckedUpdateInput>
  }

  /**
   * ParagraphComment delete
   */
  export type ParagraphCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphComment
     */
    select?: ParagraphCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphComment
     */
    omit?: ParagraphCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphCommentInclude<ExtArgs> | null
    /**
     * Filter which ParagraphComment to delete.
     */
    where: ParagraphCommentWhereUniqueInput
  }

  /**
   * ParagraphComment deleteMany
   */
  export type ParagraphCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParagraphComments to delete
     */
    where?: ParagraphCommentWhereInput
    /**
     * Limit how many ParagraphComments to delete.
     */
    limit?: number
  }

  /**
   * ParagraphComment without action
   */
  export type ParagraphCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParagraphComment
     */
    select?: ParagraphCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ParagraphComment
     */
    omit?: ParagraphCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParagraphCommentInclude<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileAvgAggregateOutputType = {
    ownerId: number | null
    width: number | null
    height: number | null
    bytes: number | null
  }

  export type FileSumAggregateOutputType = {
    ownerId: number | null
    width: number | null
    height: number | null
    bytes: number | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    ownerId: number | null
    storyId: string | null
    localPath: string | null
    path: string | null
    sha256: string | null
    width: number | null
    height: number | null
    bytes: number | null
    mimeType: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    ownerId: number | null
    storyId: string | null
    localPath: string | null
    path: string | null
    sha256: string | null
    width: number | null
    height: number | null
    bytes: number | null
    mimeType: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    ownerId: number
    storyId: number
    localPath: number
    path: number
    sha256: number
    width: number
    height: number
    bytes: number
    mimeType: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FileAvgAggregateInputType = {
    ownerId?: true
    width?: true
    height?: true
    bytes?: true
  }

  export type FileSumAggregateInputType = {
    ownerId?: true
    width?: true
    height?: true
    bytes?: true
  }

  export type FileMinAggregateInputType = {
    id?: true
    ownerId?: true
    storyId?: true
    localPath?: true
    path?: true
    sha256?: true
    width?: true
    height?: true
    bytes?: true
    mimeType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    ownerId?: true
    storyId?: true
    localPath?: true
    path?: true
    sha256?: true
    width?: true
    height?: true
    bytes?: true
    mimeType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    ownerId?: true
    storyId?: true
    localPath?: true
    path?: true
    sha256?: true
    width?: true
    height?: true
    bytes?: true
    mimeType?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _avg?: FileAvgAggregateInputType
    _sum?: FileSumAggregateInputType
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: string
    ownerId: number
    storyId: string | null
    localPath: string | null
    path: string
    sha256: string
    width: number | null
    height: number | null
    bytes: number | null
    mimeType: string
    createdAt: Date
    updatedAt: Date
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    storyId?: boolean
    localPath?: boolean
    path?: boolean
    sha256?: boolean
    width?: boolean
    height?: boolean
    bytes?: boolean
    mimeType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    story?: boolean | File$storyArgs<ExtArgs>
    storyCoverArt?: boolean | File$storyCoverArtArgs<ExtArgs>
    bookCoverArt?: boolean | File$bookCoverArtArgs<ExtArgs>
    bookSpineArt?: boolean | File$bookSpineArtArgs<ExtArgs>
    characterPicture?: boolean | File$characterPictureArgs<ExtArgs>
    locationPicture?: boolean | File$locationPictureArgs<ExtArgs>
    _count?: boolean | FileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>



  export type FileSelectScalar = {
    id?: boolean
    ownerId?: boolean
    storyId?: boolean
    localPath?: boolean
    path?: boolean
    sha256?: boolean
    width?: boolean
    height?: boolean
    bytes?: boolean
    mimeType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ownerId" | "storyId" | "localPath" | "path" | "sha256" | "width" | "height" | "bytes" | "mimeType" | "createdAt" | "updatedAt", ExtArgs["result"]["file"]>
  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    story?: boolean | File$storyArgs<ExtArgs>
    storyCoverArt?: boolean | File$storyCoverArtArgs<ExtArgs>
    bookCoverArt?: boolean | File$bookCoverArtArgs<ExtArgs>
    bookSpineArt?: boolean | File$bookSpineArtArgs<ExtArgs>
    characterPicture?: boolean | File$characterPictureArgs<ExtArgs>
    locationPicture?: boolean | File$locationPictureArgs<ExtArgs>
    _count?: boolean | FileCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      story: Prisma.$StoryPayload<ExtArgs> | null
      storyCoverArt: Prisma.$StoryPayload<ExtArgs>[]
      bookCoverArt: Prisma.$BookPayload<ExtArgs>[]
      bookSpineArt: Prisma.$BookPayload<ExtArgs>[]
      characterPicture: Prisma.$CharacterPayload<ExtArgs>[]
      locationPicture: Prisma.$LocationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ownerId: number
      storyId: string | null
      localPath: string | null
      path: string
      sha256: string
      width: number | null
      height: number | null
      bytes: number | null
      mimeType: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    story<T extends File$storyArgs<ExtArgs> = {}>(args?: Subset<T, File$storyArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    storyCoverArt<T extends File$storyCoverArtArgs<ExtArgs> = {}>(args?: Subset<T, File$storyCoverArtArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bookCoverArt<T extends File$bookCoverArtArgs<ExtArgs> = {}>(args?: Subset<T, File$bookCoverArtArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bookSpineArt<T extends File$bookSpineArtArgs<ExtArgs> = {}>(args?: Subset<T, File$bookSpineArtArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    characterPicture<T extends File$characterPictureArgs<ExtArgs> = {}>(args?: Subset<T, File$characterPictureArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    locationPicture<T extends File$locationPictureArgs<ExtArgs> = {}>(args?: Subset<T, File$locationPictureArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'String'>
    readonly ownerId: FieldRef<"File", 'Int'>
    readonly storyId: FieldRef<"File", 'String'>
    readonly localPath: FieldRef<"File", 'String'>
    readonly path: FieldRef<"File", 'String'>
    readonly sha256: FieldRef<"File", 'String'>
    readonly width: FieldRef<"File", 'Int'>
    readonly height: FieldRef<"File", 'Int'>
    readonly bytes: FieldRef<"File", 'Int'>
    readonly mimeType: FieldRef<"File", 'String'>
    readonly createdAt: FieldRef<"File", 'DateTime'>
    readonly updatedAt: FieldRef<"File", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to delete.
     */
    limit?: number
  }

  /**
   * File.story
   */
  export type File$storyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    where?: StoryWhereInput
  }

  /**
   * File.storyCoverArt
   */
  export type File$storyCoverArtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    where?: StoryWhereInput
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    cursor?: StoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }

  /**
   * File.bookCoverArt
   */
  export type File$bookCoverArtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    where?: BookWhereInput
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    cursor?: BookWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * File.bookSpineArt
   */
  export type File$bookSpineArtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Book
     */
    select?: BookSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Book
     */
    omit?: BookOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookInclude<ExtArgs> | null
    where?: BookWhereInput
    orderBy?: BookOrderByWithRelationInput | BookOrderByWithRelationInput[]
    cursor?: BookWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookScalarFieldEnum | BookScalarFieldEnum[]
  }

  /**
   * File.characterPicture
   */
  export type File$characterPictureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    where?: CharacterWhereInput
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    cursor?: CharacterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * File.locationPicture
   */
  export type File$locationPictureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    cursor?: LocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Model ChapterPublishing
   */

  export type AggregateChapterPublishing = {
    _count: ChapterPublishingCountAggregateOutputType | null
    _min: ChapterPublishingMinAggregateOutputType | null
    _max: ChapterPublishingMaxAggregateOutputType | null
  }

  export type ChapterPublishingMinAggregateOutputType = {
    id: string | null
    chapterId: string | null
    platform: $Enums.PublishingPlatform | null
    status: $Enums.PublishingStatus | null
    platformId: string | null
    publishedAt: Date | null
    lastAttempt: Date | null
    errorMessage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChapterPublishingMaxAggregateOutputType = {
    id: string | null
    chapterId: string | null
    platform: $Enums.PublishingPlatform | null
    status: $Enums.PublishingStatus | null
    platformId: string | null
    publishedAt: Date | null
    lastAttempt: Date | null
    errorMessage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChapterPublishingCountAggregateOutputType = {
    id: number
    chapterId: number
    platform: number
    status: number
    platformId: number
    publishedAt: number
    lastAttempt: number
    errorMessage: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChapterPublishingMinAggregateInputType = {
    id?: true
    chapterId?: true
    platform?: true
    status?: true
    platformId?: true
    publishedAt?: true
    lastAttempt?: true
    errorMessage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChapterPublishingMaxAggregateInputType = {
    id?: true
    chapterId?: true
    platform?: true
    status?: true
    platformId?: true
    publishedAt?: true
    lastAttempt?: true
    errorMessage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChapterPublishingCountAggregateInputType = {
    id?: true
    chapterId?: true
    platform?: true
    status?: true
    platformId?: true
    publishedAt?: true
    lastAttempt?: true
    errorMessage?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChapterPublishingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChapterPublishing to aggregate.
     */
    where?: ChapterPublishingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChapterPublishings to fetch.
     */
    orderBy?: ChapterPublishingOrderByWithRelationInput | ChapterPublishingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChapterPublishingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChapterPublishings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChapterPublishings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChapterPublishings
    **/
    _count?: true | ChapterPublishingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChapterPublishingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChapterPublishingMaxAggregateInputType
  }

  export type GetChapterPublishingAggregateType<T extends ChapterPublishingAggregateArgs> = {
        [P in keyof T & keyof AggregateChapterPublishing]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChapterPublishing[P]>
      : GetScalarType<T[P], AggregateChapterPublishing[P]>
  }




  export type ChapterPublishingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterPublishingWhereInput
    orderBy?: ChapterPublishingOrderByWithAggregationInput | ChapterPublishingOrderByWithAggregationInput[]
    by: ChapterPublishingScalarFieldEnum[] | ChapterPublishingScalarFieldEnum
    having?: ChapterPublishingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChapterPublishingCountAggregateInputType | true
    _min?: ChapterPublishingMinAggregateInputType
    _max?: ChapterPublishingMaxAggregateInputType
  }

  export type ChapterPublishingGroupByOutputType = {
    id: string
    chapterId: string
    platform: $Enums.PublishingPlatform
    status: $Enums.PublishingStatus
    platformId: string | null
    publishedAt: Date | null
    lastAttempt: Date | null
    errorMessage: string | null
    createdAt: Date
    updatedAt: Date
    _count: ChapterPublishingCountAggregateOutputType | null
    _min: ChapterPublishingMinAggregateOutputType | null
    _max: ChapterPublishingMaxAggregateOutputType | null
  }

  type GetChapterPublishingGroupByPayload<T extends ChapterPublishingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChapterPublishingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChapterPublishingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChapterPublishingGroupByOutputType[P]>
            : GetScalarType<T[P], ChapterPublishingGroupByOutputType[P]>
        }
      >
    >


  export type ChapterPublishingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chapterId?: boolean
    platform?: boolean
    status?: boolean
    platformId?: boolean
    publishedAt?: boolean
    lastAttempt?: boolean
    errorMessage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chapter?: boolean | ChapterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chapterPublishing"]>



  export type ChapterPublishingSelectScalar = {
    id?: boolean
    chapterId?: boolean
    platform?: boolean
    status?: boolean
    platformId?: boolean
    publishedAt?: boolean
    lastAttempt?: boolean
    errorMessage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChapterPublishingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "chapterId" | "platform" | "status" | "platformId" | "publishedAt" | "lastAttempt" | "errorMessage" | "createdAt" | "updatedAt", ExtArgs["result"]["chapterPublishing"]>
  export type ChapterPublishingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapter?: boolean | ChapterDefaultArgs<ExtArgs>
  }

  export type $ChapterPublishingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChapterPublishing"
    objects: {
      chapter: Prisma.$ChapterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      chapterId: string
      platform: $Enums.PublishingPlatform
      status: $Enums.PublishingStatus
      platformId: string | null
      publishedAt: Date | null
      lastAttempt: Date | null
      errorMessage: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chapterPublishing"]>
    composites: {}
  }

  type ChapterPublishingGetPayload<S extends boolean | null | undefined | ChapterPublishingDefaultArgs> = $Result.GetResult<Prisma.$ChapterPublishingPayload, S>

  type ChapterPublishingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChapterPublishingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChapterPublishingCountAggregateInputType | true
    }

  export interface ChapterPublishingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChapterPublishing'], meta: { name: 'ChapterPublishing' } }
    /**
     * Find zero or one ChapterPublishing that matches the filter.
     * @param {ChapterPublishingFindUniqueArgs} args - Arguments to find a ChapterPublishing
     * @example
     * // Get one ChapterPublishing
     * const chapterPublishing = await prisma.chapterPublishing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChapterPublishingFindUniqueArgs>(args: SelectSubset<T, ChapterPublishingFindUniqueArgs<ExtArgs>>): Prisma__ChapterPublishingClient<$Result.GetResult<Prisma.$ChapterPublishingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChapterPublishing that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChapterPublishingFindUniqueOrThrowArgs} args - Arguments to find a ChapterPublishing
     * @example
     * // Get one ChapterPublishing
     * const chapterPublishing = await prisma.chapterPublishing.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChapterPublishingFindUniqueOrThrowArgs>(args: SelectSubset<T, ChapterPublishingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChapterPublishingClient<$Result.GetResult<Prisma.$ChapterPublishingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChapterPublishing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterPublishingFindFirstArgs} args - Arguments to find a ChapterPublishing
     * @example
     * // Get one ChapterPublishing
     * const chapterPublishing = await prisma.chapterPublishing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChapterPublishingFindFirstArgs>(args?: SelectSubset<T, ChapterPublishingFindFirstArgs<ExtArgs>>): Prisma__ChapterPublishingClient<$Result.GetResult<Prisma.$ChapterPublishingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChapterPublishing that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterPublishingFindFirstOrThrowArgs} args - Arguments to find a ChapterPublishing
     * @example
     * // Get one ChapterPublishing
     * const chapterPublishing = await prisma.chapterPublishing.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChapterPublishingFindFirstOrThrowArgs>(args?: SelectSubset<T, ChapterPublishingFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChapterPublishingClient<$Result.GetResult<Prisma.$ChapterPublishingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChapterPublishings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterPublishingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChapterPublishings
     * const chapterPublishings = await prisma.chapterPublishing.findMany()
     * 
     * // Get first 10 ChapterPublishings
     * const chapterPublishings = await prisma.chapterPublishing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chapterPublishingWithIdOnly = await prisma.chapterPublishing.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChapterPublishingFindManyArgs>(args?: SelectSubset<T, ChapterPublishingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPublishingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChapterPublishing.
     * @param {ChapterPublishingCreateArgs} args - Arguments to create a ChapterPublishing.
     * @example
     * // Create one ChapterPublishing
     * const ChapterPublishing = await prisma.chapterPublishing.create({
     *   data: {
     *     // ... data to create a ChapterPublishing
     *   }
     * })
     * 
     */
    create<T extends ChapterPublishingCreateArgs>(args: SelectSubset<T, ChapterPublishingCreateArgs<ExtArgs>>): Prisma__ChapterPublishingClient<$Result.GetResult<Prisma.$ChapterPublishingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChapterPublishings.
     * @param {ChapterPublishingCreateManyArgs} args - Arguments to create many ChapterPublishings.
     * @example
     * // Create many ChapterPublishings
     * const chapterPublishing = await prisma.chapterPublishing.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChapterPublishingCreateManyArgs>(args?: SelectSubset<T, ChapterPublishingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChapterPublishing.
     * @param {ChapterPublishingDeleteArgs} args - Arguments to delete one ChapterPublishing.
     * @example
     * // Delete one ChapterPublishing
     * const ChapterPublishing = await prisma.chapterPublishing.delete({
     *   where: {
     *     // ... filter to delete one ChapterPublishing
     *   }
     * })
     * 
     */
    delete<T extends ChapterPublishingDeleteArgs>(args: SelectSubset<T, ChapterPublishingDeleteArgs<ExtArgs>>): Prisma__ChapterPublishingClient<$Result.GetResult<Prisma.$ChapterPublishingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChapterPublishing.
     * @param {ChapterPublishingUpdateArgs} args - Arguments to update one ChapterPublishing.
     * @example
     * // Update one ChapterPublishing
     * const chapterPublishing = await prisma.chapterPublishing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChapterPublishingUpdateArgs>(args: SelectSubset<T, ChapterPublishingUpdateArgs<ExtArgs>>): Prisma__ChapterPublishingClient<$Result.GetResult<Prisma.$ChapterPublishingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChapterPublishings.
     * @param {ChapterPublishingDeleteManyArgs} args - Arguments to filter ChapterPublishings to delete.
     * @example
     * // Delete a few ChapterPublishings
     * const { count } = await prisma.chapterPublishing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChapterPublishingDeleteManyArgs>(args?: SelectSubset<T, ChapterPublishingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChapterPublishings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterPublishingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChapterPublishings
     * const chapterPublishing = await prisma.chapterPublishing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChapterPublishingUpdateManyArgs>(args: SelectSubset<T, ChapterPublishingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChapterPublishing.
     * @param {ChapterPublishingUpsertArgs} args - Arguments to update or create a ChapterPublishing.
     * @example
     * // Update or create a ChapterPublishing
     * const chapterPublishing = await prisma.chapterPublishing.upsert({
     *   create: {
     *     // ... data to create a ChapterPublishing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChapterPublishing we want to update
     *   }
     * })
     */
    upsert<T extends ChapterPublishingUpsertArgs>(args: SelectSubset<T, ChapterPublishingUpsertArgs<ExtArgs>>): Prisma__ChapterPublishingClient<$Result.GetResult<Prisma.$ChapterPublishingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChapterPublishings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterPublishingCountArgs} args - Arguments to filter ChapterPublishings to count.
     * @example
     * // Count the number of ChapterPublishings
     * const count = await prisma.chapterPublishing.count({
     *   where: {
     *     // ... the filter for the ChapterPublishings we want to count
     *   }
     * })
    **/
    count<T extends ChapterPublishingCountArgs>(
      args?: Subset<T, ChapterPublishingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChapterPublishingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChapterPublishing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterPublishingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChapterPublishingAggregateArgs>(args: Subset<T, ChapterPublishingAggregateArgs>): Prisma.PrismaPromise<GetChapterPublishingAggregateType<T>>

    /**
     * Group by ChapterPublishing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterPublishingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChapterPublishingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChapterPublishingGroupByArgs['orderBy'] }
        : { orderBy?: ChapterPublishingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChapterPublishingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChapterPublishingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChapterPublishing model
   */
  readonly fields: ChapterPublishingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChapterPublishing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChapterPublishingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chapter<T extends ChapterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChapterDefaultArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChapterPublishing model
   */
  interface ChapterPublishingFieldRefs {
    readonly id: FieldRef<"ChapterPublishing", 'String'>
    readonly chapterId: FieldRef<"ChapterPublishing", 'String'>
    readonly platform: FieldRef<"ChapterPublishing", 'PublishingPlatform'>
    readonly status: FieldRef<"ChapterPublishing", 'PublishingStatus'>
    readonly platformId: FieldRef<"ChapterPublishing", 'String'>
    readonly publishedAt: FieldRef<"ChapterPublishing", 'DateTime'>
    readonly lastAttempt: FieldRef<"ChapterPublishing", 'DateTime'>
    readonly errorMessage: FieldRef<"ChapterPublishing", 'String'>
    readonly createdAt: FieldRef<"ChapterPublishing", 'DateTime'>
    readonly updatedAt: FieldRef<"ChapterPublishing", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChapterPublishing findUnique
   */
  export type ChapterPublishingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterPublishing
     */
    select?: ChapterPublishingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChapterPublishing
     */
    omit?: ChapterPublishingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterPublishingInclude<ExtArgs> | null
    /**
     * Filter, which ChapterPublishing to fetch.
     */
    where: ChapterPublishingWhereUniqueInput
  }

  /**
   * ChapterPublishing findUniqueOrThrow
   */
  export type ChapterPublishingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterPublishing
     */
    select?: ChapterPublishingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChapterPublishing
     */
    omit?: ChapterPublishingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterPublishingInclude<ExtArgs> | null
    /**
     * Filter, which ChapterPublishing to fetch.
     */
    where: ChapterPublishingWhereUniqueInput
  }

  /**
   * ChapterPublishing findFirst
   */
  export type ChapterPublishingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterPublishing
     */
    select?: ChapterPublishingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChapterPublishing
     */
    omit?: ChapterPublishingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterPublishingInclude<ExtArgs> | null
    /**
     * Filter, which ChapterPublishing to fetch.
     */
    where?: ChapterPublishingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChapterPublishings to fetch.
     */
    orderBy?: ChapterPublishingOrderByWithRelationInput | ChapterPublishingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChapterPublishings.
     */
    cursor?: ChapterPublishingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChapterPublishings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChapterPublishings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChapterPublishings.
     */
    distinct?: ChapterPublishingScalarFieldEnum | ChapterPublishingScalarFieldEnum[]
  }

  /**
   * ChapterPublishing findFirstOrThrow
   */
  export type ChapterPublishingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterPublishing
     */
    select?: ChapterPublishingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChapterPublishing
     */
    omit?: ChapterPublishingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterPublishingInclude<ExtArgs> | null
    /**
     * Filter, which ChapterPublishing to fetch.
     */
    where?: ChapterPublishingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChapterPublishings to fetch.
     */
    orderBy?: ChapterPublishingOrderByWithRelationInput | ChapterPublishingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChapterPublishings.
     */
    cursor?: ChapterPublishingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChapterPublishings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChapterPublishings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChapterPublishings.
     */
    distinct?: ChapterPublishingScalarFieldEnum | ChapterPublishingScalarFieldEnum[]
  }

  /**
   * ChapterPublishing findMany
   */
  export type ChapterPublishingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterPublishing
     */
    select?: ChapterPublishingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChapterPublishing
     */
    omit?: ChapterPublishingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterPublishingInclude<ExtArgs> | null
    /**
     * Filter, which ChapterPublishings to fetch.
     */
    where?: ChapterPublishingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChapterPublishings to fetch.
     */
    orderBy?: ChapterPublishingOrderByWithRelationInput | ChapterPublishingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChapterPublishings.
     */
    cursor?: ChapterPublishingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChapterPublishings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChapterPublishings.
     */
    skip?: number
    distinct?: ChapterPublishingScalarFieldEnum | ChapterPublishingScalarFieldEnum[]
  }

  /**
   * ChapterPublishing create
   */
  export type ChapterPublishingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterPublishing
     */
    select?: ChapterPublishingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChapterPublishing
     */
    omit?: ChapterPublishingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterPublishingInclude<ExtArgs> | null
    /**
     * The data needed to create a ChapterPublishing.
     */
    data: XOR<ChapterPublishingCreateInput, ChapterPublishingUncheckedCreateInput>
  }

  /**
   * ChapterPublishing createMany
   */
  export type ChapterPublishingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChapterPublishings.
     */
    data: ChapterPublishingCreateManyInput | ChapterPublishingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChapterPublishing update
   */
  export type ChapterPublishingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterPublishing
     */
    select?: ChapterPublishingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChapterPublishing
     */
    omit?: ChapterPublishingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterPublishingInclude<ExtArgs> | null
    /**
     * The data needed to update a ChapterPublishing.
     */
    data: XOR<ChapterPublishingUpdateInput, ChapterPublishingUncheckedUpdateInput>
    /**
     * Choose, which ChapterPublishing to update.
     */
    where: ChapterPublishingWhereUniqueInput
  }

  /**
   * ChapterPublishing updateMany
   */
  export type ChapterPublishingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChapterPublishings.
     */
    data: XOR<ChapterPublishingUpdateManyMutationInput, ChapterPublishingUncheckedUpdateManyInput>
    /**
     * Filter which ChapterPublishings to update
     */
    where?: ChapterPublishingWhereInput
    /**
     * Limit how many ChapterPublishings to update.
     */
    limit?: number
  }

  /**
   * ChapterPublishing upsert
   */
  export type ChapterPublishingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterPublishing
     */
    select?: ChapterPublishingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChapterPublishing
     */
    omit?: ChapterPublishingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterPublishingInclude<ExtArgs> | null
    /**
     * The filter to search for the ChapterPublishing to update in case it exists.
     */
    where: ChapterPublishingWhereUniqueInput
    /**
     * In case the ChapterPublishing found by the `where` argument doesn't exist, create a new ChapterPublishing with this data.
     */
    create: XOR<ChapterPublishingCreateInput, ChapterPublishingUncheckedCreateInput>
    /**
     * In case the ChapterPublishing was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChapterPublishingUpdateInput, ChapterPublishingUncheckedUpdateInput>
  }

  /**
   * ChapterPublishing delete
   */
  export type ChapterPublishingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterPublishing
     */
    select?: ChapterPublishingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChapterPublishing
     */
    omit?: ChapterPublishingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterPublishingInclude<ExtArgs> | null
    /**
     * Filter which ChapterPublishing to delete.
     */
    where: ChapterPublishingWhereUniqueInput
  }

  /**
   * ChapterPublishing deleteMany
   */
  export type ChapterPublishingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChapterPublishings to delete
     */
    where?: ChapterPublishingWhereInput
    /**
     * Limit how many ChapterPublishings to delete.
     */
    limit?: number
  }

  /**
   * ChapterPublishing without action
   */
  export type ChapterPublishingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterPublishing
     */
    select?: ChapterPublishingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChapterPublishing
     */
    omit?: ChapterPublishingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterPublishingInclude<ExtArgs> | null
  }


  /**
   * Model Character
   */

  export type AggregateCharacter = {
    _count: CharacterCountAggregateOutputType | null
    _avg: CharacterAvgAggregateOutputType | null
    _sum: CharacterSumAggregateOutputType | null
    _min: CharacterMinAggregateOutputType | null
    _max: CharacterMaxAggregateOutputType | null
  }

  export type CharacterAvgAggregateOutputType = {
    height: number | null
  }

  export type CharacterSumAggregateOutputType = {
    height: number | null
  }

  export type CharacterMinAggregateOutputType = {
    id: string | null
    storyId: string | null
    pictureFileId: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    nickname: string | null
    summary: string | null
    background: string | null
    personality: string | null
    personalityQuirks: string | null
    likes: string | null
    dislikes: string | null
    age: string | null
    gender: string | null
    sexualOrientation: string | null
    height: number | null
    hairColor: string | null
    eyeColor: string | null
    distinguishingFeatures: string | null
    writingStyle: string | null
    isMainCharacter: boolean | null
    laterVersionOfId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CharacterMaxAggregateOutputType = {
    id: string | null
    storyId: string | null
    pictureFileId: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    nickname: string | null
    summary: string | null
    background: string | null
    personality: string | null
    personalityQuirks: string | null
    likes: string | null
    dislikes: string | null
    age: string | null
    gender: string | null
    sexualOrientation: string | null
    height: number | null
    hairColor: string | null
    eyeColor: string | null
    distinguishingFeatures: string | null
    writingStyle: string | null
    isMainCharacter: boolean | null
    laterVersionOfId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CharacterCountAggregateOutputType = {
    id: number
    storyId: number
    pictureFileId: number
    firstName: number
    middleName: number
    lastName: number
    nickname: number
    summary: number
    background: number
    personality: number
    personalityQuirks: number
    likes: number
    dislikes: number
    age: number
    gender: number
    sexualOrientation: number
    height: number
    hairColor: number
    eyeColor: number
    distinguishingFeatures: number
    writingStyle: number
    isMainCharacter: number
    laterVersionOfId: number
    significantActions: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CharacterAvgAggregateInputType = {
    height?: true
  }

  export type CharacterSumAggregateInputType = {
    height?: true
  }

  export type CharacterMinAggregateInputType = {
    id?: true
    storyId?: true
    pictureFileId?: true
    firstName?: true
    middleName?: true
    lastName?: true
    nickname?: true
    summary?: true
    background?: true
    personality?: true
    personalityQuirks?: true
    likes?: true
    dislikes?: true
    age?: true
    gender?: true
    sexualOrientation?: true
    height?: true
    hairColor?: true
    eyeColor?: true
    distinguishingFeatures?: true
    writingStyle?: true
    isMainCharacter?: true
    laterVersionOfId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CharacterMaxAggregateInputType = {
    id?: true
    storyId?: true
    pictureFileId?: true
    firstName?: true
    middleName?: true
    lastName?: true
    nickname?: true
    summary?: true
    background?: true
    personality?: true
    personalityQuirks?: true
    likes?: true
    dislikes?: true
    age?: true
    gender?: true
    sexualOrientation?: true
    height?: true
    hairColor?: true
    eyeColor?: true
    distinguishingFeatures?: true
    writingStyle?: true
    isMainCharacter?: true
    laterVersionOfId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CharacterCountAggregateInputType = {
    id?: true
    storyId?: true
    pictureFileId?: true
    firstName?: true
    middleName?: true
    lastName?: true
    nickname?: true
    summary?: true
    background?: true
    personality?: true
    personalityQuirks?: true
    likes?: true
    dislikes?: true
    age?: true
    gender?: true
    sexualOrientation?: true
    height?: true
    hairColor?: true
    eyeColor?: true
    distinguishingFeatures?: true
    writingStyle?: true
    isMainCharacter?: true
    laterVersionOfId?: true
    significantActions?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CharacterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Character to aggregate.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Characters
    **/
    _count?: true | CharacterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CharacterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CharacterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CharacterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CharacterMaxAggregateInputType
  }

  export type GetCharacterAggregateType<T extends CharacterAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacter[P]>
      : GetScalarType<T[P], AggregateCharacter[P]>
  }




  export type CharacterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterWhereInput
    orderBy?: CharacterOrderByWithAggregationInput | CharacterOrderByWithAggregationInput[]
    by: CharacterScalarFieldEnum[] | CharacterScalarFieldEnum
    having?: CharacterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CharacterCountAggregateInputType | true
    _avg?: CharacterAvgAggregateInputType
    _sum?: CharacterSumAggregateInputType
    _min?: CharacterMinAggregateInputType
    _max?: CharacterMaxAggregateInputType
  }

  export type CharacterGroupByOutputType = {
    id: string
    storyId: string
    pictureFileId: string | null
    firstName: string
    middleName: string | null
    lastName: string | null
    nickname: string | null
    summary: string | null
    background: string | null
    personality: string | null
    personalityQuirks: string | null
    likes: string | null
    dislikes: string | null
    age: string | null
    gender: string | null
    sexualOrientation: string | null
    height: number | null
    hairColor: string | null
    eyeColor: string | null
    distinguishingFeatures: string | null
    writingStyle: string | null
    isMainCharacter: boolean
    laterVersionOfId: string | null
    significantActions: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: CharacterCountAggregateOutputType | null
    _avg: CharacterAvgAggregateOutputType | null
    _sum: CharacterSumAggregateOutputType | null
    _min: CharacterMinAggregateOutputType | null
    _max: CharacterMaxAggregateOutputType | null
  }

  type GetCharacterGroupByPayload<T extends CharacterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CharacterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CharacterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CharacterGroupByOutputType[P]>
            : GetScalarType<T[P], CharacterGroupByOutputType[P]>
        }
      >
    >


  export type CharacterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    storyId?: boolean
    pictureFileId?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    nickname?: boolean
    summary?: boolean
    background?: boolean
    personality?: boolean
    personalityQuirks?: boolean
    likes?: boolean
    dislikes?: boolean
    age?: boolean
    gender?: boolean
    sexualOrientation?: boolean
    height?: boolean
    hairColor?: boolean
    eyeColor?: boolean
    distinguishingFeatures?: boolean
    writingStyle?: boolean
    isMainCharacter?: boolean
    laterVersionOfId?: boolean
    significantActions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    story?: boolean | StoryDefaultArgs<ExtArgs>
    pictureFile?: boolean | Character$pictureFileArgs<ExtArgs>
    laterVersionOf?: boolean | Character$laterVersionOfArgs<ExtArgs>
    previousVersion?: boolean | Character$previousVersionArgs<ExtArgs>
    defaultProtagonistForStory?: boolean | Character$defaultProtagonistForStoryArgs<ExtArgs>
    sceneProtagonistIn?: boolean | Character$sceneProtagonistInArgs<ExtArgs>
    participatingInScenes?: boolean | Character$participatingInScenesArgs<ExtArgs>
    referredInScenes?: boolean | Character$referredInScenesArgs<ExtArgs>
    _count?: boolean | CharacterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["character"]>



  export type CharacterSelectScalar = {
    id?: boolean
    storyId?: boolean
    pictureFileId?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    nickname?: boolean
    summary?: boolean
    background?: boolean
    personality?: boolean
    personalityQuirks?: boolean
    likes?: boolean
    dislikes?: boolean
    age?: boolean
    gender?: boolean
    sexualOrientation?: boolean
    height?: boolean
    hairColor?: boolean
    eyeColor?: boolean
    distinguishingFeatures?: boolean
    writingStyle?: boolean
    isMainCharacter?: boolean
    laterVersionOfId?: boolean
    significantActions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CharacterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "storyId" | "pictureFileId" | "firstName" | "middleName" | "lastName" | "nickname" | "summary" | "background" | "personality" | "personalityQuirks" | "likes" | "dislikes" | "age" | "gender" | "sexualOrientation" | "height" | "hairColor" | "eyeColor" | "distinguishingFeatures" | "writingStyle" | "isMainCharacter" | "laterVersionOfId" | "significantActions" | "createdAt" | "updatedAt", ExtArgs["result"]["character"]>
  export type CharacterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    story?: boolean | StoryDefaultArgs<ExtArgs>
    pictureFile?: boolean | Character$pictureFileArgs<ExtArgs>
    laterVersionOf?: boolean | Character$laterVersionOfArgs<ExtArgs>
    previousVersion?: boolean | Character$previousVersionArgs<ExtArgs>
    defaultProtagonistForStory?: boolean | Character$defaultProtagonistForStoryArgs<ExtArgs>
    sceneProtagonistIn?: boolean | Character$sceneProtagonistInArgs<ExtArgs>
    participatingInScenes?: boolean | Character$participatingInScenesArgs<ExtArgs>
    referredInScenes?: boolean | Character$referredInScenesArgs<ExtArgs>
    _count?: boolean | CharacterCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CharacterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Character"
    objects: {
      story: Prisma.$StoryPayload<ExtArgs>
      pictureFile: Prisma.$FilePayload<ExtArgs> | null
      laterVersionOf: Prisma.$CharacterPayload<ExtArgs> | null
      previousVersion: Prisma.$CharacterPayload<ExtArgs>[]
      defaultProtagonistForStory: Prisma.$StoryPayload<ExtArgs>[]
      sceneProtagonistIn: Prisma.$ScenePayload<ExtArgs>[]
      participatingInScenes: Prisma.$SceneCharacterPayload<ExtArgs>[]
      referredInScenes: Prisma.$SceneReferredCharacterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      storyId: string
      pictureFileId: string | null
      firstName: string
      middleName: string | null
      lastName: string | null
      nickname: string | null
      summary: string | null
      background: string | null
      personality: string | null
      personalityQuirks: string | null
      likes: string | null
      dislikes: string | null
      age: string | null
      gender: string | null
      sexualOrientation: string | null
      height: number | null
      hairColor: string | null
      eyeColor: string | null
      distinguishingFeatures: string | null
      writingStyle: string | null
      isMainCharacter: boolean
      laterVersionOfId: string | null
      significantActions: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["character"]>
    composites: {}
  }

  type CharacterGetPayload<S extends boolean | null | undefined | CharacterDefaultArgs> = $Result.GetResult<Prisma.$CharacterPayload, S>

  type CharacterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CharacterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CharacterCountAggregateInputType | true
    }

  export interface CharacterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Character'], meta: { name: 'Character' } }
    /**
     * Find zero or one Character that matches the filter.
     * @param {CharacterFindUniqueArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CharacterFindUniqueArgs>(args: SelectSubset<T, CharacterFindUniqueArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Character that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CharacterFindUniqueOrThrowArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CharacterFindUniqueOrThrowArgs>(args: SelectSubset<T, CharacterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Character that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindFirstArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CharacterFindFirstArgs>(args?: SelectSubset<T, CharacterFindFirstArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Character that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindFirstOrThrowArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CharacterFindFirstOrThrowArgs>(args?: SelectSubset<T, CharacterFindFirstOrThrowArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Characters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Characters
     * const characters = await prisma.character.findMany()
     * 
     * // Get first 10 Characters
     * const characters = await prisma.character.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const characterWithIdOnly = await prisma.character.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CharacterFindManyArgs>(args?: SelectSubset<T, CharacterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Character.
     * @param {CharacterCreateArgs} args - Arguments to create a Character.
     * @example
     * // Create one Character
     * const Character = await prisma.character.create({
     *   data: {
     *     // ... data to create a Character
     *   }
     * })
     * 
     */
    create<T extends CharacterCreateArgs>(args: SelectSubset<T, CharacterCreateArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Characters.
     * @param {CharacterCreateManyArgs} args - Arguments to create many Characters.
     * @example
     * // Create many Characters
     * const character = await prisma.character.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CharacterCreateManyArgs>(args?: SelectSubset<T, CharacterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Character.
     * @param {CharacterDeleteArgs} args - Arguments to delete one Character.
     * @example
     * // Delete one Character
     * const Character = await prisma.character.delete({
     *   where: {
     *     // ... filter to delete one Character
     *   }
     * })
     * 
     */
    delete<T extends CharacterDeleteArgs>(args: SelectSubset<T, CharacterDeleteArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Character.
     * @param {CharacterUpdateArgs} args - Arguments to update one Character.
     * @example
     * // Update one Character
     * const character = await prisma.character.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CharacterUpdateArgs>(args: SelectSubset<T, CharacterUpdateArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Characters.
     * @param {CharacterDeleteManyArgs} args - Arguments to filter Characters to delete.
     * @example
     * // Delete a few Characters
     * const { count } = await prisma.character.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CharacterDeleteManyArgs>(args?: SelectSubset<T, CharacterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Characters
     * const character = await prisma.character.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CharacterUpdateManyArgs>(args: SelectSubset<T, CharacterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Character.
     * @param {CharacterUpsertArgs} args - Arguments to update or create a Character.
     * @example
     * // Update or create a Character
     * const character = await prisma.character.upsert({
     *   create: {
     *     // ... data to create a Character
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Character we want to update
     *   }
     * })
     */
    upsert<T extends CharacterUpsertArgs>(args: SelectSubset<T, CharacterUpsertArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterCountArgs} args - Arguments to filter Characters to count.
     * @example
     * // Count the number of Characters
     * const count = await prisma.character.count({
     *   where: {
     *     // ... the filter for the Characters we want to count
     *   }
     * })
    **/
    count<T extends CharacterCountArgs>(
      args?: Subset<T, CharacterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CharacterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Character.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CharacterAggregateArgs>(args: Subset<T, CharacterAggregateArgs>): Prisma.PrismaPromise<GetCharacterAggregateType<T>>

    /**
     * Group by Character.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CharacterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CharacterGroupByArgs['orderBy'] }
        : { orderBy?: CharacterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CharacterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Character model
   */
  readonly fields: CharacterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Character.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CharacterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    story<T extends StoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoryDefaultArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    pictureFile<T extends Character$pictureFileArgs<ExtArgs> = {}>(args?: Subset<T, Character$pictureFileArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    laterVersionOf<T extends Character$laterVersionOfArgs<ExtArgs> = {}>(args?: Subset<T, Character$laterVersionOfArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    previousVersion<T extends Character$previousVersionArgs<ExtArgs> = {}>(args?: Subset<T, Character$previousVersionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    defaultProtagonistForStory<T extends Character$defaultProtagonistForStoryArgs<ExtArgs> = {}>(args?: Subset<T, Character$defaultProtagonistForStoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sceneProtagonistIn<T extends Character$sceneProtagonistInArgs<ExtArgs> = {}>(args?: Subset<T, Character$sceneProtagonistInArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    participatingInScenes<T extends Character$participatingInScenesArgs<ExtArgs> = {}>(args?: Subset<T, Character$participatingInScenesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneCharacterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    referredInScenes<T extends Character$referredInScenesArgs<ExtArgs> = {}>(args?: Subset<T, Character$referredInScenesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneReferredCharacterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Character model
   */
  interface CharacterFieldRefs {
    readonly id: FieldRef<"Character", 'String'>
    readonly storyId: FieldRef<"Character", 'String'>
    readonly pictureFileId: FieldRef<"Character", 'String'>
    readonly firstName: FieldRef<"Character", 'String'>
    readonly middleName: FieldRef<"Character", 'String'>
    readonly lastName: FieldRef<"Character", 'String'>
    readonly nickname: FieldRef<"Character", 'String'>
    readonly summary: FieldRef<"Character", 'String'>
    readonly background: FieldRef<"Character", 'String'>
    readonly personality: FieldRef<"Character", 'String'>
    readonly personalityQuirks: FieldRef<"Character", 'String'>
    readonly likes: FieldRef<"Character", 'String'>
    readonly dislikes: FieldRef<"Character", 'String'>
    readonly age: FieldRef<"Character", 'String'>
    readonly gender: FieldRef<"Character", 'String'>
    readonly sexualOrientation: FieldRef<"Character", 'String'>
    readonly height: FieldRef<"Character", 'Int'>
    readonly hairColor: FieldRef<"Character", 'String'>
    readonly eyeColor: FieldRef<"Character", 'String'>
    readonly distinguishingFeatures: FieldRef<"Character", 'String'>
    readonly writingStyle: FieldRef<"Character", 'String'>
    readonly isMainCharacter: FieldRef<"Character", 'Boolean'>
    readonly laterVersionOfId: FieldRef<"Character", 'String'>
    readonly significantActions: FieldRef<"Character", 'Json'>
    readonly createdAt: FieldRef<"Character", 'DateTime'>
    readonly updatedAt: FieldRef<"Character", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Character findUnique
   */
  export type CharacterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character findUniqueOrThrow
   */
  export type CharacterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character findFirst
   */
  export type CharacterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Characters.
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Characters.
     */
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Character findFirstOrThrow
   */
  export type CharacterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Characters.
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Characters.
     */
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Character findMany
   */
  export type CharacterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Characters to fetch.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Characters.
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Character create
   */
  export type CharacterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * The data needed to create a Character.
     */
    data: XOR<CharacterCreateInput, CharacterUncheckedCreateInput>
  }

  /**
   * Character createMany
   */
  export type CharacterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Characters.
     */
    data: CharacterCreateManyInput | CharacterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Character update
   */
  export type CharacterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * The data needed to update a Character.
     */
    data: XOR<CharacterUpdateInput, CharacterUncheckedUpdateInput>
    /**
     * Choose, which Character to update.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character updateMany
   */
  export type CharacterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Characters.
     */
    data: XOR<CharacterUpdateManyMutationInput, CharacterUncheckedUpdateManyInput>
    /**
     * Filter which Characters to update
     */
    where?: CharacterWhereInput
    /**
     * Limit how many Characters to update.
     */
    limit?: number
  }

  /**
   * Character upsert
   */
  export type CharacterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * The filter to search for the Character to update in case it exists.
     */
    where: CharacterWhereUniqueInput
    /**
     * In case the Character found by the `where` argument doesn't exist, create a new Character with this data.
     */
    create: XOR<CharacterCreateInput, CharacterUncheckedCreateInput>
    /**
     * In case the Character was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CharacterUpdateInput, CharacterUncheckedUpdateInput>
  }

  /**
   * Character delete
   */
  export type CharacterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter which Character to delete.
     */
    where: CharacterWhereUniqueInput
  }

  /**
   * Character deleteMany
   */
  export type CharacterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Characters to delete
     */
    where?: CharacterWhereInput
    /**
     * Limit how many Characters to delete.
     */
    limit?: number
  }

  /**
   * Character.pictureFile
   */
  export type Character$pictureFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
  }

  /**
   * Character.laterVersionOf
   */
  export type Character$laterVersionOfArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    where?: CharacterWhereInput
  }

  /**
   * Character.previousVersion
   */
  export type Character$previousVersionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
    where?: CharacterWhereInput
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    cursor?: CharacterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }

  /**
   * Character.defaultProtagonistForStory
   */
  export type Character$defaultProtagonistForStoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    where?: StoryWhereInput
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    cursor?: StoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }

  /**
   * Character.sceneProtagonistIn
   */
  export type Character$sceneProtagonistInArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    where?: SceneWhereInput
    orderBy?: SceneOrderByWithRelationInput | SceneOrderByWithRelationInput[]
    cursor?: SceneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SceneScalarFieldEnum | SceneScalarFieldEnum[]
  }

  /**
   * Character.participatingInScenes
   */
  export type Character$participatingInScenesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneCharacter
     */
    select?: SceneCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneCharacter
     */
    omit?: SceneCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneCharacterInclude<ExtArgs> | null
    where?: SceneCharacterWhereInput
    orderBy?: SceneCharacterOrderByWithRelationInput | SceneCharacterOrderByWithRelationInput[]
    cursor?: SceneCharacterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SceneCharacterScalarFieldEnum | SceneCharacterScalarFieldEnum[]
  }

  /**
   * Character.referredInScenes
   */
  export type Character$referredInScenesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneReferredCharacter
     */
    select?: SceneReferredCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneReferredCharacter
     */
    omit?: SceneReferredCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneReferredCharacterInclude<ExtArgs> | null
    where?: SceneReferredCharacterWhereInput
    orderBy?: SceneReferredCharacterOrderByWithRelationInput | SceneReferredCharacterOrderByWithRelationInput[]
    cursor?: SceneReferredCharacterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SceneReferredCharacterScalarFieldEnum | SceneReferredCharacterScalarFieldEnum[]
  }

  /**
   * Character without action
   */
  export type CharacterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Character
     */
    omit?: CharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacterInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationMinAggregateOutputType = {
    id: string | null
    storyId: string | null
    name: string | null
    pictureFileId: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationMaxAggregateOutputType = {
    id: string | null
    storyId: string | null
    name: string | null
    pictureFileId: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    storyId: number
    name: number
    pictureFileId: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LocationMinAggregateInputType = {
    id?: true
    storyId?: true
    name?: true
    pictureFileId?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    storyId?: true
    name?: true
    pictureFileId?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    storyId?: true
    name?: true
    pictureFileId?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: string
    storyId: string
    name: string
    pictureFileId: string | null
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: LocationCountAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    storyId?: boolean
    name?: boolean
    pictureFileId?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    story?: boolean | StoryDefaultArgs<ExtArgs>
    pictureFile?: boolean | Location$pictureFileArgs<ExtArgs>
    scenes?: boolean | Location$scenesArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>



  export type LocationSelectScalar = {
    id?: boolean
    storyId?: boolean
    name?: boolean
    pictureFileId?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "storyId" | "name" | "pictureFileId" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["location"]>
  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    story?: boolean | StoryDefaultArgs<ExtArgs>
    pictureFile?: boolean | Location$pictureFileArgs<ExtArgs>
    scenes?: boolean | Location$scenesArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      story: Prisma.$StoryPayload<ExtArgs>
      pictureFile: Prisma.$FilePayload<ExtArgs> | null
      scenes: Prisma.$ScenePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      storyId: string
      name: string
      pictureFileId: string | null
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    story<T extends StoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoryDefaultArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    pictureFile<T extends Location$pictureFileArgs<ExtArgs> = {}>(args?: Subset<T, Location$pictureFileArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    scenes<T extends Location$scenesArgs<ExtArgs> = {}>(args?: Subset<T, Location$scenesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'String'>
    readonly storyId: FieldRef<"Location", 'String'>
    readonly name: FieldRef<"Location", 'String'>
    readonly pictureFileId: FieldRef<"Location", 'String'>
    readonly description: FieldRef<"Location", 'String'>
    readonly createdAt: FieldRef<"Location", 'DateTime'>
    readonly updatedAt: FieldRef<"Location", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to update.
     */
    limit?: number
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to delete.
     */
    limit?: number
  }

  /**
   * Location.pictureFile
   */
  export type Location$pictureFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
  }

  /**
   * Location.scenes
   */
  export type Location$scenesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scene
     */
    select?: SceneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scene
     */
    omit?: SceneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneInclude<ExtArgs> | null
    where?: SceneWhereInput
    orderBy?: SceneOrderByWithRelationInput | SceneOrderByWithRelationInput[]
    cursor?: SceneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SceneScalarFieldEnum | SceneScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model PlotPoint
   */

  export type AggregatePlotPoint = {
    _count: PlotPointCountAggregateOutputType | null
    _min: PlotPointMinAggregateOutputType | null
    _max: PlotPointMaxAggregateOutputType | null
  }

  export type PlotPointMinAggregateOutputType = {
    id: string | null
    storyId: string | null
    title: string | null
    summary: string | null
    state: $Enums.PlotPointState | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlotPointMaxAggregateOutputType = {
    id: string | null
    storyId: string | null
    title: string | null
    summary: string | null
    state: $Enums.PlotPointState | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlotPointCountAggregateOutputType = {
    id: number
    storyId: number
    title: number
    summary: number
    state: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlotPointMinAggregateInputType = {
    id?: true
    storyId?: true
    title?: true
    summary?: true
    state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlotPointMaxAggregateInputType = {
    id?: true
    storyId?: true
    title?: true
    summary?: true
    state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlotPointCountAggregateInputType = {
    id?: true
    storyId?: true
    title?: true
    summary?: true
    state?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlotPointAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlotPoint to aggregate.
     */
    where?: PlotPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlotPoints to fetch.
     */
    orderBy?: PlotPointOrderByWithRelationInput | PlotPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlotPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlotPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlotPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlotPoints
    **/
    _count?: true | PlotPointCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlotPointMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlotPointMaxAggregateInputType
  }

  export type GetPlotPointAggregateType<T extends PlotPointAggregateArgs> = {
        [P in keyof T & keyof AggregatePlotPoint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlotPoint[P]>
      : GetScalarType<T[P], AggregatePlotPoint[P]>
  }




  export type PlotPointGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlotPointWhereInput
    orderBy?: PlotPointOrderByWithAggregationInput | PlotPointOrderByWithAggregationInput[]
    by: PlotPointScalarFieldEnum[] | PlotPointScalarFieldEnum
    having?: PlotPointScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlotPointCountAggregateInputType | true
    _min?: PlotPointMinAggregateInputType
    _max?: PlotPointMaxAggregateInputType
  }

  export type PlotPointGroupByOutputType = {
    id: string
    storyId: string
    title: string
    summary: string | null
    state: $Enums.PlotPointState
    createdAt: Date
    updatedAt: Date
    _count: PlotPointCountAggregateOutputType | null
    _min: PlotPointMinAggregateOutputType | null
    _max: PlotPointMaxAggregateOutputType | null
  }

  type GetPlotPointGroupByPayload<T extends PlotPointGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlotPointGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlotPointGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlotPointGroupByOutputType[P]>
            : GetScalarType<T[P], PlotPointGroupByOutputType[P]>
        }
      >
    >


  export type PlotPointSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    storyId?: boolean
    title?: boolean
    summary?: boolean
    state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    story?: boolean | StoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plotPoint"]>



  export type PlotPointSelectScalar = {
    id?: boolean
    storyId?: boolean
    title?: boolean
    summary?: boolean
    state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PlotPointOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "storyId" | "title" | "summary" | "state" | "createdAt" | "updatedAt", ExtArgs["result"]["plotPoint"]>
  export type PlotPointInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    story?: boolean | StoryDefaultArgs<ExtArgs>
  }

  export type $PlotPointPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlotPoint"
    objects: {
      story: Prisma.$StoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      storyId: string
      title: string
      summary: string | null
      state: $Enums.PlotPointState
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["plotPoint"]>
    composites: {}
  }

  type PlotPointGetPayload<S extends boolean | null | undefined | PlotPointDefaultArgs> = $Result.GetResult<Prisma.$PlotPointPayload, S>

  type PlotPointCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlotPointFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlotPointCountAggregateInputType | true
    }

  export interface PlotPointDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlotPoint'], meta: { name: 'PlotPoint' } }
    /**
     * Find zero or one PlotPoint that matches the filter.
     * @param {PlotPointFindUniqueArgs} args - Arguments to find a PlotPoint
     * @example
     * // Get one PlotPoint
     * const plotPoint = await prisma.plotPoint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlotPointFindUniqueArgs>(args: SelectSubset<T, PlotPointFindUniqueArgs<ExtArgs>>): Prisma__PlotPointClient<$Result.GetResult<Prisma.$PlotPointPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlotPoint that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlotPointFindUniqueOrThrowArgs} args - Arguments to find a PlotPoint
     * @example
     * // Get one PlotPoint
     * const plotPoint = await prisma.plotPoint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlotPointFindUniqueOrThrowArgs>(args: SelectSubset<T, PlotPointFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlotPointClient<$Result.GetResult<Prisma.$PlotPointPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlotPoint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlotPointFindFirstArgs} args - Arguments to find a PlotPoint
     * @example
     * // Get one PlotPoint
     * const plotPoint = await prisma.plotPoint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlotPointFindFirstArgs>(args?: SelectSubset<T, PlotPointFindFirstArgs<ExtArgs>>): Prisma__PlotPointClient<$Result.GetResult<Prisma.$PlotPointPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlotPoint that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlotPointFindFirstOrThrowArgs} args - Arguments to find a PlotPoint
     * @example
     * // Get one PlotPoint
     * const plotPoint = await prisma.plotPoint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlotPointFindFirstOrThrowArgs>(args?: SelectSubset<T, PlotPointFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlotPointClient<$Result.GetResult<Prisma.$PlotPointPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlotPoints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlotPointFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlotPoints
     * const plotPoints = await prisma.plotPoint.findMany()
     * 
     * // Get first 10 PlotPoints
     * const plotPoints = await prisma.plotPoint.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plotPointWithIdOnly = await prisma.plotPoint.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlotPointFindManyArgs>(args?: SelectSubset<T, PlotPointFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlotPointPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlotPoint.
     * @param {PlotPointCreateArgs} args - Arguments to create a PlotPoint.
     * @example
     * // Create one PlotPoint
     * const PlotPoint = await prisma.plotPoint.create({
     *   data: {
     *     // ... data to create a PlotPoint
     *   }
     * })
     * 
     */
    create<T extends PlotPointCreateArgs>(args: SelectSubset<T, PlotPointCreateArgs<ExtArgs>>): Prisma__PlotPointClient<$Result.GetResult<Prisma.$PlotPointPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlotPoints.
     * @param {PlotPointCreateManyArgs} args - Arguments to create many PlotPoints.
     * @example
     * // Create many PlotPoints
     * const plotPoint = await prisma.plotPoint.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlotPointCreateManyArgs>(args?: SelectSubset<T, PlotPointCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlotPoint.
     * @param {PlotPointDeleteArgs} args - Arguments to delete one PlotPoint.
     * @example
     * // Delete one PlotPoint
     * const PlotPoint = await prisma.plotPoint.delete({
     *   where: {
     *     // ... filter to delete one PlotPoint
     *   }
     * })
     * 
     */
    delete<T extends PlotPointDeleteArgs>(args: SelectSubset<T, PlotPointDeleteArgs<ExtArgs>>): Prisma__PlotPointClient<$Result.GetResult<Prisma.$PlotPointPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlotPoint.
     * @param {PlotPointUpdateArgs} args - Arguments to update one PlotPoint.
     * @example
     * // Update one PlotPoint
     * const plotPoint = await prisma.plotPoint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlotPointUpdateArgs>(args: SelectSubset<T, PlotPointUpdateArgs<ExtArgs>>): Prisma__PlotPointClient<$Result.GetResult<Prisma.$PlotPointPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlotPoints.
     * @param {PlotPointDeleteManyArgs} args - Arguments to filter PlotPoints to delete.
     * @example
     * // Delete a few PlotPoints
     * const { count } = await prisma.plotPoint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlotPointDeleteManyArgs>(args?: SelectSubset<T, PlotPointDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlotPoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlotPointUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlotPoints
     * const plotPoint = await prisma.plotPoint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlotPointUpdateManyArgs>(args: SelectSubset<T, PlotPointUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlotPoint.
     * @param {PlotPointUpsertArgs} args - Arguments to update or create a PlotPoint.
     * @example
     * // Update or create a PlotPoint
     * const plotPoint = await prisma.plotPoint.upsert({
     *   create: {
     *     // ... data to create a PlotPoint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlotPoint we want to update
     *   }
     * })
     */
    upsert<T extends PlotPointUpsertArgs>(args: SelectSubset<T, PlotPointUpsertArgs<ExtArgs>>): Prisma__PlotPointClient<$Result.GetResult<Prisma.$PlotPointPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlotPoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlotPointCountArgs} args - Arguments to filter PlotPoints to count.
     * @example
     * // Count the number of PlotPoints
     * const count = await prisma.plotPoint.count({
     *   where: {
     *     // ... the filter for the PlotPoints we want to count
     *   }
     * })
    **/
    count<T extends PlotPointCountArgs>(
      args?: Subset<T, PlotPointCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlotPointCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlotPoint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlotPointAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlotPointAggregateArgs>(args: Subset<T, PlotPointAggregateArgs>): Prisma.PrismaPromise<GetPlotPointAggregateType<T>>

    /**
     * Group by PlotPoint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlotPointGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlotPointGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlotPointGroupByArgs['orderBy'] }
        : { orderBy?: PlotPointGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlotPointGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlotPointGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlotPoint model
   */
  readonly fields: PlotPointFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlotPoint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlotPointClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    story<T extends StoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoryDefaultArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlotPoint model
   */
  interface PlotPointFieldRefs {
    readonly id: FieldRef<"PlotPoint", 'String'>
    readonly storyId: FieldRef<"PlotPoint", 'String'>
    readonly title: FieldRef<"PlotPoint", 'String'>
    readonly summary: FieldRef<"PlotPoint", 'String'>
    readonly state: FieldRef<"PlotPoint", 'PlotPointState'>
    readonly createdAt: FieldRef<"PlotPoint", 'DateTime'>
    readonly updatedAt: FieldRef<"PlotPoint", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlotPoint findUnique
   */
  export type PlotPointFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlotPoint
     */
    select?: PlotPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlotPoint
     */
    omit?: PlotPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlotPointInclude<ExtArgs> | null
    /**
     * Filter, which PlotPoint to fetch.
     */
    where: PlotPointWhereUniqueInput
  }

  /**
   * PlotPoint findUniqueOrThrow
   */
  export type PlotPointFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlotPoint
     */
    select?: PlotPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlotPoint
     */
    omit?: PlotPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlotPointInclude<ExtArgs> | null
    /**
     * Filter, which PlotPoint to fetch.
     */
    where: PlotPointWhereUniqueInput
  }

  /**
   * PlotPoint findFirst
   */
  export type PlotPointFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlotPoint
     */
    select?: PlotPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlotPoint
     */
    omit?: PlotPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlotPointInclude<ExtArgs> | null
    /**
     * Filter, which PlotPoint to fetch.
     */
    where?: PlotPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlotPoints to fetch.
     */
    orderBy?: PlotPointOrderByWithRelationInput | PlotPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlotPoints.
     */
    cursor?: PlotPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlotPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlotPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlotPoints.
     */
    distinct?: PlotPointScalarFieldEnum | PlotPointScalarFieldEnum[]
  }

  /**
   * PlotPoint findFirstOrThrow
   */
  export type PlotPointFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlotPoint
     */
    select?: PlotPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlotPoint
     */
    omit?: PlotPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlotPointInclude<ExtArgs> | null
    /**
     * Filter, which PlotPoint to fetch.
     */
    where?: PlotPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlotPoints to fetch.
     */
    orderBy?: PlotPointOrderByWithRelationInput | PlotPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlotPoints.
     */
    cursor?: PlotPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlotPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlotPoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlotPoints.
     */
    distinct?: PlotPointScalarFieldEnum | PlotPointScalarFieldEnum[]
  }

  /**
   * PlotPoint findMany
   */
  export type PlotPointFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlotPoint
     */
    select?: PlotPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlotPoint
     */
    omit?: PlotPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlotPointInclude<ExtArgs> | null
    /**
     * Filter, which PlotPoints to fetch.
     */
    where?: PlotPointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlotPoints to fetch.
     */
    orderBy?: PlotPointOrderByWithRelationInput | PlotPointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlotPoints.
     */
    cursor?: PlotPointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlotPoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlotPoints.
     */
    skip?: number
    distinct?: PlotPointScalarFieldEnum | PlotPointScalarFieldEnum[]
  }

  /**
   * PlotPoint create
   */
  export type PlotPointCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlotPoint
     */
    select?: PlotPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlotPoint
     */
    omit?: PlotPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlotPointInclude<ExtArgs> | null
    /**
     * The data needed to create a PlotPoint.
     */
    data: XOR<PlotPointCreateInput, PlotPointUncheckedCreateInput>
  }

  /**
   * PlotPoint createMany
   */
  export type PlotPointCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlotPoints.
     */
    data: PlotPointCreateManyInput | PlotPointCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlotPoint update
   */
  export type PlotPointUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlotPoint
     */
    select?: PlotPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlotPoint
     */
    omit?: PlotPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlotPointInclude<ExtArgs> | null
    /**
     * The data needed to update a PlotPoint.
     */
    data: XOR<PlotPointUpdateInput, PlotPointUncheckedUpdateInput>
    /**
     * Choose, which PlotPoint to update.
     */
    where: PlotPointWhereUniqueInput
  }

  /**
   * PlotPoint updateMany
   */
  export type PlotPointUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlotPoints.
     */
    data: XOR<PlotPointUpdateManyMutationInput, PlotPointUncheckedUpdateManyInput>
    /**
     * Filter which PlotPoints to update
     */
    where?: PlotPointWhereInput
    /**
     * Limit how many PlotPoints to update.
     */
    limit?: number
  }

  /**
   * PlotPoint upsert
   */
  export type PlotPointUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlotPoint
     */
    select?: PlotPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlotPoint
     */
    omit?: PlotPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlotPointInclude<ExtArgs> | null
    /**
     * The filter to search for the PlotPoint to update in case it exists.
     */
    where: PlotPointWhereUniqueInput
    /**
     * In case the PlotPoint found by the `where` argument doesn't exist, create a new PlotPoint with this data.
     */
    create: XOR<PlotPointCreateInput, PlotPointUncheckedCreateInput>
    /**
     * In case the PlotPoint was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlotPointUpdateInput, PlotPointUncheckedUpdateInput>
  }

  /**
   * PlotPoint delete
   */
  export type PlotPointDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlotPoint
     */
    select?: PlotPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlotPoint
     */
    omit?: PlotPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlotPointInclude<ExtArgs> | null
    /**
     * Filter which PlotPoint to delete.
     */
    where: PlotPointWhereUniqueInput
  }

  /**
   * PlotPoint deleteMany
   */
  export type PlotPointDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlotPoints to delete
     */
    where?: PlotPointWhereInput
    /**
     * Limit how many PlotPoints to delete.
     */
    limit?: number
  }

  /**
   * PlotPoint without action
   */
  export type PlotPointDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlotPoint
     */
    select?: PlotPointSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlotPoint
     */
    omit?: PlotPointOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlotPointInclude<ExtArgs> | null
  }


  /**
   * Model Item
   */

  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemMinAggregateOutputType = {
    id: string | null
    storyId: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemMaxAggregateOutputType = {
    id: string | null
    storyId: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ItemCountAggregateOutputType = {
    id: number
    storyId: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ItemMinAggregateInputType = {
    id?: true
    storyId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemMaxAggregateInputType = {
    id?: true
    storyId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ItemCountAggregateInputType = {
    id?: true
    storyId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Item to aggregate.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type ItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithAggregationInput | ItemOrderByWithAggregationInput[]
    by: ItemScalarFieldEnum[] | ItemScalarFieldEnum
    having?: ItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }

  export type ItemGroupByOutputType = {
    id: string
    storyId: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: ItemCountAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type ItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    storyId?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    story?: boolean | StoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>



  export type ItemSelectScalar = {
    id?: boolean
    storyId?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "storyId" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["item"]>
  export type ItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    story?: boolean | StoryDefaultArgs<ExtArgs>
  }

  export type $ItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Item"
    objects: {
      story: Prisma.$StoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      storyId: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["item"]>
    composites: {}
  }

  type ItemGetPayload<S extends boolean | null | undefined | ItemDefaultArgs> = $Result.GetResult<Prisma.$ItemPayload, S>

  type ItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ItemCountAggregateInputType | true
    }

  export interface ItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Item'], meta: { name: 'Item' } }
    /**
     * Find zero or one Item that matches the filter.
     * @param {ItemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemFindUniqueArgs>(args: SelectSubset<T, ItemFindUniqueArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Item that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ItemFindUniqueOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemFindFirstArgs>(args?: SelectSubset<T, ItemFindFirstArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemFindManyArgs>(args?: SelectSubset<T, ItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Item.
     * @param {ItemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
     */
    create<T extends ItemCreateArgs>(args: SelectSubset<T, ItemCreateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Items.
     * @param {ItemCreateManyArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const item = await prisma.item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemCreateManyArgs>(args?: SelectSubset<T, ItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Item.
     * @param {ItemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
     */
    delete<T extends ItemDeleteArgs>(args: SelectSubset<T, ItemDeleteArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Item.
     * @param {ItemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemUpdateArgs>(args: SelectSubset<T, ItemUpdateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Items.
     * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemDeleteManyArgs>(args?: SelectSubset<T, ItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemUpdateManyArgs>(args: SelectSubset<T, ItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
     */
    upsert<T extends ItemUpsertArgs>(args: SelectSubset<T, ItemUpsertArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemCountArgs>(
      args?: Subset<T, ItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): Prisma.PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Item model
   */
  readonly fields: ItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    story<T extends StoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoryDefaultArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Item model
   */
  interface ItemFieldRefs {
    readonly id: FieldRef<"Item", 'String'>
    readonly storyId: FieldRef<"Item", 'String'>
    readonly name: FieldRef<"Item", 'String'>
    readonly createdAt: FieldRef<"Item", 'DateTime'>
    readonly updatedAt: FieldRef<"Item", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Item findUnique
   */
  export type ItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findUniqueOrThrow
   */
  export type ItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findFirst
   */
  export type ItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findFirstOrThrow
   */
  export type ItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findMany
   */
  export type ItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item create
   */
  export type ItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to create a Item.
     */
    data: XOR<ItemCreateInput, ItemUncheckedCreateInput>
  }

  /**
   * Item createMany
   */
  export type ItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Item update
   */
  export type ItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to update a Item.
     */
    data: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
    /**
     * Choose, which Item to update.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item updateMany
   */
  export type ItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemWhereInput
    /**
     * Limit how many Items to update.
     */
    limit?: number
  }

  /**
   * Item upsert
   */
  export type ItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The filter to search for the Item to update in case it exists.
     */
    where: ItemWhereUniqueInput
    /**
     * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
     */
    create: XOR<ItemCreateInput, ItemUncheckedCreateInput>
    /**
     * In case the Item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
  }

  /**
   * Item delete
   */
  export type ItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter which Item to delete.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item deleteMany
   */
  export type ItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemWhereInput
    /**
     * Limit how many Items to delete.
     */
    limit?: number
  }

  /**
   * Item without action
   */
  export type ItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Item
     */
    omit?: ItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
  }


  /**
   * Model SceneCharacter
   */

  export type AggregateSceneCharacter = {
    _count: SceneCharacterCountAggregateOutputType | null
    _min: SceneCharacterMinAggregateOutputType | null
    _max: SceneCharacterMaxAggregateOutputType | null
  }

  export type SceneCharacterMinAggregateOutputType = {
    sceneId: string | null
    characterId: string | null
    assignedAt: Date | null
  }

  export type SceneCharacterMaxAggregateOutputType = {
    sceneId: string | null
    characterId: string | null
    assignedAt: Date | null
  }

  export type SceneCharacterCountAggregateOutputType = {
    sceneId: number
    characterId: number
    assignedAt: number
    _all: number
  }


  export type SceneCharacterMinAggregateInputType = {
    sceneId?: true
    characterId?: true
    assignedAt?: true
  }

  export type SceneCharacterMaxAggregateInputType = {
    sceneId?: true
    characterId?: true
    assignedAt?: true
  }

  export type SceneCharacterCountAggregateInputType = {
    sceneId?: true
    characterId?: true
    assignedAt?: true
    _all?: true
  }

  export type SceneCharacterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SceneCharacter to aggregate.
     */
    where?: SceneCharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneCharacters to fetch.
     */
    orderBy?: SceneCharacterOrderByWithRelationInput | SceneCharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SceneCharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneCharacters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneCharacters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SceneCharacters
    **/
    _count?: true | SceneCharacterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SceneCharacterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SceneCharacterMaxAggregateInputType
  }

  export type GetSceneCharacterAggregateType<T extends SceneCharacterAggregateArgs> = {
        [P in keyof T & keyof AggregateSceneCharacter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSceneCharacter[P]>
      : GetScalarType<T[P], AggregateSceneCharacter[P]>
  }




  export type SceneCharacterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneCharacterWhereInput
    orderBy?: SceneCharacterOrderByWithAggregationInput | SceneCharacterOrderByWithAggregationInput[]
    by: SceneCharacterScalarFieldEnum[] | SceneCharacterScalarFieldEnum
    having?: SceneCharacterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SceneCharacterCountAggregateInputType | true
    _min?: SceneCharacterMinAggregateInputType
    _max?: SceneCharacterMaxAggregateInputType
  }

  export type SceneCharacterGroupByOutputType = {
    sceneId: string
    characterId: string
    assignedAt: Date
    _count: SceneCharacterCountAggregateOutputType | null
    _min: SceneCharacterMinAggregateOutputType | null
    _max: SceneCharacterMaxAggregateOutputType | null
  }

  type GetSceneCharacterGroupByPayload<T extends SceneCharacterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SceneCharacterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SceneCharacterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SceneCharacterGroupByOutputType[P]>
            : GetScalarType<T[P], SceneCharacterGroupByOutputType[P]>
        }
      >
    >


  export type SceneCharacterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sceneId?: boolean
    characterId?: boolean
    assignedAt?: boolean
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sceneCharacter"]>



  export type SceneCharacterSelectScalar = {
    sceneId?: boolean
    characterId?: boolean
    assignedAt?: boolean
  }

  export type SceneCharacterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"sceneId" | "characterId" | "assignedAt", ExtArgs["result"]["sceneCharacter"]>
  export type SceneCharacterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }

  export type $SceneCharacterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SceneCharacter"
    objects: {
      scene: Prisma.$ScenePayload<ExtArgs>
      character: Prisma.$CharacterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      sceneId: string
      characterId: string
      assignedAt: Date
    }, ExtArgs["result"]["sceneCharacter"]>
    composites: {}
  }

  type SceneCharacterGetPayload<S extends boolean | null | undefined | SceneCharacterDefaultArgs> = $Result.GetResult<Prisma.$SceneCharacterPayload, S>

  type SceneCharacterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SceneCharacterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SceneCharacterCountAggregateInputType | true
    }

  export interface SceneCharacterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SceneCharacter'], meta: { name: 'SceneCharacter' } }
    /**
     * Find zero or one SceneCharacter that matches the filter.
     * @param {SceneCharacterFindUniqueArgs} args - Arguments to find a SceneCharacter
     * @example
     * // Get one SceneCharacter
     * const sceneCharacter = await prisma.sceneCharacter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SceneCharacterFindUniqueArgs>(args: SelectSubset<T, SceneCharacterFindUniqueArgs<ExtArgs>>): Prisma__SceneCharacterClient<$Result.GetResult<Prisma.$SceneCharacterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SceneCharacter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SceneCharacterFindUniqueOrThrowArgs} args - Arguments to find a SceneCharacter
     * @example
     * // Get one SceneCharacter
     * const sceneCharacter = await prisma.sceneCharacter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SceneCharacterFindUniqueOrThrowArgs>(args: SelectSubset<T, SceneCharacterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SceneCharacterClient<$Result.GetResult<Prisma.$SceneCharacterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SceneCharacter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneCharacterFindFirstArgs} args - Arguments to find a SceneCharacter
     * @example
     * // Get one SceneCharacter
     * const sceneCharacter = await prisma.sceneCharacter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SceneCharacterFindFirstArgs>(args?: SelectSubset<T, SceneCharacterFindFirstArgs<ExtArgs>>): Prisma__SceneCharacterClient<$Result.GetResult<Prisma.$SceneCharacterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SceneCharacter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneCharacterFindFirstOrThrowArgs} args - Arguments to find a SceneCharacter
     * @example
     * // Get one SceneCharacter
     * const sceneCharacter = await prisma.sceneCharacter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SceneCharacterFindFirstOrThrowArgs>(args?: SelectSubset<T, SceneCharacterFindFirstOrThrowArgs<ExtArgs>>): Prisma__SceneCharacterClient<$Result.GetResult<Prisma.$SceneCharacterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SceneCharacters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneCharacterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SceneCharacters
     * const sceneCharacters = await prisma.sceneCharacter.findMany()
     * 
     * // Get first 10 SceneCharacters
     * const sceneCharacters = await prisma.sceneCharacter.findMany({ take: 10 })
     * 
     * // Only select the `sceneId`
     * const sceneCharacterWithSceneIdOnly = await prisma.sceneCharacter.findMany({ select: { sceneId: true } })
     * 
     */
    findMany<T extends SceneCharacterFindManyArgs>(args?: SelectSubset<T, SceneCharacterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneCharacterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SceneCharacter.
     * @param {SceneCharacterCreateArgs} args - Arguments to create a SceneCharacter.
     * @example
     * // Create one SceneCharacter
     * const SceneCharacter = await prisma.sceneCharacter.create({
     *   data: {
     *     // ... data to create a SceneCharacter
     *   }
     * })
     * 
     */
    create<T extends SceneCharacterCreateArgs>(args: SelectSubset<T, SceneCharacterCreateArgs<ExtArgs>>): Prisma__SceneCharacterClient<$Result.GetResult<Prisma.$SceneCharacterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SceneCharacters.
     * @param {SceneCharacterCreateManyArgs} args - Arguments to create many SceneCharacters.
     * @example
     * // Create many SceneCharacters
     * const sceneCharacter = await prisma.sceneCharacter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SceneCharacterCreateManyArgs>(args?: SelectSubset<T, SceneCharacterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SceneCharacter.
     * @param {SceneCharacterDeleteArgs} args - Arguments to delete one SceneCharacter.
     * @example
     * // Delete one SceneCharacter
     * const SceneCharacter = await prisma.sceneCharacter.delete({
     *   where: {
     *     // ... filter to delete one SceneCharacter
     *   }
     * })
     * 
     */
    delete<T extends SceneCharacterDeleteArgs>(args: SelectSubset<T, SceneCharacterDeleteArgs<ExtArgs>>): Prisma__SceneCharacterClient<$Result.GetResult<Prisma.$SceneCharacterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SceneCharacter.
     * @param {SceneCharacterUpdateArgs} args - Arguments to update one SceneCharacter.
     * @example
     * // Update one SceneCharacter
     * const sceneCharacter = await prisma.sceneCharacter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SceneCharacterUpdateArgs>(args: SelectSubset<T, SceneCharacterUpdateArgs<ExtArgs>>): Prisma__SceneCharacterClient<$Result.GetResult<Prisma.$SceneCharacterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SceneCharacters.
     * @param {SceneCharacterDeleteManyArgs} args - Arguments to filter SceneCharacters to delete.
     * @example
     * // Delete a few SceneCharacters
     * const { count } = await prisma.sceneCharacter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SceneCharacterDeleteManyArgs>(args?: SelectSubset<T, SceneCharacterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SceneCharacters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneCharacterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SceneCharacters
     * const sceneCharacter = await prisma.sceneCharacter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SceneCharacterUpdateManyArgs>(args: SelectSubset<T, SceneCharacterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SceneCharacter.
     * @param {SceneCharacterUpsertArgs} args - Arguments to update or create a SceneCharacter.
     * @example
     * // Update or create a SceneCharacter
     * const sceneCharacter = await prisma.sceneCharacter.upsert({
     *   create: {
     *     // ... data to create a SceneCharacter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SceneCharacter we want to update
     *   }
     * })
     */
    upsert<T extends SceneCharacterUpsertArgs>(args: SelectSubset<T, SceneCharacterUpsertArgs<ExtArgs>>): Prisma__SceneCharacterClient<$Result.GetResult<Prisma.$SceneCharacterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SceneCharacters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneCharacterCountArgs} args - Arguments to filter SceneCharacters to count.
     * @example
     * // Count the number of SceneCharacters
     * const count = await prisma.sceneCharacter.count({
     *   where: {
     *     // ... the filter for the SceneCharacters we want to count
     *   }
     * })
    **/
    count<T extends SceneCharacterCountArgs>(
      args?: Subset<T, SceneCharacterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SceneCharacterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SceneCharacter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneCharacterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SceneCharacterAggregateArgs>(args: Subset<T, SceneCharacterAggregateArgs>): Prisma.PrismaPromise<GetSceneCharacterAggregateType<T>>

    /**
     * Group by SceneCharacter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneCharacterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SceneCharacterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SceneCharacterGroupByArgs['orderBy'] }
        : { orderBy?: SceneCharacterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SceneCharacterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSceneCharacterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SceneCharacter model
   */
  readonly fields: SceneCharacterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SceneCharacter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SceneCharacterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    scene<T extends SceneDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SceneDefaultArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    character<T extends CharacterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CharacterDefaultArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SceneCharacter model
   */
  interface SceneCharacterFieldRefs {
    readonly sceneId: FieldRef<"SceneCharacter", 'String'>
    readonly characterId: FieldRef<"SceneCharacter", 'String'>
    readonly assignedAt: FieldRef<"SceneCharacter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SceneCharacter findUnique
   */
  export type SceneCharacterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneCharacter
     */
    select?: SceneCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneCharacter
     */
    omit?: SceneCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneCharacterInclude<ExtArgs> | null
    /**
     * Filter, which SceneCharacter to fetch.
     */
    where: SceneCharacterWhereUniqueInput
  }

  /**
   * SceneCharacter findUniqueOrThrow
   */
  export type SceneCharacterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneCharacter
     */
    select?: SceneCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneCharacter
     */
    omit?: SceneCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneCharacterInclude<ExtArgs> | null
    /**
     * Filter, which SceneCharacter to fetch.
     */
    where: SceneCharacterWhereUniqueInput
  }

  /**
   * SceneCharacter findFirst
   */
  export type SceneCharacterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneCharacter
     */
    select?: SceneCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneCharacter
     */
    omit?: SceneCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneCharacterInclude<ExtArgs> | null
    /**
     * Filter, which SceneCharacter to fetch.
     */
    where?: SceneCharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneCharacters to fetch.
     */
    orderBy?: SceneCharacterOrderByWithRelationInput | SceneCharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SceneCharacters.
     */
    cursor?: SceneCharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneCharacters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneCharacters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SceneCharacters.
     */
    distinct?: SceneCharacterScalarFieldEnum | SceneCharacterScalarFieldEnum[]
  }

  /**
   * SceneCharacter findFirstOrThrow
   */
  export type SceneCharacterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneCharacter
     */
    select?: SceneCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneCharacter
     */
    omit?: SceneCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneCharacterInclude<ExtArgs> | null
    /**
     * Filter, which SceneCharacter to fetch.
     */
    where?: SceneCharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneCharacters to fetch.
     */
    orderBy?: SceneCharacterOrderByWithRelationInput | SceneCharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SceneCharacters.
     */
    cursor?: SceneCharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneCharacters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneCharacters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SceneCharacters.
     */
    distinct?: SceneCharacterScalarFieldEnum | SceneCharacterScalarFieldEnum[]
  }

  /**
   * SceneCharacter findMany
   */
  export type SceneCharacterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneCharacter
     */
    select?: SceneCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneCharacter
     */
    omit?: SceneCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneCharacterInclude<ExtArgs> | null
    /**
     * Filter, which SceneCharacters to fetch.
     */
    where?: SceneCharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneCharacters to fetch.
     */
    orderBy?: SceneCharacterOrderByWithRelationInput | SceneCharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SceneCharacters.
     */
    cursor?: SceneCharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneCharacters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneCharacters.
     */
    skip?: number
    distinct?: SceneCharacterScalarFieldEnum | SceneCharacterScalarFieldEnum[]
  }

  /**
   * SceneCharacter create
   */
  export type SceneCharacterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneCharacter
     */
    select?: SceneCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneCharacter
     */
    omit?: SceneCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneCharacterInclude<ExtArgs> | null
    /**
     * The data needed to create a SceneCharacter.
     */
    data: XOR<SceneCharacterCreateInput, SceneCharacterUncheckedCreateInput>
  }

  /**
   * SceneCharacter createMany
   */
  export type SceneCharacterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SceneCharacters.
     */
    data: SceneCharacterCreateManyInput | SceneCharacterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SceneCharacter update
   */
  export type SceneCharacterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneCharacter
     */
    select?: SceneCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneCharacter
     */
    omit?: SceneCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneCharacterInclude<ExtArgs> | null
    /**
     * The data needed to update a SceneCharacter.
     */
    data: XOR<SceneCharacterUpdateInput, SceneCharacterUncheckedUpdateInput>
    /**
     * Choose, which SceneCharacter to update.
     */
    where: SceneCharacterWhereUniqueInput
  }

  /**
   * SceneCharacter updateMany
   */
  export type SceneCharacterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SceneCharacters.
     */
    data: XOR<SceneCharacterUpdateManyMutationInput, SceneCharacterUncheckedUpdateManyInput>
    /**
     * Filter which SceneCharacters to update
     */
    where?: SceneCharacterWhereInput
    /**
     * Limit how many SceneCharacters to update.
     */
    limit?: number
  }

  /**
   * SceneCharacter upsert
   */
  export type SceneCharacterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneCharacter
     */
    select?: SceneCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneCharacter
     */
    omit?: SceneCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneCharacterInclude<ExtArgs> | null
    /**
     * The filter to search for the SceneCharacter to update in case it exists.
     */
    where: SceneCharacterWhereUniqueInput
    /**
     * In case the SceneCharacter found by the `where` argument doesn't exist, create a new SceneCharacter with this data.
     */
    create: XOR<SceneCharacterCreateInput, SceneCharacterUncheckedCreateInput>
    /**
     * In case the SceneCharacter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SceneCharacterUpdateInput, SceneCharacterUncheckedUpdateInput>
  }

  /**
   * SceneCharacter delete
   */
  export type SceneCharacterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneCharacter
     */
    select?: SceneCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneCharacter
     */
    omit?: SceneCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneCharacterInclude<ExtArgs> | null
    /**
     * Filter which SceneCharacter to delete.
     */
    where: SceneCharacterWhereUniqueInput
  }

  /**
   * SceneCharacter deleteMany
   */
  export type SceneCharacterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SceneCharacters to delete
     */
    where?: SceneCharacterWhereInput
    /**
     * Limit how many SceneCharacters to delete.
     */
    limit?: number
  }

  /**
   * SceneCharacter without action
   */
  export type SceneCharacterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneCharacter
     */
    select?: SceneCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneCharacter
     */
    omit?: SceneCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneCharacterInclude<ExtArgs> | null
  }


  /**
   * Model SceneReferredCharacter
   */

  export type AggregateSceneReferredCharacter = {
    _count: SceneReferredCharacterCountAggregateOutputType | null
    _min: SceneReferredCharacterMinAggregateOutputType | null
    _max: SceneReferredCharacterMaxAggregateOutputType | null
  }

  export type SceneReferredCharacterMinAggregateOutputType = {
    sceneId: string | null
    characterId: string | null
    assignedAt: Date | null
  }

  export type SceneReferredCharacterMaxAggregateOutputType = {
    sceneId: string | null
    characterId: string | null
    assignedAt: Date | null
  }

  export type SceneReferredCharacterCountAggregateOutputType = {
    sceneId: number
    characterId: number
    assignedAt: number
    _all: number
  }


  export type SceneReferredCharacterMinAggregateInputType = {
    sceneId?: true
    characterId?: true
    assignedAt?: true
  }

  export type SceneReferredCharacterMaxAggregateInputType = {
    sceneId?: true
    characterId?: true
    assignedAt?: true
  }

  export type SceneReferredCharacterCountAggregateInputType = {
    sceneId?: true
    characterId?: true
    assignedAt?: true
    _all?: true
  }

  export type SceneReferredCharacterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SceneReferredCharacter to aggregate.
     */
    where?: SceneReferredCharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneReferredCharacters to fetch.
     */
    orderBy?: SceneReferredCharacterOrderByWithRelationInput | SceneReferredCharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SceneReferredCharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneReferredCharacters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneReferredCharacters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SceneReferredCharacters
    **/
    _count?: true | SceneReferredCharacterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SceneReferredCharacterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SceneReferredCharacterMaxAggregateInputType
  }

  export type GetSceneReferredCharacterAggregateType<T extends SceneReferredCharacterAggregateArgs> = {
        [P in keyof T & keyof AggregateSceneReferredCharacter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSceneReferredCharacter[P]>
      : GetScalarType<T[P], AggregateSceneReferredCharacter[P]>
  }




  export type SceneReferredCharacterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SceneReferredCharacterWhereInput
    orderBy?: SceneReferredCharacterOrderByWithAggregationInput | SceneReferredCharacterOrderByWithAggregationInput[]
    by: SceneReferredCharacterScalarFieldEnum[] | SceneReferredCharacterScalarFieldEnum
    having?: SceneReferredCharacterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SceneReferredCharacterCountAggregateInputType | true
    _min?: SceneReferredCharacterMinAggregateInputType
    _max?: SceneReferredCharacterMaxAggregateInputType
  }

  export type SceneReferredCharacterGroupByOutputType = {
    sceneId: string
    characterId: string
    assignedAt: Date
    _count: SceneReferredCharacterCountAggregateOutputType | null
    _min: SceneReferredCharacterMinAggregateOutputType | null
    _max: SceneReferredCharacterMaxAggregateOutputType | null
  }

  type GetSceneReferredCharacterGroupByPayload<T extends SceneReferredCharacterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SceneReferredCharacterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SceneReferredCharacterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SceneReferredCharacterGroupByOutputType[P]>
            : GetScalarType<T[P], SceneReferredCharacterGroupByOutputType[P]>
        }
      >
    >


  export type SceneReferredCharacterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sceneId?: boolean
    characterId?: boolean
    assignedAt?: boolean
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sceneReferredCharacter"]>



  export type SceneReferredCharacterSelectScalar = {
    sceneId?: boolean
    characterId?: boolean
    assignedAt?: boolean
  }

  export type SceneReferredCharacterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"sceneId" | "characterId" | "assignedAt", ExtArgs["result"]["sceneReferredCharacter"]>
  export type SceneReferredCharacterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scene?: boolean | SceneDefaultArgs<ExtArgs>
    character?: boolean | CharacterDefaultArgs<ExtArgs>
  }

  export type $SceneReferredCharacterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SceneReferredCharacter"
    objects: {
      scene: Prisma.$ScenePayload<ExtArgs>
      character: Prisma.$CharacterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      sceneId: string
      characterId: string
      assignedAt: Date
    }, ExtArgs["result"]["sceneReferredCharacter"]>
    composites: {}
  }

  type SceneReferredCharacterGetPayload<S extends boolean | null | undefined | SceneReferredCharacterDefaultArgs> = $Result.GetResult<Prisma.$SceneReferredCharacterPayload, S>

  type SceneReferredCharacterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SceneReferredCharacterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SceneReferredCharacterCountAggregateInputType | true
    }

  export interface SceneReferredCharacterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SceneReferredCharacter'], meta: { name: 'SceneReferredCharacter' } }
    /**
     * Find zero or one SceneReferredCharacter that matches the filter.
     * @param {SceneReferredCharacterFindUniqueArgs} args - Arguments to find a SceneReferredCharacter
     * @example
     * // Get one SceneReferredCharacter
     * const sceneReferredCharacter = await prisma.sceneReferredCharacter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SceneReferredCharacterFindUniqueArgs>(args: SelectSubset<T, SceneReferredCharacterFindUniqueArgs<ExtArgs>>): Prisma__SceneReferredCharacterClient<$Result.GetResult<Prisma.$SceneReferredCharacterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SceneReferredCharacter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SceneReferredCharacterFindUniqueOrThrowArgs} args - Arguments to find a SceneReferredCharacter
     * @example
     * // Get one SceneReferredCharacter
     * const sceneReferredCharacter = await prisma.sceneReferredCharacter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SceneReferredCharacterFindUniqueOrThrowArgs>(args: SelectSubset<T, SceneReferredCharacterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SceneReferredCharacterClient<$Result.GetResult<Prisma.$SceneReferredCharacterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SceneReferredCharacter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneReferredCharacterFindFirstArgs} args - Arguments to find a SceneReferredCharacter
     * @example
     * // Get one SceneReferredCharacter
     * const sceneReferredCharacter = await prisma.sceneReferredCharacter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SceneReferredCharacterFindFirstArgs>(args?: SelectSubset<T, SceneReferredCharacterFindFirstArgs<ExtArgs>>): Prisma__SceneReferredCharacterClient<$Result.GetResult<Prisma.$SceneReferredCharacterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SceneReferredCharacter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneReferredCharacterFindFirstOrThrowArgs} args - Arguments to find a SceneReferredCharacter
     * @example
     * // Get one SceneReferredCharacter
     * const sceneReferredCharacter = await prisma.sceneReferredCharacter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SceneReferredCharacterFindFirstOrThrowArgs>(args?: SelectSubset<T, SceneReferredCharacterFindFirstOrThrowArgs<ExtArgs>>): Prisma__SceneReferredCharacterClient<$Result.GetResult<Prisma.$SceneReferredCharacterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SceneReferredCharacters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneReferredCharacterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SceneReferredCharacters
     * const sceneReferredCharacters = await prisma.sceneReferredCharacter.findMany()
     * 
     * // Get first 10 SceneReferredCharacters
     * const sceneReferredCharacters = await prisma.sceneReferredCharacter.findMany({ take: 10 })
     * 
     * // Only select the `sceneId`
     * const sceneReferredCharacterWithSceneIdOnly = await prisma.sceneReferredCharacter.findMany({ select: { sceneId: true } })
     * 
     */
    findMany<T extends SceneReferredCharacterFindManyArgs>(args?: SelectSubset<T, SceneReferredCharacterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SceneReferredCharacterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SceneReferredCharacter.
     * @param {SceneReferredCharacterCreateArgs} args - Arguments to create a SceneReferredCharacter.
     * @example
     * // Create one SceneReferredCharacter
     * const SceneReferredCharacter = await prisma.sceneReferredCharacter.create({
     *   data: {
     *     // ... data to create a SceneReferredCharacter
     *   }
     * })
     * 
     */
    create<T extends SceneReferredCharacterCreateArgs>(args: SelectSubset<T, SceneReferredCharacterCreateArgs<ExtArgs>>): Prisma__SceneReferredCharacterClient<$Result.GetResult<Prisma.$SceneReferredCharacterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SceneReferredCharacters.
     * @param {SceneReferredCharacterCreateManyArgs} args - Arguments to create many SceneReferredCharacters.
     * @example
     * // Create many SceneReferredCharacters
     * const sceneReferredCharacter = await prisma.sceneReferredCharacter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SceneReferredCharacterCreateManyArgs>(args?: SelectSubset<T, SceneReferredCharacterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SceneReferredCharacter.
     * @param {SceneReferredCharacterDeleteArgs} args - Arguments to delete one SceneReferredCharacter.
     * @example
     * // Delete one SceneReferredCharacter
     * const SceneReferredCharacter = await prisma.sceneReferredCharacter.delete({
     *   where: {
     *     // ... filter to delete one SceneReferredCharacter
     *   }
     * })
     * 
     */
    delete<T extends SceneReferredCharacterDeleteArgs>(args: SelectSubset<T, SceneReferredCharacterDeleteArgs<ExtArgs>>): Prisma__SceneReferredCharacterClient<$Result.GetResult<Prisma.$SceneReferredCharacterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SceneReferredCharacter.
     * @param {SceneReferredCharacterUpdateArgs} args - Arguments to update one SceneReferredCharacter.
     * @example
     * // Update one SceneReferredCharacter
     * const sceneReferredCharacter = await prisma.sceneReferredCharacter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SceneReferredCharacterUpdateArgs>(args: SelectSubset<T, SceneReferredCharacterUpdateArgs<ExtArgs>>): Prisma__SceneReferredCharacterClient<$Result.GetResult<Prisma.$SceneReferredCharacterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SceneReferredCharacters.
     * @param {SceneReferredCharacterDeleteManyArgs} args - Arguments to filter SceneReferredCharacters to delete.
     * @example
     * // Delete a few SceneReferredCharacters
     * const { count } = await prisma.sceneReferredCharacter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SceneReferredCharacterDeleteManyArgs>(args?: SelectSubset<T, SceneReferredCharacterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SceneReferredCharacters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneReferredCharacterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SceneReferredCharacters
     * const sceneReferredCharacter = await prisma.sceneReferredCharacter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SceneReferredCharacterUpdateManyArgs>(args: SelectSubset<T, SceneReferredCharacterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SceneReferredCharacter.
     * @param {SceneReferredCharacterUpsertArgs} args - Arguments to update or create a SceneReferredCharacter.
     * @example
     * // Update or create a SceneReferredCharacter
     * const sceneReferredCharacter = await prisma.sceneReferredCharacter.upsert({
     *   create: {
     *     // ... data to create a SceneReferredCharacter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SceneReferredCharacter we want to update
     *   }
     * })
     */
    upsert<T extends SceneReferredCharacterUpsertArgs>(args: SelectSubset<T, SceneReferredCharacterUpsertArgs<ExtArgs>>): Prisma__SceneReferredCharacterClient<$Result.GetResult<Prisma.$SceneReferredCharacterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SceneReferredCharacters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneReferredCharacterCountArgs} args - Arguments to filter SceneReferredCharacters to count.
     * @example
     * // Count the number of SceneReferredCharacters
     * const count = await prisma.sceneReferredCharacter.count({
     *   where: {
     *     // ... the filter for the SceneReferredCharacters we want to count
     *   }
     * })
    **/
    count<T extends SceneReferredCharacterCountArgs>(
      args?: Subset<T, SceneReferredCharacterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SceneReferredCharacterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SceneReferredCharacter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneReferredCharacterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SceneReferredCharacterAggregateArgs>(args: Subset<T, SceneReferredCharacterAggregateArgs>): Prisma.PrismaPromise<GetSceneReferredCharacterAggregateType<T>>

    /**
     * Group by SceneReferredCharacter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SceneReferredCharacterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SceneReferredCharacterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SceneReferredCharacterGroupByArgs['orderBy'] }
        : { orderBy?: SceneReferredCharacterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SceneReferredCharacterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSceneReferredCharacterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SceneReferredCharacter model
   */
  readonly fields: SceneReferredCharacterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SceneReferredCharacter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SceneReferredCharacterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    scene<T extends SceneDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SceneDefaultArgs<ExtArgs>>): Prisma__SceneClient<$Result.GetResult<Prisma.$ScenePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    character<T extends CharacterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CharacterDefaultArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SceneReferredCharacter model
   */
  interface SceneReferredCharacterFieldRefs {
    readonly sceneId: FieldRef<"SceneReferredCharacter", 'String'>
    readonly characterId: FieldRef<"SceneReferredCharacter", 'String'>
    readonly assignedAt: FieldRef<"SceneReferredCharacter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SceneReferredCharacter findUnique
   */
  export type SceneReferredCharacterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneReferredCharacter
     */
    select?: SceneReferredCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneReferredCharacter
     */
    omit?: SceneReferredCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneReferredCharacterInclude<ExtArgs> | null
    /**
     * Filter, which SceneReferredCharacter to fetch.
     */
    where: SceneReferredCharacterWhereUniqueInput
  }

  /**
   * SceneReferredCharacter findUniqueOrThrow
   */
  export type SceneReferredCharacterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneReferredCharacter
     */
    select?: SceneReferredCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneReferredCharacter
     */
    omit?: SceneReferredCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneReferredCharacterInclude<ExtArgs> | null
    /**
     * Filter, which SceneReferredCharacter to fetch.
     */
    where: SceneReferredCharacterWhereUniqueInput
  }

  /**
   * SceneReferredCharacter findFirst
   */
  export type SceneReferredCharacterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneReferredCharacter
     */
    select?: SceneReferredCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneReferredCharacter
     */
    omit?: SceneReferredCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneReferredCharacterInclude<ExtArgs> | null
    /**
     * Filter, which SceneReferredCharacter to fetch.
     */
    where?: SceneReferredCharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneReferredCharacters to fetch.
     */
    orderBy?: SceneReferredCharacterOrderByWithRelationInput | SceneReferredCharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SceneReferredCharacters.
     */
    cursor?: SceneReferredCharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneReferredCharacters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneReferredCharacters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SceneReferredCharacters.
     */
    distinct?: SceneReferredCharacterScalarFieldEnum | SceneReferredCharacterScalarFieldEnum[]
  }

  /**
   * SceneReferredCharacter findFirstOrThrow
   */
  export type SceneReferredCharacterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneReferredCharacter
     */
    select?: SceneReferredCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneReferredCharacter
     */
    omit?: SceneReferredCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneReferredCharacterInclude<ExtArgs> | null
    /**
     * Filter, which SceneReferredCharacter to fetch.
     */
    where?: SceneReferredCharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneReferredCharacters to fetch.
     */
    orderBy?: SceneReferredCharacterOrderByWithRelationInput | SceneReferredCharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SceneReferredCharacters.
     */
    cursor?: SceneReferredCharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneReferredCharacters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneReferredCharacters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SceneReferredCharacters.
     */
    distinct?: SceneReferredCharacterScalarFieldEnum | SceneReferredCharacterScalarFieldEnum[]
  }

  /**
   * SceneReferredCharacter findMany
   */
  export type SceneReferredCharacterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneReferredCharacter
     */
    select?: SceneReferredCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneReferredCharacter
     */
    omit?: SceneReferredCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneReferredCharacterInclude<ExtArgs> | null
    /**
     * Filter, which SceneReferredCharacters to fetch.
     */
    where?: SceneReferredCharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SceneReferredCharacters to fetch.
     */
    orderBy?: SceneReferredCharacterOrderByWithRelationInput | SceneReferredCharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SceneReferredCharacters.
     */
    cursor?: SceneReferredCharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SceneReferredCharacters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SceneReferredCharacters.
     */
    skip?: number
    distinct?: SceneReferredCharacterScalarFieldEnum | SceneReferredCharacterScalarFieldEnum[]
  }

  /**
   * SceneReferredCharacter create
   */
  export type SceneReferredCharacterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneReferredCharacter
     */
    select?: SceneReferredCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneReferredCharacter
     */
    omit?: SceneReferredCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneReferredCharacterInclude<ExtArgs> | null
    /**
     * The data needed to create a SceneReferredCharacter.
     */
    data: XOR<SceneReferredCharacterCreateInput, SceneReferredCharacterUncheckedCreateInput>
  }

  /**
   * SceneReferredCharacter createMany
   */
  export type SceneReferredCharacterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SceneReferredCharacters.
     */
    data: SceneReferredCharacterCreateManyInput | SceneReferredCharacterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SceneReferredCharacter update
   */
  export type SceneReferredCharacterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneReferredCharacter
     */
    select?: SceneReferredCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneReferredCharacter
     */
    omit?: SceneReferredCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneReferredCharacterInclude<ExtArgs> | null
    /**
     * The data needed to update a SceneReferredCharacter.
     */
    data: XOR<SceneReferredCharacterUpdateInput, SceneReferredCharacterUncheckedUpdateInput>
    /**
     * Choose, which SceneReferredCharacter to update.
     */
    where: SceneReferredCharacterWhereUniqueInput
  }

  /**
   * SceneReferredCharacter updateMany
   */
  export type SceneReferredCharacterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SceneReferredCharacters.
     */
    data: XOR<SceneReferredCharacterUpdateManyMutationInput, SceneReferredCharacterUncheckedUpdateManyInput>
    /**
     * Filter which SceneReferredCharacters to update
     */
    where?: SceneReferredCharacterWhereInput
    /**
     * Limit how many SceneReferredCharacters to update.
     */
    limit?: number
  }

  /**
   * SceneReferredCharacter upsert
   */
  export type SceneReferredCharacterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneReferredCharacter
     */
    select?: SceneReferredCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneReferredCharacter
     */
    omit?: SceneReferredCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneReferredCharacterInclude<ExtArgs> | null
    /**
     * The filter to search for the SceneReferredCharacter to update in case it exists.
     */
    where: SceneReferredCharacterWhereUniqueInput
    /**
     * In case the SceneReferredCharacter found by the `where` argument doesn't exist, create a new SceneReferredCharacter with this data.
     */
    create: XOR<SceneReferredCharacterCreateInput, SceneReferredCharacterUncheckedCreateInput>
    /**
     * In case the SceneReferredCharacter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SceneReferredCharacterUpdateInput, SceneReferredCharacterUncheckedUpdateInput>
  }

  /**
   * SceneReferredCharacter delete
   */
  export type SceneReferredCharacterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneReferredCharacter
     */
    select?: SceneReferredCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneReferredCharacter
     */
    omit?: SceneReferredCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneReferredCharacterInclude<ExtArgs> | null
    /**
     * Filter which SceneReferredCharacter to delete.
     */
    where: SceneReferredCharacterWhereUniqueInput
  }

  /**
   * SceneReferredCharacter deleteMany
   */
  export type SceneReferredCharacterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SceneReferredCharacters to delete
     */
    where?: SceneReferredCharacterWhereInput
    /**
     * Limit how many SceneReferredCharacters to delete.
     */
    limit?: number
  }

  /**
   * SceneReferredCharacter without action
   */
  export type SceneReferredCharacterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SceneReferredCharacter
     */
    select?: SceneReferredCharacterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SceneReferredCharacter
     */
    omit?: SceneReferredCharacterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SceneReferredCharacterInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role',
    avatarUrl: 'avatarUrl',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    ownerId: 'ownerId',
    validUntil: 'validUntil',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AccessKeyScalarFieldEnum: {
    id: 'id',
    key: 'key',
    description: 'description',
    ownerId: 'ownerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastUsedAt: 'lastUsedAt'
  };

  export type AccessKeyScalarFieldEnum = (typeof AccessKeyScalarFieldEnum)[keyof typeof AccessKeyScalarFieldEnum]


  export const BookShelfStoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    ownerId: 'ownerId',
    storyId: 'storyId',
    kind: 'kind',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookShelfStoryScalarFieldEnum = (typeof BookShelfStoryScalarFieldEnum)[keyof typeof BookShelfStoryScalarFieldEnum]


  export const StoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    summary: 'summary',
    ownerId: 'ownerId',
    royalRoadId: 'royalRoadId',
    published: 'published',
    status: 'status',
    type: 'type',
    wordsPerWeek: 'wordsPerWeek',
    spellingLevel: 'spellingLevel',
    chapters: 'chapters',
    firstChapterReleasedAt: 'firstChapterReleasedAt',
    lastChapterReleasedAt: 'lastChapterReleasedAt',
    coverArtFileId: 'coverArtFileId',
    coverColor: 'coverColor',
    coverTextColor: 'coverTextColor',
    coverFontFamily: 'coverFontFamily',
    defaultPerspective: 'defaultPerspective',
    defaultProtagonistId: 'defaultProtagonistId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    sortOrder: 'sortOrder',
    pages: 'pages'
  };

  export type StoryScalarFieldEnum = (typeof StoryScalarFieldEnum)[keyof typeof StoryScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const StoryTagScalarFieldEnum: {
    id: 'id',
    storyId: 'storyId',
    tagId: 'tagId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StoryTagScalarFieldEnum = (typeof StoryTagScalarFieldEnum)[keyof typeof StoryTagScalarFieldEnum]


  export const StoryReadStatusScalarFieldEnum: {
    id: 'id',
    storyId: 'storyId',
    userId: 'userId',
    lastChapterId: 'lastChapterId',
    lastChapterReadAt: 'lastChapterReadAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StoryReadStatusScalarFieldEnum = (typeof StoryReadStatusScalarFieldEnum)[keyof typeof StoryReadStatusScalarFieldEnum]


  export const BookScalarFieldEnum: {
    id: 'id',
    name: 'name',
    summary: 'summary',
    storyId: 'storyId',
    coverArtFileId: 'coverArtFileId',
    spineArtFileId: 'spineArtFileId',
    pages: 'pages',
    sortOrder: 'sortOrder',
    nodeType: 'nodeType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookScalarFieldEnum = (typeof BookScalarFieldEnum)[keyof typeof BookScalarFieldEnum]


  export const ArcScalarFieldEnum: {
    id: 'id',
    name: 'name',
    summary: 'summary',
    bookId: 'bookId',
    sortOrder: 'sortOrder',
    nodeType: 'nodeType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ArcScalarFieldEnum = (typeof ArcScalarFieldEnum)[keyof typeof ArcScalarFieldEnum]


  export const ChapterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    summary: 'summary',
    arcId: 'arcId',
    publishedOn: 'publishedOn',
    sortOrder: 'sortOrder',
    royalRoadId: 'royalRoadId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    nodeType: 'nodeType'
  };

  export type ChapterScalarFieldEnum = (typeof ChapterScalarFieldEnum)[keyof typeof ChapterScalarFieldEnum]


  export const SceneScalarFieldEnum: {
    id: 'id',
    name: 'name',
    summary: 'summary',
    body: 'body',
    chapterId: 'chapterId',
    sortOrder: 'sortOrder',
    nodeType: 'nodeType',
    perspective: 'perspective',
    protagonistId: 'protagonistId',
    locationId: 'locationId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SceneScalarFieldEnum = (typeof SceneScalarFieldEnum)[keyof typeof SceneScalarFieldEnum]


  export const ParagraphScalarFieldEnum: {
    id: 'id',
    sceneId: 'sceneId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    sortOrder: 'sortOrder'
  };

  export type ParagraphScalarFieldEnum = (typeof ParagraphScalarFieldEnum)[keyof typeof ParagraphScalarFieldEnum]


  export const ParagraphRevisionScalarFieldEnum: {
    id: 'id',
    paragraphId: 'paragraphId',
    body: 'body',
    contentSchema: 'contentSchema',
    version: 'version',
    state: 'state',
    aiCharacters: 'aiCharacters',
    humanCharacters: 'humanCharacters',
    plotPointActions: 'plotPointActions',
    inventoryActions: 'inventoryActions',
    createdAt: 'createdAt'
  };

  export type ParagraphRevisionScalarFieldEnum = (typeof ParagraphRevisionScalarFieldEnum)[keyof typeof ParagraphRevisionScalarFieldEnum]


  export const ParagraphCommentScalarFieldEnum: {
    id: 'id',
    paragraphRevisionId: 'paragraphRevisionId',
    ownerId: 'ownerId',
    body: 'body',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ParagraphCommentScalarFieldEnum = (typeof ParagraphCommentScalarFieldEnum)[keyof typeof ParagraphCommentScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    ownerId: 'ownerId',
    storyId: 'storyId',
    localPath: 'localPath',
    path: 'path',
    sha256: 'sha256',
    width: 'width',
    height: 'height',
    bytes: 'bytes',
    mimeType: 'mimeType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const ChapterPublishingScalarFieldEnum: {
    id: 'id',
    chapterId: 'chapterId',
    platform: 'platform',
    status: 'status',
    platformId: 'platformId',
    publishedAt: 'publishedAt',
    lastAttempt: 'lastAttempt',
    errorMessage: 'errorMessage',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChapterPublishingScalarFieldEnum = (typeof ChapterPublishingScalarFieldEnum)[keyof typeof ChapterPublishingScalarFieldEnum]


  export const CharacterScalarFieldEnum: {
    id: 'id',
    storyId: 'storyId',
    pictureFileId: 'pictureFileId',
    firstName: 'firstName',
    middleName: 'middleName',
    lastName: 'lastName',
    nickname: 'nickname',
    summary: 'summary',
    background: 'background',
    personality: 'personality',
    personalityQuirks: 'personalityQuirks',
    likes: 'likes',
    dislikes: 'dislikes',
    age: 'age',
    gender: 'gender',
    sexualOrientation: 'sexualOrientation',
    height: 'height',
    hairColor: 'hairColor',
    eyeColor: 'eyeColor',
    distinguishingFeatures: 'distinguishingFeatures',
    writingStyle: 'writingStyle',
    isMainCharacter: 'isMainCharacter',
    laterVersionOfId: 'laterVersionOfId',
    significantActions: 'significantActions',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CharacterScalarFieldEnum = (typeof CharacterScalarFieldEnum)[keyof typeof CharacterScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    storyId: 'storyId',
    name: 'name',
    pictureFileId: 'pictureFileId',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const PlotPointScalarFieldEnum: {
    id: 'id',
    storyId: 'storyId',
    title: 'title',
    summary: 'summary',
    state: 'state',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlotPointScalarFieldEnum = (typeof PlotPointScalarFieldEnum)[keyof typeof PlotPointScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    id: 'id',
    storyId: 'storyId',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const SceneCharacterScalarFieldEnum: {
    sceneId: 'sceneId',
    characterId: 'characterId',
    assignedAt: 'assignedAt'
  };

  export type SceneCharacterScalarFieldEnum = (typeof SceneCharacterScalarFieldEnum)[keyof typeof SceneCharacterScalarFieldEnum]


  export const SceneReferredCharacterScalarFieldEnum: {
    sceneId: 'sceneId',
    characterId: 'characterId',
    assignedAt: 'assignedAt'
  };

  export type SceneReferredCharacterScalarFieldEnum = (typeof SceneReferredCharacterScalarFieldEnum)[keyof typeof SceneReferredCharacterScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role',
    avatarUrl: 'avatarUrl'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const SessionOrderByRelevanceFieldEnum: {
    id: 'id'
  };

  export type SessionOrderByRelevanceFieldEnum = (typeof SessionOrderByRelevanceFieldEnum)[keyof typeof SessionOrderByRelevanceFieldEnum]


  export const AccessKeyOrderByRelevanceFieldEnum: {
    key: 'key',
    description: 'description'
  };

  export type AccessKeyOrderByRelevanceFieldEnum = (typeof AccessKeyOrderByRelevanceFieldEnum)[keyof typeof AccessKeyOrderByRelevanceFieldEnum]


  export const BookShelfStoryOrderByRelevanceFieldEnum: {
    name: 'name',
    storyId: 'storyId'
  };

  export type BookShelfStoryOrderByRelevanceFieldEnum = (typeof BookShelfStoryOrderByRelevanceFieldEnum)[keyof typeof BookShelfStoryOrderByRelevanceFieldEnum]


  export const StoryOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    summary: 'summary',
    coverArtFileId: 'coverArtFileId',
    coverColor: 'coverColor',
    coverTextColor: 'coverTextColor',
    coverFontFamily: 'coverFontFamily',
    defaultProtagonistId: 'defaultProtagonistId'
  };

  export type StoryOrderByRelevanceFieldEnum = (typeof StoryOrderByRelevanceFieldEnum)[keyof typeof StoryOrderByRelevanceFieldEnum]


  export const TagOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TagOrderByRelevanceFieldEnum = (typeof TagOrderByRelevanceFieldEnum)[keyof typeof TagOrderByRelevanceFieldEnum]


  export const StoryTagOrderByRelevanceFieldEnum: {
    id: 'id',
    storyId: 'storyId',
    tagId: 'tagId'
  };

  export type StoryTagOrderByRelevanceFieldEnum = (typeof StoryTagOrderByRelevanceFieldEnum)[keyof typeof StoryTagOrderByRelevanceFieldEnum]


  export const StoryReadStatusOrderByRelevanceFieldEnum: {
    id: 'id',
    storyId: 'storyId',
    lastChapterId: 'lastChapterId'
  };

  export type StoryReadStatusOrderByRelevanceFieldEnum = (typeof StoryReadStatusOrderByRelevanceFieldEnum)[keyof typeof StoryReadStatusOrderByRelevanceFieldEnum]


  export const BookOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    summary: 'summary',
    storyId: 'storyId',
    coverArtFileId: 'coverArtFileId',
    spineArtFileId: 'spineArtFileId',
    nodeType: 'nodeType'
  };

  export type BookOrderByRelevanceFieldEnum = (typeof BookOrderByRelevanceFieldEnum)[keyof typeof BookOrderByRelevanceFieldEnum]


  export const ArcOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    summary: 'summary',
    bookId: 'bookId',
    nodeType: 'nodeType'
  };

  export type ArcOrderByRelevanceFieldEnum = (typeof ArcOrderByRelevanceFieldEnum)[keyof typeof ArcOrderByRelevanceFieldEnum]


  export const ChapterOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    summary: 'summary',
    arcId: 'arcId',
    nodeType: 'nodeType'
  };

  export type ChapterOrderByRelevanceFieldEnum = (typeof ChapterOrderByRelevanceFieldEnum)[keyof typeof ChapterOrderByRelevanceFieldEnum]


  export const SceneOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    summary: 'summary',
    body: 'body',
    chapterId: 'chapterId',
    nodeType: 'nodeType',
    protagonistId: 'protagonistId',
    locationId: 'locationId'
  };

  export type SceneOrderByRelevanceFieldEnum = (typeof SceneOrderByRelevanceFieldEnum)[keyof typeof SceneOrderByRelevanceFieldEnum]


  export const ParagraphOrderByRelevanceFieldEnum: {
    id: 'id',
    sceneId: 'sceneId'
  };

  export type ParagraphOrderByRelevanceFieldEnum = (typeof ParagraphOrderByRelevanceFieldEnum)[keyof typeof ParagraphOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ParagraphRevisionOrderByRelevanceFieldEnum: {
    id: 'id',
    paragraphId: 'paragraphId',
    body: 'body',
    contentSchema: 'contentSchema'
  };

  export type ParagraphRevisionOrderByRelevanceFieldEnum = (typeof ParagraphRevisionOrderByRelevanceFieldEnum)[keyof typeof ParagraphRevisionOrderByRelevanceFieldEnum]


  export const ParagraphCommentOrderByRelevanceFieldEnum: {
    paragraphRevisionId: 'paragraphRevisionId',
    body: 'body'
  };

  export type ParagraphCommentOrderByRelevanceFieldEnum = (typeof ParagraphCommentOrderByRelevanceFieldEnum)[keyof typeof ParagraphCommentOrderByRelevanceFieldEnum]


  export const FileOrderByRelevanceFieldEnum: {
    id: 'id',
    storyId: 'storyId',
    localPath: 'localPath',
    path: 'path',
    sha256: 'sha256',
    mimeType: 'mimeType'
  };

  export type FileOrderByRelevanceFieldEnum = (typeof FileOrderByRelevanceFieldEnum)[keyof typeof FileOrderByRelevanceFieldEnum]


  export const ChapterPublishingOrderByRelevanceFieldEnum: {
    id: 'id',
    chapterId: 'chapterId',
    platformId: 'platformId',
    errorMessage: 'errorMessage'
  };

  export type ChapterPublishingOrderByRelevanceFieldEnum = (typeof ChapterPublishingOrderByRelevanceFieldEnum)[keyof typeof ChapterPublishingOrderByRelevanceFieldEnum]


  export const CharacterOrderByRelevanceFieldEnum: {
    id: 'id',
    storyId: 'storyId',
    pictureFileId: 'pictureFileId',
    firstName: 'firstName',
    middleName: 'middleName',
    lastName: 'lastName',
    nickname: 'nickname',
    summary: 'summary',
    background: 'background',
    personality: 'personality',
    personalityQuirks: 'personalityQuirks',
    likes: 'likes',
    dislikes: 'dislikes',
    age: 'age',
    gender: 'gender',
    sexualOrientation: 'sexualOrientation',
    hairColor: 'hairColor',
    eyeColor: 'eyeColor',
    distinguishingFeatures: 'distinguishingFeatures',
    writingStyle: 'writingStyle',
    laterVersionOfId: 'laterVersionOfId'
  };

  export type CharacterOrderByRelevanceFieldEnum = (typeof CharacterOrderByRelevanceFieldEnum)[keyof typeof CharacterOrderByRelevanceFieldEnum]


  export const LocationOrderByRelevanceFieldEnum: {
    id: 'id',
    storyId: 'storyId',
    name: 'name',
    pictureFileId: 'pictureFileId',
    description: 'description'
  };

  export type LocationOrderByRelevanceFieldEnum = (typeof LocationOrderByRelevanceFieldEnum)[keyof typeof LocationOrderByRelevanceFieldEnum]


  export const PlotPointOrderByRelevanceFieldEnum: {
    id: 'id',
    storyId: 'storyId',
    title: 'title',
    summary: 'summary'
  };

  export type PlotPointOrderByRelevanceFieldEnum = (typeof PlotPointOrderByRelevanceFieldEnum)[keyof typeof PlotPointOrderByRelevanceFieldEnum]


  export const ItemOrderByRelevanceFieldEnum: {
    id: 'id',
    storyId: 'storyId',
    name: 'name'
  };

  export type ItemOrderByRelevanceFieldEnum = (typeof ItemOrderByRelevanceFieldEnum)[keyof typeof ItemOrderByRelevanceFieldEnum]


  export const SceneCharacterOrderByRelevanceFieldEnum: {
    sceneId: 'sceneId',
    characterId: 'characterId'
  };

  export type SceneCharacterOrderByRelevanceFieldEnum = (typeof SceneCharacterOrderByRelevanceFieldEnum)[keyof typeof SceneCharacterOrderByRelevanceFieldEnum]


  export const SceneReferredCharacterOrderByRelevanceFieldEnum: {
    sceneId: 'sceneId',
    characterId: 'characterId'
  };

  export type SceneReferredCharacterOrderByRelevanceFieldEnum = (typeof SceneReferredCharacterOrderByRelevanceFieldEnum)[keyof typeof SceneReferredCharacterOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'SavedType'
   */
  export type EnumSavedTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SavedType'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'StoryStatus'
   */
  export type EnumStoryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StoryStatus'>
    


  /**
   * Reference to a field of type 'StoryType'
   */
  export type EnumStoryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StoryType'>
    


  /**
   * Reference to a field of type 'Perspective'
   */
  export type EnumPerspectiveFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Perspective'>
    


  /**
   * Reference to a field of type 'ParagraphState'
   */
  export type EnumParagraphStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ParagraphState'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'ParagraphCommentType'
   */
  export type EnumParagraphCommentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ParagraphCommentType'>
    


  /**
   * Reference to a field of type 'PublishingPlatform'
   */
  export type EnumPublishingPlatformFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PublishingPlatform'>
    


  /**
   * Reference to a field of type 'PublishingStatus'
   */
  export type EnumPublishingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PublishingStatus'>
    


  /**
   * Reference to a field of type 'PlotPointState'
   */
  export type EnumPlotPointStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlotPointState'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    avatarUrl?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    ownedStories?: StoryListRelationFilter
    bookShelfStories?: BookShelfStoryListRelationFilter
    accessKeys?: AccessKeyListRelationFilter
    paragraphComments?: ParagraphCommentListRelationFilter
    files?: FileListRelationFilter
    sessions?: SessionListRelationFilter
    storyReadStatuses?: StoryReadStatusListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    ownedStories?: StoryOrderByRelationAggregateInput
    bookShelfStories?: BookShelfStoryOrderByRelationAggregateInput
    accessKeys?: AccessKeyOrderByRelationAggregateInput
    paragraphComments?: ParagraphCommentOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    storyReadStatuses?: StoryReadStatusOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    name?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    avatarUrl?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    ownedStories?: StoryListRelationFilter
    bookShelfStories?: BookShelfStoryListRelationFilter
    accessKeys?: AccessKeyListRelationFilter
    paragraphComments?: ParagraphCommentListRelationFilter
    files?: FileListRelationFilter
    sessions?: SessionListRelationFilter
    storyReadStatuses?: StoryReadStatusListRelationFilter
  }, "id" | "email" | "name">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    ownerId?: IntFilter<"Session"> | number
    validUntil?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    validUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    _relevance?: SessionOrderByRelevanceInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    ownerId?: IntFilter<"Session"> | number
    validUntil?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    validUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    ownerId?: IntWithAggregatesFilter<"Session"> | number
    validUntil?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type AccessKeyWhereInput = {
    AND?: AccessKeyWhereInput | AccessKeyWhereInput[]
    OR?: AccessKeyWhereInput[]
    NOT?: AccessKeyWhereInput | AccessKeyWhereInput[]
    id?: IntFilter<"AccessKey"> | number
    key?: StringFilter<"AccessKey"> | string
    description?: StringNullableFilter<"AccessKey"> | string | null
    ownerId?: IntFilter<"AccessKey"> | number
    createdAt?: DateTimeFilter<"AccessKey"> | Date | string
    updatedAt?: DateTimeFilter<"AccessKey"> | Date | string
    lastUsedAt?: DateTimeNullableFilter<"AccessKey"> | Date | string | null
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccessKeyOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    description?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    owner?: UserOrderByWithRelationInput
    _relevance?: AccessKeyOrderByRelevanceInput
  }

  export type AccessKeyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    key?: string
    AND?: AccessKeyWhereInput | AccessKeyWhereInput[]
    OR?: AccessKeyWhereInput[]
    NOT?: AccessKeyWhereInput | AccessKeyWhereInput[]
    description?: StringNullableFilter<"AccessKey"> | string | null
    ownerId?: IntFilter<"AccessKey"> | number
    createdAt?: DateTimeFilter<"AccessKey"> | Date | string
    updatedAt?: DateTimeFilter<"AccessKey"> | Date | string
    lastUsedAt?: DateTimeNullableFilter<"AccessKey"> | Date | string | null
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "key">

  export type AccessKeyOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    description?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    _count?: AccessKeyCountOrderByAggregateInput
    _avg?: AccessKeyAvgOrderByAggregateInput
    _max?: AccessKeyMaxOrderByAggregateInput
    _min?: AccessKeyMinOrderByAggregateInput
    _sum?: AccessKeySumOrderByAggregateInput
  }

  export type AccessKeyScalarWhereWithAggregatesInput = {
    AND?: AccessKeyScalarWhereWithAggregatesInput | AccessKeyScalarWhereWithAggregatesInput[]
    OR?: AccessKeyScalarWhereWithAggregatesInput[]
    NOT?: AccessKeyScalarWhereWithAggregatesInput | AccessKeyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AccessKey"> | number
    key?: StringWithAggregatesFilter<"AccessKey"> | string
    description?: StringNullableWithAggregatesFilter<"AccessKey"> | string | null
    ownerId?: IntWithAggregatesFilter<"AccessKey"> | number
    createdAt?: DateTimeWithAggregatesFilter<"AccessKey"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AccessKey"> | Date | string
    lastUsedAt?: DateTimeNullableWithAggregatesFilter<"AccessKey"> | Date | string | null
  }

  export type BookShelfStoryWhereInput = {
    AND?: BookShelfStoryWhereInput | BookShelfStoryWhereInput[]
    OR?: BookShelfStoryWhereInput[]
    NOT?: BookShelfStoryWhereInput | BookShelfStoryWhereInput[]
    id?: IntFilter<"BookShelfStory"> | number
    name?: StringFilter<"BookShelfStory"> | string
    ownerId?: IntFilter<"BookShelfStory"> | number
    storyId?: StringFilter<"BookShelfStory"> | string
    kind?: EnumSavedTypeFilter<"BookShelfStory"> | $Enums.SavedType
    createdAt?: DateTimeFilter<"BookShelfStory"> | Date | string
    updatedAt?: DateTimeFilter<"BookShelfStory"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
  }

  export type BookShelfStoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    storyId?: SortOrder
    kind?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    story?: StoryOrderByWithRelationInput
    _relevance?: BookShelfStoryOrderByRelevanceInput
  }

  export type BookShelfStoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BookShelfStoryWhereInput | BookShelfStoryWhereInput[]
    OR?: BookShelfStoryWhereInput[]
    NOT?: BookShelfStoryWhereInput | BookShelfStoryWhereInput[]
    name?: StringFilter<"BookShelfStory"> | string
    ownerId?: IntFilter<"BookShelfStory"> | number
    storyId?: StringFilter<"BookShelfStory"> | string
    kind?: EnumSavedTypeFilter<"BookShelfStory"> | $Enums.SavedType
    createdAt?: DateTimeFilter<"BookShelfStory"> | Date | string
    updatedAt?: DateTimeFilter<"BookShelfStory"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
  }, "id">

  export type BookShelfStoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    storyId?: SortOrder
    kind?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookShelfStoryCountOrderByAggregateInput
    _avg?: BookShelfStoryAvgOrderByAggregateInput
    _max?: BookShelfStoryMaxOrderByAggregateInput
    _min?: BookShelfStoryMinOrderByAggregateInput
    _sum?: BookShelfStorySumOrderByAggregateInput
  }

  export type BookShelfStoryScalarWhereWithAggregatesInput = {
    AND?: BookShelfStoryScalarWhereWithAggregatesInput | BookShelfStoryScalarWhereWithAggregatesInput[]
    OR?: BookShelfStoryScalarWhereWithAggregatesInput[]
    NOT?: BookShelfStoryScalarWhereWithAggregatesInput | BookShelfStoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BookShelfStory"> | number
    name?: StringWithAggregatesFilter<"BookShelfStory"> | string
    ownerId?: IntWithAggregatesFilter<"BookShelfStory"> | number
    storyId?: StringWithAggregatesFilter<"BookShelfStory"> | string
    kind?: EnumSavedTypeWithAggregatesFilter<"BookShelfStory"> | $Enums.SavedType
    createdAt?: DateTimeWithAggregatesFilter<"BookShelfStory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BookShelfStory"> | Date | string
  }

  export type StoryWhereInput = {
    AND?: StoryWhereInput | StoryWhereInput[]
    OR?: StoryWhereInput[]
    NOT?: StoryWhereInput | StoryWhereInput[]
    id?: StringFilter<"Story"> | string
    name?: StringFilter<"Story"> | string
    summary?: StringNullableFilter<"Story"> | string | null
    ownerId?: IntFilter<"Story"> | number
    royalRoadId?: IntNullableFilter<"Story"> | number | null
    published?: BoolFilter<"Story"> | boolean
    status?: EnumStoryStatusFilter<"Story"> | $Enums.StoryStatus
    type?: EnumStoryTypeFilter<"Story"> | $Enums.StoryType
    wordsPerWeek?: IntNullableFilter<"Story"> | number | null
    spellingLevel?: IntNullableFilter<"Story"> | number | null
    chapters?: IntNullableFilter<"Story"> | number | null
    firstChapterReleasedAt?: DateTimeNullableFilter<"Story"> | Date | string | null
    lastChapterReleasedAt?: DateTimeNullableFilter<"Story"> | Date | string | null
    coverArtFileId?: StringNullableFilter<"Story"> | string | null
    coverColor?: StringFilter<"Story"> | string
    coverTextColor?: StringFilter<"Story"> | string
    coverFontFamily?: StringFilter<"Story"> | string
    defaultPerspective?: EnumPerspectiveNullableFilter<"Story"> | $Enums.Perspective | null
    defaultProtagonistId?: StringNullableFilter<"Story"> | string | null
    createdAt?: DateTimeFilter<"Story"> | Date | string
    updatedAt?: DateTimeFilter<"Story"> | Date | string
    sortOrder?: IntFilter<"Story"> | number
    pages?: IntNullableFilter<"Story"> | number | null
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    bookShelfStories?: BookShelfStoryListRelationFilter
    coverArtFile?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    defaultProtagonist?: XOR<CharacterNullableScalarRelationFilter, CharacterWhereInput> | null
    books?: BookListRelationFilter
    files?: FileListRelationFilter
    storyReadStatuses?: StoryReadStatusListRelationFilter
    storyTags?: StoryTagListRelationFilter
    characters?: CharacterListRelationFilter
    locations?: LocationListRelationFilter
    plotPoints?: PlotPointListRelationFilter
    items?: ItemListRelationFilter
  }

  export type StoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    royalRoadId?: SortOrderInput | SortOrder
    published?: SortOrder
    status?: SortOrder
    type?: SortOrder
    wordsPerWeek?: SortOrderInput | SortOrder
    spellingLevel?: SortOrderInput | SortOrder
    chapters?: SortOrderInput | SortOrder
    firstChapterReleasedAt?: SortOrderInput | SortOrder
    lastChapterReleasedAt?: SortOrderInput | SortOrder
    coverArtFileId?: SortOrderInput | SortOrder
    coverColor?: SortOrder
    coverTextColor?: SortOrder
    coverFontFamily?: SortOrder
    defaultPerspective?: SortOrderInput | SortOrder
    defaultProtagonistId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sortOrder?: SortOrder
    pages?: SortOrderInput | SortOrder
    owner?: UserOrderByWithRelationInput
    bookShelfStories?: BookShelfStoryOrderByRelationAggregateInput
    coverArtFile?: FileOrderByWithRelationInput
    defaultProtagonist?: CharacterOrderByWithRelationInput
    books?: BookOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
    storyReadStatuses?: StoryReadStatusOrderByRelationAggregateInput
    storyTags?: StoryTagOrderByRelationAggregateInput
    characters?: CharacterOrderByRelationAggregateInput
    locations?: LocationOrderByRelationAggregateInput
    plotPoints?: PlotPointOrderByRelationAggregateInput
    items?: ItemOrderByRelationAggregateInput
    _relevance?: StoryOrderByRelevanceInput
  }

  export type StoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    royalRoadId?: number
    AND?: StoryWhereInput | StoryWhereInput[]
    OR?: StoryWhereInput[]
    NOT?: StoryWhereInput | StoryWhereInput[]
    name?: StringFilter<"Story"> | string
    summary?: StringNullableFilter<"Story"> | string | null
    ownerId?: IntFilter<"Story"> | number
    published?: BoolFilter<"Story"> | boolean
    status?: EnumStoryStatusFilter<"Story"> | $Enums.StoryStatus
    type?: EnumStoryTypeFilter<"Story"> | $Enums.StoryType
    wordsPerWeek?: IntNullableFilter<"Story"> | number | null
    spellingLevel?: IntNullableFilter<"Story"> | number | null
    chapters?: IntNullableFilter<"Story"> | number | null
    firstChapterReleasedAt?: DateTimeNullableFilter<"Story"> | Date | string | null
    lastChapterReleasedAt?: DateTimeNullableFilter<"Story"> | Date | string | null
    coverArtFileId?: StringNullableFilter<"Story"> | string | null
    coverColor?: StringFilter<"Story"> | string
    coverTextColor?: StringFilter<"Story"> | string
    coverFontFamily?: StringFilter<"Story"> | string
    defaultPerspective?: EnumPerspectiveNullableFilter<"Story"> | $Enums.Perspective | null
    defaultProtagonistId?: StringNullableFilter<"Story"> | string | null
    createdAt?: DateTimeFilter<"Story"> | Date | string
    updatedAt?: DateTimeFilter<"Story"> | Date | string
    sortOrder?: IntFilter<"Story"> | number
    pages?: IntNullableFilter<"Story"> | number | null
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    bookShelfStories?: BookShelfStoryListRelationFilter
    coverArtFile?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    defaultProtagonist?: XOR<CharacterNullableScalarRelationFilter, CharacterWhereInput> | null
    books?: BookListRelationFilter
    files?: FileListRelationFilter
    storyReadStatuses?: StoryReadStatusListRelationFilter
    storyTags?: StoryTagListRelationFilter
    characters?: CharacterListRelationFilter
    locations?: LocationListRelationFilter
    plotPoints?: PlotPointListRelationFilter
    items?: ItemListRelationFilter
  }, "id" | "royalRoadId">

  export type StoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    royalRoadId?: SortOrderInput | SortOrder
    published?: SortOrder
    status?: SortOrder
    type?: SortOrder
    wordsPerWeek?: SortOrderInput | SortOrder
    spellingLevel?: SortOrderInput | SortOrder
    chapters?: SortOrderInput | SortOrder
    firstChapterReleasedAt?: SortOrderInput | SortOrder
    lastChapterReleasedAt?: SortOrderInput | SortOrder
    coverArtFileId?: SortOrderInput | SortOrder
    coverColor?: SortOrder
    coverTextColor?: SortOrder
    coverFontFamily?: SortOrder
    defaultPerspective?: SortOrderInput | SortOrder
    defaultProtagonistId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sortOrder?: SortOrder
    pages?: SortOrderInput | SortOrder
    _count?: StoryCountOrderByAggregateInput
    _avg?: StoryAvgOrderByAggregateInput
    _max?: StoryMaxOrderByAggregateInput
    _min?: StoryMinOrderByAggregateInput
    _sum?: StorySumOrderByAggregateInput
  }

  export type StoryScalarWhereWithAggregatesInput = {
    AND?: StoryScalarWhereWithAggregatesInput | StoryScalarWhereWithAggregatesInput[]
    OR?: StoryScalarWhereWithAggregatesInput[]
    NOT?: StoryScalarWhereWithAggregatesInput | StoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Story"> | string
    name?: StringWithAggregatesFilter<"Story"> | string
    summary?: StringNullableWithAggregatesFilter<"Story"> | string | null
    ownerId?: IntWithAggregatesFilter<"Story"> | number
    royalRoadId?: IntNullableWithAggregatesFilter<"Story"> | number | null
    published?: BoolWithAggregatesFilter<"Story"> | boolean
    status?: EnumStoryStatusWithAggregatesFilter<"Story"> | $Enums.StoryStatus
    type?: EnumStoryTypeWithAggregatesFilter<"Story"> | $Enums.StoryType
    wordsPerWeek?: IntNullableWithAggregatesFilter<"Story"> | number | null
    spellingLevel?: IntNullableWithAggregatesFilter<"Story"> | number | null
    chapters?: IntNullableWithAggregatesFilter<"Story"> | number | null
    firstChapterReleasedAt?: DateTimeNullableWithAggregatesFilter<"Story"> | Date | string | null
    lastChapterReleasedAt?: DateTimeNullableWithAggregatesFilter<"Story"> | Date | string | null
    coverArtFileId?: StringNullableWithAggregatesFilter<"Story"> | string | null
    coverColor?: StringWithAggregatesFilter<"Story"> | string
    coverTextColor?: StringWithAggregatesFilter<"Story"> | string
    coverFontFamily?: StringWithAggregatesFilter<"Story"> | string
    defaultPerspective?: EnumPerspectiveNullableWithAggregatesFilter<"Story"> | $Enums.Perspective | null
    defaultProtagonistId?: StringNullableWithAggregatesFilter<"Story"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Story"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Story"> | Date | string
    sortOrder?: IntWithAggregatesFilter<"Story"> | number
    pages?: IntNullableWithAggregatesFilter<"Story"> | number | null
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: StringFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
    storyTags?: StoryTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    storyTags?: StoryTagOrderByRelationAggregateInput
    _relevance?: TagOrderByRelevanceInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
    storyTags?: StoryTagListRelationFilter
  }, "id" | "name">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tag"> | string
    name?: StringWithAggregatesFilter<"Tag"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
  }

  export type StoryTagWhereInput = {
    AND?: StoryTagWhereInput | StoryTagWhereInput[]
    OR?: StoryTagWhereInput[]
    NOT?: StoryTagWhereInput | StoryTagWhereInput[]
    id?: StringFilter<"StoryTag"> | string
    storyId?: StringFilter<"StoryTag"> | string
    tagId?: StringFilter<"StoryTag"> | string
    createdAt?: DateTimeFilter<"StoryTag"> | Date | string
    updatedAt?: DateTimeFilter<"StoryTag"> | Date | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }

  export type StoryTagOrderByWithRelationInput = {
    id?: SortOrder
    storyId?: SortOrder
    tagId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    story?: StoryOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
    _relevance?: StoryTagOrderByRelevanceInput
  }

  export type StoryTagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    storyId_tagId?: StoryTagStoryIdTagIdCompoundUniqueInput
    AND?: StoryTagWhereInput | StoryTagWhereInput[]
    OR?: StoryTagWhereInput[]
    NOT?: StoryTagWhereInput | StoryTagWhereInput[]
    storyId?: StringFilter<"StoryTag"> | string
    tagId?: StringFilter<"StoryTag"> | string
    createdAt?: DateTimeFilter<"StoryTag"> | Date | string
    updatedAt?: DateTimeFilter<"StoryTag"> | Date | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }, "id" | "storyId_tagId">

  export type StoryTagOrderByWithAggregationInput = {
    id?: SortOrder
    storyId?: SortOrder
    tagId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StoryTagCountOrderByAggregateInput
    _max?: StoryTagMaxOrderByAggregateInput
    _min?: StoryTagMinOrderByAggregateInput
  }

  export type StoryTagScalarWhereWithAggregatesInput = {
    AND?: StoryTagScalarWhereWithAggregatesInput | StoryTagScalarWhereWithAggregatesInput[]
    OR?: StoryTagScalarWhereWithAggregatesInput[]
    NOT?: StoryTagScalarWhereWithAggregatesInput | StoryTagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StoryTag"> | string
    storyId?: StringWithAggregatesFilter<"StoryTag"> | string
    tagId?: StringWithAggregatesFilter<"StoryTag"> | string
    createdAt?: DateTimeWithAggregatesFilter<"StoryTag"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StoryTag"> | Date | string
  }

  export type StoryReadStatusWhereInput = {
    AND?: StoryReadStatusWhereInput | StoryReadStatusWhereInput[]
    OR?: StoryReadStatusWhereInput[]
    NOT?: StoryReadStatusWhereInput | StoryReadStatusWhereInput[]
    id?: StringFilter<"StoryReadStatus"> | string
    storyId?: StringFilter<"StoryReadStatus"> | string
    userId?: IntFilter<"StoryReadStatus"> | number
    lastChapterId?: StringNullableFilter<"StoryReadStatus"> | string | null
    lastChapterReadAt?: DateTimeNullableFilter<"StoryReadStatus"> | Date | string | null
    createdAt?: DateTimeFilter<"StoryReadStatus"> | Date | string
    updatedAt?: DateTimeFilter<"StoryReadStatus"> | Date | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    lastChapter?: XOR<ChapterNullableScalarRelationFilter, ChapterWhereInput> | null
  }

  export type StoryReadStatusOrderByWithRelationInput = {
    id?: SortOrder
    storyId?: SortOrder
    userId?: SortOrder
    lastChapterId?: SortOrderInput | SortOrder
    lastChapterReadAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    story?: StoryOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    lastChapter?: ChapterOrderByWithRelationInput
    _relevance?: StoryReadStatusOrderByRelevanceInput
  }

  export type StoryReadStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StoryReadStatusWhereInput | StoryReadStatusWhereInput[]
    OR?: StoryReadStatusWhereInput[]
    NOT?: StoryReadStatusWhereInput | StoryReadStatusWhereInput[]
    storyId?: StringFilter<"StoryReadStatus"> | string
    userId?: IntFilter<"StoryReadStatus"> | number
    lastChapterId?: StringNullableFilter<"StoryReadStatus"> | string | null
    lastChapterReadAt?: DateTimeNullableFilter<"StoryReadStatus"> | Date | string | null
    createdAt?: DateTimeFilter<"StoryReadStatus"> | Date | string
    updatedAt?: DateTimeFilter<"StoryReadStatus"> | Date | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    lastChapter?: XOR<ChapterNullableScalarRelationFilter, ChapterWhereInput> | null
  }, "id">

  export type StoryReadStatusOrderByWithAggregationInput = {
    id?: SortOrder
    storyId?: SortOrder
    userId?: SortOrder
    lastChapterId?: SortOrderInput | SortOrder
    lastChapterReadAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StoryReadStatusCountOrderByAggregateInput
    _avg?: StoryReadStatusAvgOrderByAggregateInput
    _max?: StoryReadStatusMaxOrderByAggregateInput
    _min?: StoryReadStatusMinOrderByAggregateInput
    _sum?: StoryReadStatusSumOrderByAggregateInput
  }

  export type StoryReadStatusScalarWhereWithAggregatesInput = {
    AND?: StoryReadStatusScalarWhereWithAggregatesInput | StoryReadStatusScalarWhereWithAggregatesInput[]
    OR?: StoryReadStatusScalarWhereWithAggregatesInput[]
    NOT?: StoryReadStatusScalarWhereWithAggregatesInput | StoryReadStatusScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StoryReadStatus"> | string
    storyId?: StringWithAggregatesFilter<"StoryReadStatus"> | string
    userId?: IntWithAggregatesFilter<"StoryReadStatus"> | number
    lastChapterId?: StringNullableWithAggregatesFilter<"StoryReadStatus"> | string | null
    lastChapterReadAt?: DateTimeNullableWithAggregatesFilter<"StoryReadStatus"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StoryReadStatus"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StoryReadStatus"> | Date | string
  }

  export type BookWhereInput = {
    AND?: BookWhereInput | BookWhereInput[]
    OR?: BookWhereInput[]
    NOT?: BookWhereInput | BookWhereInput[]
    id?: StringFilter<"Book"> | string
    name?: StringFilter<"Book"> | string
    summary?: StringNullableFilter<"Book"> | string | null
    storyId?: StringFilter<"Book"> | string
    coverArtFileId?: StringNullableFilter<"Book"> | string | null
    spineArtFileId?: StringNullableFilter<"Book"> | string | null
    pages?: IntNullableFilter<"Book"> | number | null
    sortOrder?: IntFilter<"Book"> | number
    nodeType?: StringFilter<"Book"> | string
    createdAt?: DateTimeFilter<"Book"> | Date | string
    updatedAt?: DateTimeFilter<"Book"> | Date | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
    coverArtFile?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    spineArtFile?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    arcs?: ArcListRelationFilter
  }

  export type BookOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrderInput | SortOrder
    storyId?: SortOrder
    coverArtFileId?: SortOrderInput | SortOrder
    spineArtFileId?: SortOrderInput | SortOrder
    pages?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    nodeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    story?: StoryOrderByWithRelationInput
    coverArtFile?: FileOrderByWithRelationInput
    spineArtFile?: FileOrderByWithRelationInput
    arcs?: ArcOrderByRelationAggregateInput
    _relevance?: BookOrderByRelevanceInput
  }

  export type BookWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BookWhereInput | BookWhereInput[]
    OR?: BookWhereInput[]
    NOT?: BookWhereInput | BookWhereInput[]
    name?: StringFilter<"Book"> | string
    summary?: StringNullableFilter<"Book"> | string | null
    storyId?: StringFilter<"Book"> | string
    coverArtFileId?: StringNullableFilter<"Book"> | string | null
    spineArtFileId?: StringNullableFilter<"Book"> | string | null
    pages?: IntNullableFilter<"Book"> | number | null
    sortOrder?: IntFilter<"Book"> | number
    nodeType?: StringFilter<"Book"> | string
    createdAt?: DateTimeFilter<"Book"> | Date | string
    updatedAt?: DateTimeFilter<"Book"> | Date | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
    coverArtFile?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    spineArtFile?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    arcs?: ArcListRelationFilter
  }, "id">

  export type BookOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrderInput | SortOrder
    storyId?: SortOrder
    coverArtFileId?: SortOrderInput | SortOrder
    spineArtFileId?: SortOrderInput | SortOrder
    pages?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    nodeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookCountOrderByAggregateInput
    _avg?: BookAvgOrderByAggregateInput
    _max?: BookMaxOrderByAggregateInput
    _min?: BookMinOrderByAggregateInput
    _sum?: BookSumOrderByAggregateInput
  }

  export type BookScalarWhereWithAggregatesInput = {
    AND?: BookScalarWhereWithAggregatesInput | BookScalarWhereWithAggregatesInput[]
    OR?: BookScalarWhereWithAggregatesInput[]
    NOT?: BookScalarWhereWithAggregatesInput | BookScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Book"> | string
    name?: StringWithAggregatesFilter<"Book"> | string
    summary?: StringNullableWithAggregatesFilter<"Book"> | string | null
    storyId?: StringWithAggregatesFilter<"Book"> | string
    coverArtFileId?: StringNullableWithAggregatesFilter<"Book"> | string | null
    spineArtFileId?: StringNullableWithAggregatesFilter<"Book"> | string | null
    pages?: IntNullableWithAggregatesFilter<"Book"> | number | null
    sortOrder?: IntWithAggregatesFilter<"Book"> | number
    nodeType?: StringWithAggregatesFilter<"Book"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Book"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Book"> | Date | string
  }

  export type ArcWhereInput = {
    AND?: ArcWhereInput | ArcWhereInput[]
    OR?: ArcWhereInput[]
    NOT?: ArcWhereInput | ArcWhereInput[]
    id?: StringFilter<"Arc"> | string
    name?: StringFilter<"Arc"> | string
    summary?: StringNullableFilter<"Arc"> | string | null
    bookId?: StringFilter<"Arc"> | string
    sortOrder?: IntFilter<"Arc"> | number
    nodeType?: StringFilter<"Arc"> | string
    createdAt?: DateTimeFilter<"Arc"> | Date | string
    updatedAt?: DateTimeFilter<"Arc"> | Date | string
    book?: XOR<BookScalarRelationFilter, BookWhereInput>
    chapters?: ChapterListRelationFilter
  }

  export type ArcOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrderInput | SortOrder
    bookId?: SortOrder
    sortOrder?: SortOrder
    nodeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    book?: BookOrderByWithRelationInput
    chapters?: ChapterOrderByRelationAggregateInput
    _relevance?: ArcOrderByRelevanceInput
  }

  export type ArcWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ArcWhereInput | ArcWhereInput[]
    OR?: ArcWhereInput[]
    NOT?: ArcWhereInput | ArcWhereInput[]
    name?: StringFilter<"Arc"> | string
    summary?: StringNullableFilter<"Arc"> | string | null
    bookId?: StringFilter<"Arc"> | string
    sortOrder?: IntFilter<"Arc"> | number
    nodeType?: StringFilter<"Arc"> | string
    createdAt?: DateTimeFilter<"Arc"> | Date | string
    updatedAt?: DateTimeFilter<"Arc"> | Date | string
    book?: XOR<BookScalarRelationFilter, BookWhereInput>
    chapters?: ChapterListRelationFilter
  }, "id">

  export type ArcOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrderInput | SortOrder
    bookId?: SortOrder
    sortOrder?: SortOrder
    nodeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ArcCountOrderByAggregateInput
    _avg?: ArcAvgOrderByAggregateInput
    _max?: ArcMaxOrderByAggregateInput
    _min?: ArcMinOrderByAggregateInput
    _sum?: ArcSumOrderByAggregateInput
  }

  export type ArcScalarWhereWithAggregatesInput = {
    AND?: ArcScalarWhereWithAggregatesInput | ArcScalarWhereWithAggregatesInput[]
    OR?: ArcScalarWhereWithAggregatesInput[]
    NOT?: ArcScalarWhereWithAggregatesInput | ArcScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Arc"> | string
    name?: StringWithAggregatesFilter<"Arc"> | string
    summary?: StringNullableWithAggregatesFilter<"Arc"> | string | null
    bookId?: StringWithAggregatesFilter<"Arc"> | string
    sortOrder?: IntWithAggregatesFilter<"Arc"> | number
    nodeType?: StringWithAggregatesFilter<"Arc"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Arc"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Arc"> | Date | string
  }

  export type ChapterWhereInput = {
    AND?: ChapterWhereInput | ChapterWhereInput[]
    OR?: ChapterWhereInput[]
    NOT?: ChapterWhereInput | ChapterWhereInput[]
    id?: StringFilter<"Chapter"> | string
    name?: StringFilter<"Chapter"> | string
    summary?: StringNullableFilter<"Chapter"> | string | null
    arcId?: StringFilter<"Chapter"> | string
    publishedOn?: DateTimeNullableFilter<"Chapter"> | Date | string | null
    sortOrder?: IntFilter<"Chapter"> | number
    royalRoadId?: IntNullableFilter<"Chapter"> | number | null
    createdAt?: DateTimeFilter<"Chapter"> | Date | string
    updatedAt?: DateTimeFilter<"Chapter"> | Date | string
    nodeType?: StringFilter<"Chapter"> | string
    arc?: XOR<ArcScalarRelationFilter, ArcWhereInput>
    scenes?: SceneListRelationFilter
    StoryReadStatus?: StoryReadStatusListRelationFilter
    publishingStatus?: ChapterPublishingListRelationFilter
  }

  export type ChapterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrderInput | SortOrder
    arcId?: SortOrder
    publishedOn?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    royalRoadId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nodeType?: SortOrder
    arc?: ArcOrderByWithRelationInput
    scenes?: SceneOrderByRelationAggregateInput
    StoryReadStatus?: StoryReadStatusOrderByRelationAggregateInput
    publishingStatus?: ChapterPublishingOrderByRelationAggregateInput
    _relevance?: ChapterOrderByRelevanceInput
  }

  export type ChapterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChapterWhereInput | ChapterWhereInput[]
    OR?: ChapterWhereInput[]
    NOT?: ChapterWhereInput | ChapterWhereInput[]
    name?: StringFilter<"Chapter"> | string
    summary?: StringNullableFilter<"Chapter"> | string | null
    arcId?: StringFilter<"Chapter"> | string
    publishedOn?: DateTimeNullableFilter<"Chapter"> | Date | string | null
    sortOrder?: IntFilter<"Chapter"> | number
    royalRoadId?: IntNullableFilter<"Chapter"> | number | null
    createdAt?: DateTimeFilter<"Chapter"> | Date | string
    updatedAt?: DateTimeFilter<"Chapter"> | Date | string
    nodeType?: StringFilter<"Chapter"> | string
    arc?: XOR<ArcScalarRelationFilter, ArcWhereInput>
    scenes?: SceneListRelationFilter
    StoryReadStatus?: StoryReadStatusListRelationFilter
    publishingStatus?: ChapterPublishingListRelationFilter
  }, "id">

  export type ChapterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrderInput | SortOrder
    arcId?: SortOrder
    publishedOn?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    royalRoadId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nodeType?: SortOrder
    _count?: ChapterCountOrderByAggregateInput
    _avg?: ChapterAvgOrderByAggregateInput
    _max?: ChapterMaxOrderByAggregateInput
    _min?: ChapterMinOrderByAggregateInput
    _sum?: ChapterSumOrderByAggregateInput
  }

  export type ChapterScalarWhereWithAggregatesInput = {
    AND?: ChapterScalarWhereWithAggregatesInput | ChapterScalarWhereWithAggregatesInput[]
    OR?: ChapterScalarWhereWithAggregatesInput[]
    NOT?: ChapterScalarWhereWithAggregatesInput | ChapterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Chapter"> | string
    name?: StringWithAggregatesFilter<"Chapter"> | string
    summary?: StringNullableWithAggregatesFilter<"Chapter"> | string | null
    arcId?: StringWithAggregatesFilter<"Chapter"> | string
    publishedOn?: DateTimeNullableWithAggregatesFilter<"Chapter"> | Date | string | null
    sortOrder?: IntWithAggregatesFilter<"Chapter"> | number
    royalRoadId?: IntNullableWithAggregatesFilter<"Chapter"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Chapter"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Chapter"> | Date | string
    nodeType?: StringWithAggregatesFilter<"Chapter"> | string
  }

  export type SceneWhereInput = {
    AND?: SceneWhereInput | SceneWhereInput[]
    OR?: SceneWhereInput[]
    NOT?: SceneWhereInput | SceneWhereInput[]
    id?: StringFilter<"Scene"> | string
    name?: StringFilter<"Scene"> | string
    summary?: StringNullableFilter<"Scene"> | string | null
    body?: StringFilter<"Scene"> | string
    chapterId?: StringFilter<"Scene"> | string
    sortOrder?: IntFilter<"Scene"> | number
    nodeType?: StringFilter<"Scene"> | string
    perspective?: EnumPerspectiveNullableFilter<"Scene"> | $Enums.Perspective | null
    protagonistId?: StringNullableFilter<"Scene"> | string | null
    locationId?: StringNullableFilter<"Scene"> | string | null
    createdAt?: DateTimeFilter<"Scene"> | Date | string
    updatedAt?: DateTimeFilter<"Scene"> | Date | string
    chapter?: XOR<ChapterScalarRelationFilter, ChapterWhereInput>
    protagonist?: XOR<CharacterNullableScalarRelationFilter, CharacterWhereInput> | null
    location?: XOR<LocationNullableScalarRelationFilter, LocationWhereInput> | null
    paragraphs?: ParagraphListRelationFilter
    participatingCharacters?: SceneCharacterListRelationFilter
    referredCharacters?: SceneReferredCharacterListRelationFilter
  }

  export type SceneOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrderInput | SortOrder
    body?: SortOrder
    chapterId?: SortOrder
    sortOrder?: SortOrder
    nodeType?: SortOrder
    perspective?: SortOrderInput | SortOrder
    protagonistId?: SortOrderInput | SortOrder
    locationId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chapter?: ChapterOrderByWithRelationInput
    protagonist?: CharacterOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
    paragraphs?: ParagraphOrderByRelationAggregateInput
    participatingCharacters?: SceneCharacterOrderByRelationAggregateInput
    referredCharacters?: SceneReferredCharacterOrderByRelationAggregateInput
    _relevance?: SceneOrderByRelevanceInput
  }

  export type SceneWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SceneWhereInput | SceneWhereInput[]
    OR?: SceneWhereInput[]
    NOT?: SceneWhereInput | SceneWhereInput[]
    name?: StringFilter<"Scene"> | string
    summary?: StringNullableFilter<"Scene"> | string | null
    body?: StringFilter<"Scene"> | string
    chapterId?: StringFilter<"Scene"> | string
    sortOrder?: IntFilter<"Scene"> | number
    nodeType?: StringFilter<"Scene"> | string
    perspective?: EnumPerspectiveNullableFilter<"Scene"> | $Enums.Perspective | null
    protagonistId?: StringNullableFilter<"Scene"> | string | null
    locationId?: StringNullableFilter<"Scene"> | string | null
    createdAt?: DateTimeFilter<"Scene"> | Date | string
    updatedAt?: DateTimeFilter<"Scene"> | Date | string
    chapter?: XOR<ChapterScalarRelationFilter, ChapterWhereInput>
    protagonist?: XOR<CharacterNullableScalarRelationFilter, CharacterWhereInput> | null
    location?: XOR<LocationNullableScalarRelationFilter, LocationWhereInput> | null
    paragraphs?: ParagraphListRelationFilter
    participatingCharacters?: SceneCharacterListRelationFilter
    referredCharacters?: SceneReferredCharacterListRelationFilter
  }, "id">

  export type SceneOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrderInput | SortOrder
    body?: SortOrder
    chapterId?: SortOrder
    sortOrder?: SortOrder
    nodeType?: SortOrder
    perspective?: SortOrderInput | SortOrder
    protagonistId?: SortOrderInput | SortOrder
    locationId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SceneCountOrderByAggregateInput
    _avg?: SceneAvgOrderByAggregateInput
    _max?: SceneMaxOrderByAggregateInput
    _min?: SceneMinOrderByAggregateInput
    _sum?: SceneSumOrderByAggregateInput
  }

  export type SceneScalarWhereWithAggregatesInput = {
    AND?: SceneScalarWhereWithAggregatesInput | SceneScalarWhereWithAggregatesInput[]
    OR?: SceneScalarWhereWithAggregatesInput[]
    NOT?: SceneScalarWhereWithAggregatesInput | SceneScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Scene"> | string
    name?: StringWithAggregatesFilter<"Scene"> | string
    summary?: StringNullableWithAggregatesFilter<"Scene"> | string | null
    body?: StringWithAggregatesFilter<"Scene"> | string
    chapterId?: StringWithAggregatesFilter<"Scene"> | string
    sortOrder?: IntWithAggregatesFilter<"Scene"> | number
    nodeType?: StringWithAggregatesFilter<"Scene"> | string
    perspective?: EnumPerspectiveNullableWithAggregatesFilter<"Scene"> | $Enums.Perspective | null
    protagonistId?: StringNullableWithAggregatesFilter<"Scene"> | string | null
    locationId?: StringNullableWithAggregatesFilter<"Scene"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Scene"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Scene"> | Date | string
  }

  export type ParagraphWhereInput = {
    AND?: ParagraphWhereInput | ParagraphWhereInput[]
    OR?: ParagraphWhereInput[]
    NOT?: ParagraphWhereInput | ParagraphWhereInput[]
    id?: StringFilter<"Paragraph"> | string
    sceneId?: StringFilter<"Paragraph"> | string
    createdAt?: DateTimeFilter<"Paragraph"> | Date | string
    updatedAt?: DateTimeFilter<"Paragraph"> | Date | string
    sortOrder?: IntFilter<"Paragraph"> | number
    scene?: XOR<SceneScalarRelationFilter, SceneWhereInput>
    paragraphRevisions?: ParagraphRevisionListRelationFilter
  }

  export type ParagraphOrderByWithRelationInput = {
    id?: SortOrder
    sceneId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sortOrder?: SortOrder
    scene?: SceneOrderByWithRelationInput
    paragraphRevisions?: ParagraphRevisionOrderByRelationAggregateInput
    _relevance?: ParagraphOrderByRelevanceInput
  }

  export type ParagraphWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ParagraphWhereInput | ParagraphWhereInput[]
    OR?: ParagraphWhereInput[]
    NOT?: ParagraphWhereInput | ParagraphWhereInput[]
    sceneId?: StringFilter<"Paragraph"> | string
    createdAt?: DateTimeFilter<"Paragraph"> | Date | string
    updatedAt?: DateTimeFilter<"Paragraph"> | Date | string
    sortOrder?: IntFilter<"Paragraph"> | number
    scene?: XOR<SceneScalarRelationFilter, SceneWhereInput>
    paragraphRevisions?: ParagraphRevisionListRelationFilter
  }, "id">

  export type ParagraphOrderByWithAggregationInput = {
    id?: SortOrder
    sceneId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sortOrder?: SortOrder
    _count?: ParagraphCountOrderByAggregateInput
    _avg?: ParagraphAvgOrderByAggregateInput
    _max?: ParagraphMaxOrderByAggregateInput
    _min?: ParagraphMinOrderByAggregateInput
    _sum?: ParagraphSumOrderByAggregateInput
  }

  export type ParagraphScalarWhereWithAggregatesInput = {
    AND?: ParagraphScalarWhereWithAggregatesInput | ParagraphScalarWhereWithAggregatesInput[]
    OR?: ParagraphScalarWhereWithAggregatesInput[]
    NOT?: ParagraphScalarWhereWithAggregatesInput | ParagraphScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Paragraph"> | string
    sceneId?: StringWithAggregatesFilter<"Paragraph"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Paragraph"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Paragraph"> | Date | string
    sortOrder?: IntWithAggregatesFilter<"Paragraph"> | number
  }

  export type ParagraphRevisionWhereInput = {
    AND?: ParagraphRevisionWhereInput | ParagraphRevisionWhereInput[]
    OR?: ParagraphRevisionWhereInput[]
    NOT?: ParagraphRevisionWhereInput | ParagraphRevisionWhereInput[]
    id?: StringFilter<"ParagraphRevision"> | string
    paragraphId?: StringFilter<"ParagraphRevision"> | string
    body?: StringFilter<"ParagraphRevision"> | string
    contentSchema?: StringNullableFilter<"ParagraphRevision"> | string | null
    version?: IntFilter<"ParagraphRevision"> | number
    state?: EnumParagraphStateNullableFilter<"ParagraphRevision"> | $Enums.ParagraphState | null
    aiCharacters?: IntNullableFilter<"ParagraphRevision"> | number | null
    humanCharacters?: IntNullableFilter<"ParagraphRevision"> | number | null
    plotPointActions?: JsonNullableFilter<"ParagraphRevision">
    inventoryActions?: JsonNullableFilter<"ParagraphRevision">
    createdAt?: DateTimeFilter<"ParagraphRevision"> | Date | string
    paragraph?: XOR<ParagraphScalarRelationFilter, ParagraphWhereInput>
    paragraphComment?: ParagraphCommentListRelationFilter
  }

  export type ParagraphRevisionOrderByWithRelationInput = {
    id?: SortOrder
    paragraphId?: SortOrder
    body?: SortOrder
    contentSchema?: SortOrderInput | SortOrder
    version?: SortOrder
    state?: SortOrderInput | SortOrder
    aiCharacters?: SortOrderInput | SortOrder
    humanCharacters?: SortOrderInput | SortOrder
    plotPointActions?: SortOrderInput | SortOrder
    inventoryActions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    paragraph?: ParagraphOrderByWithRelationInput
    paragraphComment?: ParagraphCommentOrderByRelationAggregateInput
    _relevance?: ParagraphRevisionOrderByRelevanceInput
  }

  export type ParagraphRevisionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ParagraphRevisionWhereInput | ParagraphRevisionWhereInput[]
    OR?: ParagraphRevisionWhereInput[]
    NOT?: ParagraphRevisionWhereInput | ParagraphRevisionWhereInput[]
    paragraphId?: StringFilter<"ParagraphRevision"> | string
    body?: StringFilter<"ParagraphRevision"> | string
    contentSchema?: StringNullableFilter<"ParagraphRevision"> | string | null
    version?: IntFilter<"ParagraphRevision"> | number
    state?: EnumParagraphStateNullableFilter<"ParagraphRevision"> | $Enums.ParagraphState | null
    aiCharacters?: IntNullableFilter<"ParagraphRevision"> | number | null
    humanCharacters?: IntNullableFilter<"ParagraphRevision"> | number | null
    plotPointActions?: JsonNullableFilter<"ParagraphRevision">
    inventoryActions?: JsonNullableFilter<"ParagraphRevision">
    createdAt?: DateTimeFilter<"ParagraphRevision"> | Date | string
    paragraph?: XOR<ParagraphScalarRelationFilter, ParagraphWhereInput>
    paragraphComment?: ParagraphCommentListRelationFilter
  }, "id">

  export type ParagraphRevisionOrderByWithAggregationInput = {
    id?: SortOrder
    paragraphId?: SortOrder
    body?: SortOrder
    contentSchema?: SortOrderInput | SortOrder
    version?: SortOrder
    state?: SortOrderInput | SortOrder
    aiCharacters?: SortOrderInput | SortOrder
    humanCharacters?: SortOrderInput | SortOrder
    plotPointActions?: SortOrderInput | SortOrder
    inventoryActions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ParagraphRevisionCountOrderByAggregateInput
    _avg?: ParagraphRevisionAvgOrderByAggregateInput
    _max?: ParagraphRevisionMaxOrderByAggregateInput
    _min?: ParagraphRevisionMinOrderByAggregateInput
    _sum?: ParagraphRevisionSumOrderByAggregateInput
  }

  export type ParagraphRevisionScalarWhereWithAggregatesInput = {
    AND?: ParagraphRevisionScalarWhereWithAggregatesInput | ParagraphRevisionScalarWhereWithAggregatesInput[]
    OR?: ParagraphRevisionScalarWhereWithAggregatesInput[]
    NOT?: ParagraphRevisionScalarWhereWithAggregatesInput | ParagraphRevisionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ParagraphRevision"> | string
    paragraphId?: StringWithAggregatesFilter<"ParagraphRevision"> | string
    body?: StringWithAggregatesFilter<"ParagraphRevision"> | string
    contentSchema?: StringNullableWithAggregatesFilter<"ParagraphRevision"> | string | null
    version?: IntWithAggregatesFilter<"ParagraphRevision"> | number
    state?: EnumParagraphStateNullableWithAggregatesFilter<"ParagraphRevision"> | $Enums.ParagraphState | null
    aiCharacters?: IntNullableWithAggregatesFilter<"ParagraphRevision"> | number | null
    humanCharacters?: IntNullableWithAggregatesFilter<"ParagraphRevision"> | number | null
    plotPointActions?: JsonNullableWithAggregatesFilter<"ParagraphRevision">
    inventoryActions?: JsonNullableWithAggregatesFilter<"ParagraphRevision">
    createdAt?: DateTimeWithAggregatesFilter<"ParagraphRevision"> | Date | string
  }

  export type ParagraphCommentWhereInput = {
    AND?: ParagraphCommentWhereInput | ParagraphCommentWhereInput[]
    OR?: ParagraphCommentWhereInput[]
    NOT?: ParagraphCommentWhereInput | ParagraphCommentWhereInput[]
    id?: IntFilter<"ParagraphComment"> | number
    paragraphRevisionId?: StringFilter<"ParagraphComment"> | string
    ownerId?: IntFilter<"ParagraphComment"> | number
    body?: StringFilter<"ParagraphComment"> | string
    type?: EnumParagraphCommentTypeFilter<"ParagraphComment"> | $Enums.ParagraphCommentType
    createdAt?: DateTimeFilter<"ParagraphComment"> | Date | string
    updatedAt?: DateTimeFilter<"ParagraphComment"> | Date | string
    paragraphRevision?: XOR<ParagraphRevisionScalarRelationFilter, ParagraphRevisionWhereInput>
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ParagraphCommentOrderByWithRelationInput = {
    id?: SortOrder
    paragraphRevisionId?: SortOrder
    ownerId?: SortOrder
    body?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    paragraphRevision?: ParagraphRevisionOrderByWithRelationInput
    owner?: UserOrderByWithRelationInput
    _relevance?: ParagraphCommentOrderByRelevanceInput
  }

  export type ParagraphCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ParagraphCommentWhereInput | ParagraphCommentWhereInput[]
    OR?: ParagraphCommentWhereInput[]
    NOT?: ParagraphCommentWhereInput | ParagraphCommentWhereInput[]
    paragraphRevisionId?: StringFilter<"ParagraphComment"> | string
    ownerId?: IntFilter<"ParagraphComment"> | number
    body?: StringFilter<"ParagraphComment"> | string
    type?: EnumParagraphCommentTypeFilter<"ParagraphComment"> | $Enums.ParagraphCommentType
    createdAt?: DateTimeFilter<"ParagraphComment"> | Date | string
    updatedAt?: DateTimeFilter<"ParagraphComment"> | Date | string
    paragraphRevision?: XOR<ParagraphRevisionScalarRelationFilter, ParagraphRevisionWhereInput>
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ParagraphCommentOrderByWithAggregationInput = {
    id?: SortOrder
    paragraphRevisionId?: SortOrder
    ownerId?: SortOrder
    body?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ParagraphCommentCountOrderByAggregateInput
    _avg?: ParagraphCommentAvgOrderByAggregateInput
    _max?: ParagraphCommentMaxOrderByAggregateInput
    _min?: ParagraphCommentMinOrderByAggregateInput
    _sum?: ParagraphCommentSumOrderByAggregateInput
  }

  export type ParagraphCommentScalarWhereWithAggregatesInput = {
    AND?: ParagraphCommentScalarWhereWithAggregatesInput | ParagraphCommentScalarWhereWithAggregatesInput[]
    OR?: ParagraphCommentScalarWhereWithAggregatesInput[]
    NOT?: ParagraphCommentScalarWhereWithAggregatesInput | ParagraphCommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ParagraphComment"> | number
    paragraphRevisionId?: StringWithAggregatesFilter<"ParagraphComment"> | string
    ownerId?: IntWithAggregatesFilter<"ParagraphComment"> | number
    body?: StringWithAggregatesFilter<"ParagraphComment"> | string
    type?: EnumParagraphCommentTypeWithAggregatesFilter<"ParagraphComment"> | $Enums.ParagraphCommentType
    createdAt?: DateTimeWithAggregatesFilter<"ParagraphComment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ParagraphComment"> | Date | string
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: StringFilter<"File"> | string
    ownerId?: IntFilter<"File"> | number
    storyId?: StringNullableFilter<"File"> | string | null
    localPath?: StringNullableFilter<"File"> | string | null
    path?: StringFilter<"File"> | string
    sha256?: StringFilter<"File"> | string
    width?: IntNullableFilter<"File"> | number | null
    height?: IntNullableFilter<"File"> | number | null
    bytes?: IntNullableFilter<"File"> | number | null
    mimeType?: StringFilter<"File"> | string
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    story?: XOR<StoryNullableScalarRelationFilter, StoryWhereInput> | null
    storyCoverArt?: StoryListRelationFilter
    bookCoverArt?: BookListRelationFilter
    bookSpineArt?: BookListRelationFilter
    characterPicture?: CharacterListRelationFilter
    locationPicture?: LocationListRelationFilter
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    storyId?: SortOrderInput | SortOrder
    localPath?: SortOrderInput | SortOrder
    path?: SortOrder
    sha256?: SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    bytes?: SortOrderInput | SortOrder
    mimeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    story?: StoryOrderByWithRelationInput
    storyCoverArt?: StoryOrderByRelationAggregateInput
    bookCoverArt?: BookOrderByRelationAggregateInput
    bookSpineArt?: BookOrderByRelationAggregateInput
    characterPicture?: CharacterOrderByRelationAggregateInput
    locationPicture?: LocationOrderByRelationAggregateInput
    _relevance?: FileOrderByRelevanceInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    path?: string
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    ownerId?: IntFilter<"File"> | number
    storyId?: StringNullableFilter<"File"> | string | null
    localPath?: StringNullableFilter<"File"> | string | null
    sha256?: StringFilter<"File"> | string
    width?: IntNullableFilter<"File"> | number | null
    height?: IntNullableFilter<"File"> | number | null
    bytes?: IntNullableFilter<"File"> | number | null
    mimeType?: StringFilter<"File"> | string
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    story?: XOR<StoryNullableScalarRelationFilter, StoryWhereInput> | null
    storyCoverArt?: StoryListRelationFilter
    bookCoverArt?: BookListRelationFilter
    bookSpineArt?: BookListRelationFilter
    characterPicture?: CharacterListRelationFilter
    locationPicture?: LocationListRelationFilter
  }, "id" | "path">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    storyId?: SortOrderInput | SortOrder
    localPath?: SortOrderInput | SortOrder
    path?: SortOrder
    sha256?: SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    bytes?: SortOrderInput | SortOrder
    mimeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FileCountOrderByAggregateInput
    _avg?: FileAvgOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
    _sum?: FileSumOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"File"> | string
    ownerId?: IntWithAggregatesFilter<"File"> | number
    storyId?: StringNullableWithAggregatesFilter<"File"> | string | null
    localPath?: StringNullableWithAggregatesFilter<"File"> | string | null
    path?: StringWithAggregatesFilter<"File"> | string
    sha256?: StringWithAggregatesFilter<"File"> | string
    width?: IntNullableWithAggregatesFilter<"File"> | number | null
    height?: IntNullableWithAggregatesFilter<"File"> | number | null
    bytes?: IntNullableWithAggregatesFilter<"File"> | number | null
    mimeType?: StringWithAggregatesFilter<"File"> | string
    createdAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
  }

  export type ChapterPublishingWhereInput = {
    AND?: ChapterPublishingWhereInput | ChapterPublishingWhereInput[]
    OR?: ChapterPublishingWhereInput[]
    NOT?: ChapterPublishingWhereInput | ChapterPublishingWhereInput[]
    id?: StringFilter<"ChapterPublishing"> | string
    chapterId?: StringFilter<"ChapterPublishing"> | string
    platform?: EnumPublishingPlatformFilter<"ChapterPublishing"> | $Enums.PublishingPlatform
    status?: EnumPublishingStatusFilter<"ChapterPublishing"> | $Enums.PublishingStatus
    platformId?: StringNullableFilter<"ChapterPublishing"> | string | null
    publishedAt?: DateTimeNullableFilter<"ChapterPublishing"> | Date | string | null
    lastAttempt?: DateTimeNullableFilter<"ChapterPublishing"> | Date | string | null
    errorMessage?: StringNullableFilter<"ChapterPublishing"> | string | null
    createdAt?: DateTimeFilter<"ChapterPublishing"> | Date | string
    updatedAt?: DateTimeFilter<"ChapterPublishing"> | Date | string
    chapter?: XOR<ChapterScalarRelationFilter, ChapterWhereInput>
  }

  export type ChapterPublishingOrderByWithRelationInput = {
    id?: SortOrder
    chapterId?: SortOrder
    platform?: SortOrder
    status?: SortOrder
    platformId?: SortOrderInput | SortOrder
    publishedAt?: SortOrderInput | SortOrder
    lastAttempt?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chapter?: ChapterOrderByWithRelationInput
    _relevance?: ChapterPublishingOrderByRelevanceInput
  }

  export type ChapterPublishingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    chapterId_platform?: ChapterPublishingChapterIdPlatformCompoundUniqueInput
    platform_platformId?: ChapterPublishingPlatformPlatformIdCompoundUniqueInput
    AND?: ChapterPublishingWhereInput | ChapterPublishingWhereInput[]
    OR?: ChapterPublishingWhereInput[]
    NOT?: ChapterPublishingWhereInput | ChapterPublishingWhereInput[]
    chapterId?: StringFilter<"ChapterPublishing"> | string
    platform?: EnumPublishingPlatformFilter<"ChapterPublishing"> | $Enums.PublishingPlatform
    status?: EnumPublishingStatusFilter<"ChapterPublishing"> | $Enums.PublishingStatus
    platformId?: StringNullableFilter<"ChapterPublishing"> | string | null
    publishedAt?: DateTimeNullableFilter<"ChapterPublishing"> | Date | string | null
    lastAttempt?: DateTimeNullableFilter<"ChapterPublishing"> | Date | string | null
    errorMessage?: StringNullableFilter<"ChapterPublishing"> | string | null
    createdAt?: DateTimeFilter<"ChapterPublishing"> | Date | string
    updatedAt?: DateTimeFilter<"ChapterPublishing"> | Date | string
    chapter?: XOR<ChapterScalarRelationFilter, ChapterWhereInput>
  }, "id" | "chapterId_platform" | "platform_platformId">

  export type ChapterPublishingOrderByWithAggregationInput = {
    id?: SortOrder
    chapterId?: SortOrder
    platform?: SortOrder
    status?: SortOrder
    platformId?: SortOrderInput | SortOrder
    publishedAt?: SortOrderInput | SortOrder
    lastAttempt?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChapterPublishingCountOrderByAggregateInput
    _max?: ChapterPublishingMaxOrderByAggregateInput
    _min?: ChapterPublishingMinOrderByAggregateInput
  }

  export type ChapterPublishingScalarWhereWithAggregatesInput = {
    AND?: ChapterPublishingScalarWhereWithAggregatesInput | ChapterPublishingScalarWhereWithAggregatesInput[]
    OR?: ChapterPublishingScalarWhereWithAggregatesInput[]
    NOT?: ChapterPublishingScalarWhereWithAggregatesInput | ChapterPublishingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChapterPublishing"> | string
    chapterId?: StringWithAggregatesFilter<"ChapterPublishing"> | string
    platform?: EnumPublishingPlatformWithAggregatesFilter<"ChapterPublishing"> | $Enums.PublishingPlatform
    status?: EnumPublishingStatusWithAggregatesFilter<"ChapterPublishing"> | $Enums.PublishingStatus
    platformId?: StringNullableWithAggregatesFilter<"ChapterPublishing"> | string | null
    publishedAt?: DateTimeNullableWithAggregatesFilter<"ChapterPublishing"> | Date | string | null
    lastAttempt?: DateTimeNullableWithAggregatesFilter<"ChapterPublishing"> | Date | string | null
    errorMessage?: StringNullableWithAggregatesFilter<"ChapterPublishing"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ChapterPublishing"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChapterPublishing"> | Date | string
  }

  export type CharacterWhereInput = {
    AND?: CharacterWhereInput | CharacterWhereInput[]
    OR?: CharacterWhereInput[]
    NOT?: CharacterWhereInput | CharacterWhereInput[]
    id?: StringFilter<"Character"> | string
    storyId?: StringFilter<"Character"> | string
    pictureFileId?: StringNullableFilter<"Character"> | string | null
    firstName?: StringFilter<"Character"> | string
    middleName?: StringNullableFilter<"Character"> | string | null
    lastName?: StringNullableFilter<"Character"> | string | null
    nickname?: StringNullableFilter<"Character"> | string | null
    summary?: StringNullableFilter<"Character"> | string | null
    background?: StringNullableFilter<"Character"> | string | null
    personality?: StringNullableFilter<"Character"> | string | null
    personalityQuirks?: StringNullableFilter<"Character"> | string | null
    likes?: StringNullableFilter<"Character"> | string | null
    dislikes?: StringNullableFilter<"Character"> | string | null
    age?: StringNullableFilter<"Character"> | string | null
    gender?: StringNullableFilter<"Character"> | string | null
    sexualOrientation?: StringNullableFilter<"Character"> | string | null
    height?: IntNullableFilter<"Character"> | number | null
    hairColor?: StringNullableFilter<"Character"> | string | null
    eyeColor?: StringNullableFilter<"Character"> | string | null
    distinguishingFeatures?: StringNullableFilter<"Character"> | string | null
    writingStyle?: StringNullableFilter<"Character"> | string | null
    isMainCharacter?: BoolFilter<"Character"> | boolean
    laterVersionOfId?: StringNullableFilter<"Character"> | string | null
    significantActions?: JsonNullableFilter<"Character">
    createdAt?: DateTimeFilter<"Character"> | Date | string
    updatedAt?: DateTimeFilter<"Character"> | Date | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
    pictureFile?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    laterVersionOf?: XOR<CharacterNullableScalarRelationFilter, CharacterWhereInput> | null
    previousVersion?: CharacterListRelationFilter
    defaultProtagonistForStory?: StoryListRelationFilter
    sceneProtagonistIn?: SceneListRelationFilter
    participatingInScenes?: SceneCharacterListRelationFilter
    referredInScenes?: SceneReferredCharacterListRelationFilter
  }

  export type CharacterOrderByWithRelationInput = {
    id?: SortOrder
    storyId?: SortOrder
    pictureFileId?: SortOrderInput | SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    nickname?: SortOrderInput | SortOrder
    summary?: SortOrderInput | SortOrder
    background?: SortOrderInput | SortOrder
    personality?: SortOrderInput | SortOrder
    personalityQuirks?: SortOrderInput | SortOrder
    likes?: SortOrderInput | SortOrder
    dislikes?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    sexualOrientation?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    hairColor?: SortOrderInput | SortOrder
    eyeColor?: SortOrderInput | SortOrder
    distinguishingFeatures?: SortOrderInput | SortOrder
    writingStyle?: SortOrderInput | SortOrder
    isMainCharacter?: SortOrder
    laterVersionOfId?: SortOrderInput | SortOrder
    significantActions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    story?: StoryOrderByWithRelationInput
    pictureFile?: FileOrderByWithRelationInput
    laterVersionOf?: CharacterOrderByWithRelationInput
    previousVersion?: CharacterOrderByRelationAggregateInput
    defaultProtagonistForStory?: StoryOrderByRelationAggregateInput
    sceneProtagonistIn?: SceneOrderByRelationAggregateInput
    participatingInScenes?: SceneCharacterOrderByRelationAggregateInput
    referredInScenes?: SceneReferredCharacterOrderByRelationAggregateInput
    _relevance?: CharacterOrderByRelevanceInput
  }

  export type CharacterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CharacterWhereInput | CharacterWhereInput[]
    OR?: CharacterWhereInput[]
    NOT?: CharacterWhereInput | CharacterWhereInput[]
    storyId?: StringFilter<"Character"> | string
    pictureFileId?: StringNullableFilter<"Character"> | string | null
    firstName?: StringFilter<"Character"> | string
    middleName?: StringNullableFilter<"Character"> | string | null
    lastName?: StringNullableFilter<"Character"> | string | null
    nickname?: StringNullableFilter<"Character"> | string | null
    summary?: StringNullableFilter<"Character"> | string | null
    background?: StringNullableFilter<"Character"> | string | null
    personality?: StringNullableFilter<"Character"> | string | null
    personalityQuirks?: StringNullableFilter<"Character"> | string | null
    likes?: StringNullableFilter<"Character"> | string | null
    dislikes?: StringNullableFilter<"Character"> | string | null
    age?: StringNullableFilter<"Character"> | string | null
    gender?: StringNullableFilter<"Character"> | string | null
    sexualOrientation?: StringNullableFilter<"Character"> | string | null
    height?: IntNullableFilter<"Character"> | number | null
    hairColor?: StringNullableFilter<"Character"> | string | null
    eyeColor?: StringNullableFilter<"Character"> | string | null
    distinguishingFeatures?: StringNullableFilter<"Character"> | string | null
    writingStyle?: StringNullableFilter<"Character"> | string | null
    isMainCharacter?: BoolFilter<"Character"> | boolean
    laterVersionOfId?: StringNullableFilter<"Character"> | string | null
    significantActions?: JsonNullableFilter<"Character">
    createdAt?: DateTimeFilter<"Character"> | Date | string
    updatedAt?: DateTimeFilter<"Character"> | Date | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
    pictureFile?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    laterVersionOf?: XOR<CharacterNullableScalarRelationFilter, CharacterWhereInput> | null
    previousVersion?: CharacterListRelationFilter
    defaultProtagonistForStory?: StoryListRelationFilter
    sceneProtagonistIn?: SceneListRelationFilter
    participatingInScenes?: SceneCharacterListRelationFilter
    referredInScenes?: SceneReferredCharacterListRelationFilter
  }, "id">

  export type CharacterOrderByWithAggregationInput = {
    id?: SortOrder
    storyId?: SortOrder
    pictureFileId?: SortOrderInput | SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    nickname?: SortOrderInput | SortOrder
    summary?: SortOrderInput | SortOrder
    background?: SortOrderInput | SortOrder
    personality?: SortOrderInput | SortOrder
    personalityQuirks?: SortOrderInput | SortOrder
    likes?: SortOrderInput | SortOrder
    dislikes?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    sexualOrientation?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    hairColor?: SortOrderInput | SortOrder
    eyeColor?: SortOrderInput | SortOrder
    distinguishingFeatures?: SortOrderInput | SortOrder
    writingStyle?: SortOrderInput | SortOrder
    isMainCharacter?: SortOrder
    laterVersionOfId?: SortOrderInput | SortOrder
    significantActions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CharacterCountOrderByAggregateInput
    _avg?: CharacterAvgOrderByAggregateInput
    _max?: CharacterMaxOrderByAggregateInput
    _min?: CharacterMinOrderByAggregateInput
    _sum?: CharacterSumOrderByAggregateInput
  }

  export type CharacterScalarWhereWithAggregatesInput = {
    AND?: CharacterScalarWhereWithAggregatesInput | CharacterScalarWhereWithAggregatesInput[]
    OR?: CharacterScalarWhereWithAggregatesInput[]
    NOT?: CharacterScalarWhereWithAggregatesInput | CharacterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Character"> | string
    storyId?: StringWithAggregatesFilter<"Character"> | string
    pictureFileId?: StringNullableWithAggregatesFilter<"Character"> | string | null
    firstName?: StringWithAggregatesFilter<"Character"> | string
    middleName?: StringNullableWithAggregatesFilter<"Character"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"Character"> | string | null
    nickname?: StringNullableWithAggregatesFilter<"Character"> | string | null
    summary?: StringNullableWithAggregatesFilter<"Character"> | string | null
    background?: StringNullableWithAggregatesFilter<"Character"> | string | null
    personality?: StringNullableWithAggregatesFilter<"Character"> | string | null
    personalityQuirks?: StringNullableWithAggregatesFilter<"Character"> | string | null
    likes?: StringNullableWithAggregatesFilter<"Character"> | string | null
    dislikes?: StringNullableWithAggregatesFilter<"Character"> | string | null
    age?: StringNullableWithAggregatesFilter<"Character"> | string | null
    gender?: StringNullableWithAggregatesFilter<"Character"> | string | null
    sexualOrientation?: StringNullableWithAggregatesFilter<"Character"> | string | null
    height?: IntNullableWithAggregatesFilter<"Character"> | number | null
    hairColor?: StringNullableWithAggregatesFilter<"Character"> | string | null
    eyeColor?: StringNullableWithAggregatesFilter<"Character"> | string | null
    distinguishingFeatures?: StringNullableWithAggregatesFilter<"Character"> | string | null
    writingStyle?: StringNullableWithAggregatesFilter<"Character"> | string | null
    isMainCharacter?: BoolWithAggregatesFilter<"Character"> | boolean
    laterVersionOfId?: StringNullableWithAggregatesFilter<"Character"> | string | null
    significantActions?: JsonNullableWithAggregatesFilter<"Character">
    createdAt?: DateTimeWithAggregatesFilter<"Character"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Character"> | Date | string
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: StringFilter<"Location"> | string
    storyId?: StringFilter<"Location"> | string
    name?: StringFilter<"Location"> | string
    pictureFileId?: StringNullableFilter<"Location"> | string | null
    description?: StringNullableFilter<"Location"> | string | null
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
    pictureFile?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    scenes?: SceneListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    storyId?: SortOrder
    name?: SortOrder
    pictureFileId?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    story?: StoryOrderByWithRelationInput
    pictureFile?: FileOrderByWithRelationInput
    scenes?: SceneOrderByRelationAggregateInput
    _relevance?: LocationOrderByRelevanceInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    storyId?: StringFilter<"Location"> | string
    name?: StringFilter<"Location"> | string
    pictureFileId?: StringNullableFilter<"Location"> | string | null
    description?: StringNullableFilter<"Location"> | string | null
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
    pictureFile?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    scenes?: SceneListRelationFilter
  }, "id">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    storyId?: SortOrder
    name?: SortOrder
    pictureFileId?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Location"> | string
    storyId?: StringWithAggregatesFilter<"Location"> | string
    name?: StringWithAggregatesFilter<"Location"> | string
    pictureFileId?: StringNullableWithAggregatesFilter<"Location"> | string | null
    description?: StringNullableWithAggregatesFilter<"Location"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
  }

  export type PlotPointWhereInput = {
    AND?: PlotPointWhereInput | PlotPointWhereInput[]
    OR?: PlotPointWhereInput[]
    NOT?: PlotPointWhereInput | PlotPointWhereInput[]
    id?: StringFilter<"PlotPoint"> | string
    storyId?: StringFilter<"PlotPoint"> | string
    title?: StringFilter<"PlotPoint"> | string
    summary?: StringNullableFilter<"PlotPoint"> | string | null
    state?: EnumPlotPointStateFilter<"PlotPoint"> | $Enums.PlotPointState
    createdAt?: DateTimeFilter<"PlotPoint"> | Date | string
    updatedAt?: DateTimeFilter<"PlotPoint"> | Date | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
  }

  export type PlotPointOrderByWithRelationInput = {
    id?: SortOrder
    storyId?: SortOrder
    title?: SortOrder
    summary?: SortOrderInput | SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    story?: StoryOrderByWithRelationInput
    _relevance?: PlotPointOrderByRelevanceInput
  }

  export type PlotPointWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlotPointWhereInput | PlotPointWhereInput[]
    OR?: PlotPointWhereInput[]
    NOT?: PlotPointWhereInput | PlotPointWhereInput[]
    storyId?: StringFilter<"PlotPoint"> | string
    title?: StringFilter<"PlotPoint"> | string
    summary?: StringNullableFilter<"PlotPoint"> | string | null
    state?: EnumPlotPointStateFilter<"PlotPoint"> | $Enums.PlotPointState
    createdAt?: DateTimeFilter<"PlotPoint"> | Date | string
    updatedAt?: DateTimeFilter<"PlotPoint"> | Date | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
  }, "id">

  export type PlotPointOrderByWithAggregationInput = {
    id?: SortOrder
    storyId?: SortOrder
    title?: SortOrder
    summary?: SortOrderInput | SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlotPointCountOrderByAggregateInput
    _max?: PlotPointMaxOrderByAggregateInput
    _min?: PlotPointMinOrderByAggregateInput
  }

  export type PlotPointScalarWhereWithAggregatesInput = {
    AND?: PlotPointScalarWhereWithAggregatesInput | PlotPointScalarWhereWithAggregatesInput[]
    OR?: PlotPointScalarWhereWithAggregatesInput[]
    NOT?: PlotPointScalarWhereWithAggregatesInput | PlotPointScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlotPoint"> | string
    storyId?: StringWithAggregatesFilter<"PlotPoint"> | string
    title?: StringWithAggregatesFilter<"PlotPoint"> | string
    summary?: StringNullableWithAggregatesFilter<"PlotPoint"> | string | null
    state?: EnumPlotPointStateWithAggregatesFilter<"PlotPoint"> | $Enums.PlotPointState
    createdAt?: DateTimeWithAggregatesFilter<"PlotPoint"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PlotPoint"> | Date | string
  }

  export type ItemWhereInput = {
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    id?: StringFilter<"Item"> | string
    storyId?: StringFilter<"Item"> | string
    name?: StringFilter<"Item"> | string
    createdAt?: DateTimeFilter<"Item"> | Date | string
    updatedAt?: DateTimeFilter<"Item"> | Date | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
  }

  export type ItemOrderByWithRelationInput = {
    id?: SortOrder
    storyId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    story?: StoryOrderByWithRelationInput
    _relevance?: ItemOrderByRelevanceInput
  }

  export type ItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    storyId_name?: ItemStoryIdNameCompoundUniqueInput
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    storyId?: StringFilter<"Item"> | string
    name?: StringFilter<"Item"> | string
    createdAt?: DateTimeFilter<"Item"> | Date | string
    updatedAt?: DateTimeFilter<"Item"> | Date | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
  }, "id" | "storyId_name">

  export type ItemOrderByWithAggregationInput = {
    id?: SortOrder
    storyId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ItemCountOrderByAggregateInput
    _max?: ItemMaxOrderByAggregateInput
    _min?: ItemMinOrderByAggregateInput
  }

  export type ItemScalarWhereWithAggregatesInput = {
    AND?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    OR?: ItemScalarWhereWithAggregatesInput[]
    NOT?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Item"> | string
    storyId?: StringWithAggregatesFilter<"Item"> | string
    name?: StringWithAggregatesFilter<"Item"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Item"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Item"> | Date | string
  }

  export type SceneCharacterWhereInput = {
    AND?: SceneCharacterWhereInput | SceneCharacterWhereInput[]
    OR?: SceneCharacterWhereInput[]
    NOT?: SceneCharacterWhereInput | SceneCharacterWhereInput[]
    sceneId?: StringFilter<"SceneCharacter"> | string
    characterId?: StringFilter<"SceneCharacter"> | string
    assignedAt?: DateTimeFilter<"SceneCharacter"> | Date | string
    scene?: XOR<SceneScalarRelationFilter, SceneWhereInput>
    character?: XOR<CharacterScalarRelationFilter, CharacterWhereInput>
  }

  export type SceneCharacterOrderByWithRelationInput = {
    sceneId?: SortOrder
    characterId?: SortOrder
    assignedAt?: SortOrder
    scene?: SceneOrderByWithRelationInput
    character?: CharacterOrderByWithRelationInput
    _relevance?: SceneCharacterOrderByRelevanceInput
  }

  export type SceneCharacterWhereUniqueInput = Prisma.AtLeast<{
    sceneId_characterId?: SceneCharacterSceneIdCharacterIdCompoundUniqueInput
    AND?: SceneCharacterWhereInput | SceneCharacterWhereInput[]
    OR?: SceneCharacterWhereInput[]
    NOT?: SceneCharacterWhereInput | SceneCharacterWhereInput[]
    sceneId?: StringFilter<"SceneCharacter"> | string
    characterId?: StringFilter<"SceneCharacter"> | string
    assignedAt?: DateTimeFilter<"SceneCharacter"> | Date | string
    scene?: XOR<SceneScalarRelationFilter, SceneWhereInput>
    character?: XOR<CharacterScalarRelationFilter, CharacterWhereInput>
  }, "sceneId_characterId">

  export type SceneCharacterOrderByWithAggregationInput = {
    sceneId?: SortOrder
    characterId?: SortOrder
    assignedAt?: SortOrder
    _count?: SceneCharacterCountOrderByAggregateInput
    _max?: SceneCharacterMaxOrderByAggregateInput
    _min?: SceneCharacterMinOrderByAggregateInput
  }

  export type SceneCharacterScalarWhereWithAggregatesInput = {
    AND?: SceneCharacterScalarWhereWithAggregatesInput | SceneCharacterScalarWhereWithAggregatesInput[]
    OR?: SceneCharacterScalarWhereWithAggregatesInput[]
    NOT?: SceneCharacterScalarWhereWithAggregatesInput | SceneCharacterScalarWhereWithAggregatesInput[]
    sceneId?: StringWithAggregatesFilter<"SceneCharacter"> | string
    characterId?: StringWithAggregatesFilter<"SceneCharacter"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"SceneCharacter"> | Date | string
  }

  export type SceneReferredCharacterWhereInput = {
    AND?: SceneReferredCharacterWhereInput | SceneReferredCharacterWhereInput[]
    OR?: SceneReferredCharacterWhereInput[]
    NOT?: SceneReferredCharacterWhereInput | SceneReferredCharacterWhereInput[]
    sceneId?: StringFilter<"SceneReferredCharacter"> | string
    characterId?: StringFilter<"SceneReferredCharacter"> | string
    assignedAt?: DateTimeFilter<"SceneReferredCharacter"> | Date | string
    scene?: XOR<SceneScalarRelationFilter, SceneWhereInput>
    character?: XOR<CharacterScalarRelationFilter, CharacterWhereInput>
  }

  export type SceneReferredCharacterOrderByWithRelationInput = {
    sceneId?: SortOrder
    characterId?: SortOrder
    assignedAt?: SortOrder
    scene?: SceneOrderByWithRelationInput
    character?: CharacterOrderByWithRelationInput
    _relevance?: SceneReferredCharacterOrderByRelevanceInput
  }

  export type SceneReferredCharacterWhereUniqueInput = Prisma.AtLeast<{
    sceneId_characterId?: SceneReferredCharacterSceneIdCharacterIdCompoundUniqueInput
    AND?: SceneReferredCharacterWhereInput | SceneReferredCharacterWhereInput[]
    OR?: SceneReferredCharacterWhereInput[]
    NOT?: SceneReferredCharacterWhereInput | SceneReferredCharacterWhereInput[]
    sceneId?: StringFilter<"SceneReferredCharacter"> | string
    characterId?: StringFilter<"SceneReferredCharacter"> | string
    assignedAt?: DateTimeFilter<"SceneReferredCharacter"> | Date | string
    scene?: XOR<SceneScalarRelationFilter, SceneWhereInput>
    character?: XOR<CharacterScalarRelationFilter, CharacterWhereInput>
  }, "sceneId_characterId">

  export type SceneReferredCharacterOrderByWithAggregationInput = {
    sceneId?: SortOrder
    characterId?: SortOrder
    assignedAt?: SortOrder
    _count?: SceneReferredCharacterCountOrderByAggregateInput
    _max?: SceneReferredCharacterMaxOrderByAggregateInput
    _min?: SceneReferredCharacterMinOrderByAggregateInput
  }

  export type SceneReferredCharacterScalarWhereWithAggregatesInput = {
    AND?: SceneReferredCharacterScalarWhereWithAggregatesInput | SceneReferredCharacterScalarWhereWithAggregatesInput[]
    OR?: SceneReferredCharacterScalarWhereWithAggregatesInput[]
    NOT?: SceneReferredCharacterScalarWhereWithAggregatesInput | SceneReferredCharacterScalarWhereWithAggregatesInput[]
    sceneId?: StringWithAggregatesFilter<"SceneReferredCharacter"> | string
    characterId?: StringWithAggregatesFilter<"SceneReferredCharacter"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"SceneReferredCharacter"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    ownedStories?: StoryCreateNestedManyWithoutOwnerInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutOwnerInput
    accessKeys?: AccessKeyCreateNestedManyWithoutOwnerInput
    paragraphComments?: ParagraphCommentCreateNestedManyWithoutOwnerInput
    files?: FileCreateNestedManyWithoutOwnerInput
    sessions?: SessionCreateNestedManyWithoutOwnerInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    ownedStories?: StoryUncheckedCreateNestedManyWithoutOwnerInput
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutOwnerInput
    accessKeys?: AccessKeyUncheckedCreateNestedManyWithoutOwnerInput
    paragraphComments?: ParagraphCommentUncheckedCreateNestedManyWithoutOwnerInput
    files?: FileUncheckedCreateNestedManyWithoutOwnerInput
    sessions?: SessionUncheckedCreateNestedManyWithoutOwnerInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedStories?: StoryUpdateManyWithoutOwnerNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutOwnerNestedInput
    accessKeys?: AccessKeyUpdateManyWithoutOwnerNestedInput
    paragraphComments?: ParagraphCommentUpdateManyWithoutOwnerNestedInput
    files?: FileUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUpdateManyWithoutOwnerNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedStories?: StoryUncheckedUpdateManyWithoutOwnerNestedInput
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutOwnerNestedInput
    accessKeys?: AccessKeyUncheckedUpdateManyWithoutOwnerNestedInput
    paragraphComments?: ParagraphCommentUncheckedUpdateManyWithoutOwnerNestedInput
    files?: FileUncheckedUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutOwnerNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    validUntil: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    ownerId: number
    validUntil: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    ownerId: number
    validUntil: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccessKeyCreateInput = {
    key: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastUsedAt?: Date | string | null
    owner: UserCreateNestedOneWithoutAccessKeysInput
  }

  export type AccessKeyUncheckedCreateInput = {
    id?: number
    key: string
    description?: string | null
    ownerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    lastUsedAt?: Date | string | null
  }

  export type AccessKeyUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneRequiredWithoutAccessKeysNestedInput
  }

  export type AccessKeyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccessKeyCreateManyInput = {
    id?: number
    key: string
    description?: string | null
    ownerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    lastUsedAt?: Date | string | null
  }

  export type AccessKeyUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccessKeyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BookShelfStoryCreateInput = {
    name?: string
    kind: $Enums.SavedType
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutBookShelfStoriesInput
    story: StoryCreateNestedOneWithoutBookShelfStoriesInput
  }

  export type BookShelfStoryUncheckedCreateInput = {
    id?: number
    name?: string
    ownerId: number
    storyId: string
    kind: $Enums.SavedType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookShelfStoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    kind?: EnumSavedTypeFieldUpdateOperationsInput | $Enums.SavedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutBookShelfStoriesNestedInput
    story?: StoryUpdateOneRequiredWithoutBookShelfStoriesNestedInput
  }

  export type BookShelfStoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    storyId?: StringFieldUpdateOperationsInput | string
    kind?: EnumSavedTypeFieldUpdateOperationsInput | $Enums.SavedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookShelfStoryCreateManyInput = {
    id?: number
    name?: string
    ownerId: number
    storyId: string
    kind: $Enums.SavedType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookShelfStoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    kind?: EnumSavedTypeFieldUpdateOperationsInput | $Enums.SavedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookShelfStoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    storyId?: StringFieldUpdateOperationsInput | string
    kind?: EnumSavedTypeFieldUpdateOperationsInput | $Enums.SavedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryCreateInput = {
    id?: string
    name?: string
    summary?: string | null
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    owner: UserCreateNestedOneWithoutOwnedStoriesInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutStoryInput
    coverArtFile?: FileCreateNestedOneWithoutStoryCoverArtInput
    defaultProtagonist?: CharacterCreateNestedOneWithoutDefaultProtagonistForStoryInput
    books?: BookCreateNestedManyWithoutStoryInput
    files?: FileCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagCreateNestedManyWithoutStoryInput
    characters?: CharacterCreateNestedManyWithoutStoryInput
    locations?: LocationCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointCreateNestedManyWithoutStoryInput
    items?: ItemCreateNestedManyWithoutStoryInput
  }

  export type StoryUncheckedCreateInput = {
    id?: string
    name?: string
    summary?: string | null
    ownerId: number
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverArtFileId?: string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    defaultProtagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutStoryInput
    books?: BookUncheckedCreateNestedManyWithoutStoryInput
    files?: FileUncheckedCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagUncheckedCreateNestedManyWithoutStoryInput
    characters?: CharacterUncheckedCreateNestedManyWithoutStoryInput
    locations?: LocationUncheckedCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointUncheckedCreateNestedManyWithoutStoryInput
    items?: ItemUncheckedCreateNestedManyWithoutStoryInput
  }

  export type StoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: UserUpdateOneRequiredWithoutOwnedStoriesNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutStoryNestedInput
    coverArtFile?: FileUpdateOneWithoutStoryCoverArtNestedInput
    defaultProtagonist?: CharacterUpdateOneWithoutDefaultProtagonistForStoryNestedInput
    books?: BookUpdateManyWithoutStoryNestedInput
    files?: FileUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUpdateManyWithoutStoryNestedInput
    characters?: CharacterUpdateManyWithoutStoryNestedInput
    locations?: LocationUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUpdateManyWithoutStoryNestedInput
    items?: ItemUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    defaultProtagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutStoryNestedInput
    books?: BookUncheckedUpdateManyWithoutStoryNestedInput
    files?: FileUncheckedUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUncheckedUpdateManyWithoutStoryNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutStoryNestedInput
    locations?: LocationUncheckedUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUncheckedUpdateManyWithoutStoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutStoryNestedInput
  }

  export type StoryCreateManyInput = {
    id?: string
    name?: string
    summary?: string | null
    ownerId: number
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverArtFileId?: string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    defaultProtagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
  }

  export type StoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    defaultProtagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TagCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    storyTags?: StoryTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    storyTags?: StoryTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storyTags?: StoryTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storyTags?: StoryTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryTagCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutStoryTagsInput
    tag: TagCreateNestedOneWithoutStoryTagsInput
  }

  export type StoryTagUncheckedCreateInput = {
    id?: string
    storyId: string
    tagId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryTagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutStoryTagsNestedInput
    tag?: TagUpdateOneRequiredWithoutStoryTagsNestedInput
  }

  export type StoryTagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryTagCreateManyInput = {
    id?: string
    storyId: string
    tagId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryTagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryTagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryReadStatusCreateInput = {
    id?: string
    lastChapterReadAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutStoryReadStatusesInput
    user: UserCreateNestedOneWithoutStoryReadStatusesInput
    lastChapter?: ChapterCreateNestedOneWithoutStoryReadStatusInput
  }

  export type StoryReadStatusUncheckedCreateInput = {
    id?: string
    storyId: string
    userId: number
    lastChapterId?: string | null
    lastChapterReadAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryReadStatusUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastChapterReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutStoryReadStatusesNestedInput
    user?: UserUpdateOneRequiredWithoutStoryReadStatusesNestedInput
    lastChapter?: ChapterUpdateOneWithoutStoryReadStatusNestedInput
  }

  export type StoryReadStatusUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    lastChapterId?: NullableStringFieldUpdateOperationsInput | string | null
    lastChapterReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryReadStatusCreateManyInput = {
    id?: string
    storyId: string
    userId: number
    lastChapterId?: string | null
    lastChapterReadAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryReadStatusUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastChapterReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryReadStatusUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    lastChapterId?: NullableStringFieldUpdateOperationsInput | string | null
    lastChapterReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookCreateInput = {
    id?: string
    name?: string
    summary?: string | null
    pages?: number | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutBooksInput
    coverArtFile?: FileCreateNestedOneWithoutBookCoverArtInput
    spineArtFile?: FileCreateNestedOneWithoutBookSpineArtInput
    arcs?: ArcCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateInput = {
    id?: string
    name?: string
    summary?: string | null
    storyId: string
    coverArtFileId?: string | null
    spineArtFileId?: string | null
    pages?: number | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    arcs?: ArcUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutBooksNestedInput
    coverArtFile?: FileUpdateOneWithoutBookCoverArtNestedInput
    spineArtFile?: FileUpdateOneWithoutBookSpineArtNestedInput
    arcs?: ArcUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    storyId?: StringFieldUpdateOperationsInput | string
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    spineArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    arcs?: ArcUncheckedUpdateManyWithoutBookNestedInput
  }

  export type BookCreateManyInput = {
    id?: string
    name?: string
    summary?: string | null
    storyId: string
    coverArtFileId?: string | null
    spineArtFileId?: string | null
    pages?: number | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    storyId?: StringFieldUpdateOperationsInput | string
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    spineArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArcCreateInput = {
    id?: string
    name?: string
    summary?: string | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    book: BookCreateNestedOneWithoutArcsInput
    chapters?: ChapterCreateNestedManyWithoutArcInput
  }

  export type ArcUncheckedCreateInput = {
    id?: string
    name?: string
    summary?: string | null
    bookId: string
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chapters?: ChapterUncheckedCreateNestedManyWithoutArcInput
  }

  export type ArcUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    book?: BookUpdateOneRequiredWithoutArcsNestedInput
    chapters?: ChapterUpdateManyWithoutArcNestedInput
  }

  export type ArcUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    bookId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapters?: ChapterUncheckedUpdateManyWithoutArcNestedInput
  }

  export type ArcCreateManyInput = {
    id?: string
    name?: string
    summary?: string | null
    bookId: string
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArcUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArcUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    bookId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterCreateInput = {
    id?: string
    name?: string
    summary?: string | null
    publishedOn?: Date | string | null
    sortOrder: number
    royalRoadId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nodeType?: string
    arc: ArcCreateNestedOneWithoutChaptersInput
    scenes?: SceneCreateNestedManyWithoutChapterInput
    StoryReadStatus?: StoryReadStatusCreateNestedManyWithoutLastChapterInput
    publishingStatus?: ChapterPublishingCreateNestedManyWithoutChapterInput
  }

  export type ChapterUncheckedCreateInput = {
    id?: string
    name?: string
    summary?: string | null
    arcId: string
    publishedOn?: Date | string | null
    sortOrder: number
    royalRoadId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nodeType?: string
    scenes?: SceneUncheckedCreateNestedManyWithoutChapterInput
    StoryReadStatus?: StoryReadStatusUncheckedCreateNestedManyWithoutLastChapterInput
    publishingStatus?: ChapterPublishingUncheckedCreateNestedManyWithoutChapterInput
  }

  export type ChapterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    publishedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodeType?: StringFieldUpdateOperationsInput | string
    arc?: ArcUpdateOneRequiredWithoutChaptersNestedInput
    scenes?: SceneUpdateManyWithoutChapterNestedInput
    StoryReadStatus?: StoryReadStatusUpdateManyWithoutLastChapterNestedInput
    publishingStatus?: ChapterPublishingUpdateManyWithoutChapterNestedInput
  }

  export type ChapterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    arcId?: StringFieldUpdateOperationsInput | string
    publishedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodeType?: StringFieldUpdateOperationsInput | string
    scenes?: SceneUncheckedUpdateManyWithoutChapterNestedInput
    StoryReadStatus?: StoryReadStatusUncheckedUpdateManyWithoutLastChapterNestedInput
    publishingStatus?: ChapterPublishingUncheckedUpdateManyWithoutChapterNestedInput
  }

  export type ChapterCreateManyInput = {
    id?: string
    name?: string
    summary?: string | null
    arcId: string
    publishedOn?: Date | string | null
    sortOrder: number
    royalRoadId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nodeType?: string
  }

  export type ChapterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    publishedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodeType?: StringFieldUpdateOperationsInput | string
  }

  export type ChapterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    arcId?: StringFieldUpdateOperationsInput | string
    publishedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodeType?: StringFieldUpdateOperationsInput | string
  }

  export type SceneCreateInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chapter: ChapterCreateNestedOneWithoutScenesInput
    protagonist?: CharacterCreateNestedOneWithoutSceneProtagonistInInput
    location?: LocationCreateNestedOneWithoutScenesInput
    paragraphs?: ParagraphCreateNestedManyWithoutSceneInput
    participatingCharacters?: SceneCharacterCreateNestedManyWithoutSceneInput
    referredCharacters?: SceneReferredCharacterCreateNestedManyWithoutSceneInput
  }

  export type SceneUncheckedCreateInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    chapterId: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    protagonistId?: string | null
    locationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paragraphs?: ParagraphUncheckedCreateNestedManyWithoutSceneInput
    participatingCharacters?: SceneCharacterUncheckedCreateNestedManyWithoutSceneInput
    referredCharacters?: SceneReferredCharacterUncheckedCreateNestedManyWithoutSceneInput
  }

  export type SceneUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapter?: ChapterUpdateOneRequiredWithoutScenesNestedInput
    protagonist?: CharacterUpdateOneWithoutSceneProtagonistInNestedInput
    location?: LocationUpdateOneWithoutScenesNestedInput
    paragraphs?: ParagraphUpdateManyWithoutSceneNestedInput
    participatingCharacters?: SceneCharacterUpdateManyWithoutSceneNestedInput
    referredCharacters?: SceneReferredCharacterUpdateManyWithoutSceneNestedInput
  }

  export type SceneUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    chapterId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    protagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paragraphs?: ParagraphUncheckedUpdateManyWithoutSceneNestedInput
    participatingCharacters?: SceneCharacterUncheckedUpdateManyWithoutSceneNestedInput
    referredCharacters?: SceneReferredCharacterUncheckedUpdateManyWithoutSceneNestedInput
  }

  export type SceneCreateManyInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    chapterId: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    protagonistId?: string | null
    locationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SceneUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    chapterId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    protagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParagraphCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder: number
    scene: SceneCreateNestedOneWithoutParagraphsInput
    paragraphRevisions?: ParagraphRevisionCreateNestedManyWithoutParagraphInput
  }

  export type ParagraphUncheckedCreateInput = {
    id?: string
    sceneId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder: number
    paragraphRevisions?: ParagraphRevisionUncheckedCreateNestedManyWithoutParagraphInput
  }

  export type ParagraphUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    scene?: SceneUpdateOneRequiredWithoutParagraphsNestedInput
    paragraphRevisions?: ParagraphRevisionUpdateManyWithoutParagraphNestedInput
  }

  export type ParagraphUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    paragraphRevisions?: ParagraphRevisionUncheckedUpdateManyWithoutParagraphNestedInput
  }

  export type ParagraphCreateManyInput = {
    id?: string
    sceneId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder: number
  }

  export type ParagraphUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
  }

  export type ParagraphUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
  }

  export type ParagraphRevisionCreateInput = {
    id?: string
    body: string
    contentSchema?: string | null
    version?: number
    state?: $Enums.ParagraphState | null
    aiCharacters?: number | null
    humanCharacters?: number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    paragraph: ParagraphCreateNestedOneWithoutParagraphRevisionsInput
    paragraphComment?: ParagraphCommentCreateNestedManyWithoutParagraphRevisionInput
  }

  export type ParagraphRevisionUncheckedCreateInput = {
    id?: string
    paragraphId: string
    body: string
    contentSchema?: string | null
    version?: number
    state?: $Enums.ParagraphState | null
    aiCharacters?: number | null
    humanCharacters?: number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    paragraphComment?: ParagraphCommentUncheckedCreateNestedManyWithoutParagraphRevisionInput
  }

  export type ParagraphRevisionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    contentSchema?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    state?: NullableEnumParagraphStateFieldUpdateOperationsInput | $Enums.ParagraphState | null
    aiCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    humanCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paragraph?: ParagraphUpdateOneRequiredWithoutParagraphRevisionsNestedInput
    paragraphComment?: ParagraphCommentUpdateManyWithoutParagraphRevisionNestedInput
  }

  export type ParagraphRevisionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    paragraphId?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    contentSchema?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    state?: NullableEnumParagraphStateFieldUpdateOperationsInput | $Enums.ParagraphState | null
    aiCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    humanCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paragraphComment?: ParagraphCommentUncheckedUpdateManyWithoutParagraphRevisionNestedInput
  }

  export type ParagraphRevisionCreateManyInput = {
    id?: string
    paragraphId: string
    body: string
    contentSchema?: string | null
    version?: number
    state?: $Enums.ParagraphState | null
    aiCharacters?: number | null
    humanCharacters?: number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ParagraphRevisionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    contentSchema?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    state?: NullableEnumParagraphStateFieldUpdateOperationsInput | $Enums.ParagraphState | null
    aiCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    humanCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParagraphRevisionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    paragraphId?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    contentSchema?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    state?: NullableEnumParagraphStateFieldUpdateOperationsInput | $Enums.ParagraphState | null
    aiCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    humanCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParagraphCommentCreateInput = {
    body: string
    type?: $Enums.ParagraphCommentType
    createdAt?: Date | string
    updatedAt?: Date | string
    paragraphRevision: ParagraphRevisionCreateNestedOneWithoutParagraphCommentInput
    owner: UserCreateNestedOneWithoutParagraphCommentsInput
  }

  export type ParagraphCommentUncheckedCreateInput = {
    id?: number
    paragraphRevisionId: string
    ownerId: number
    body: string
    type?: $Enums.ParagraphCommentType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParagraphCommentUpdateInput = {
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumParagraphCommentTypeFieldUpdateOperationsInput | $Enums.ParagraphCommentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paragraphRevision?: ParagraphRevisionUpdateOneRequiredWithoutParagraphCommentNestedInput
    owner?: UserUpdateOneRequiredWithoutParagraphCommentsNestedInput
  }

  export type ParagraphCommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    paragraphRevisionId?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumParagraphCommentTypeFieldUpdateOperationsInput | $Enums.ParagraphCommentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParagraphCommentCreateManyInput = {
    id?: number
    paragraphRevisionId: string
    ownerId: number
    body: string
    type?: $Enums.ParagraphCommentType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParagraphCommentUpdateManyMutationInput = {
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumParagraphCommentTypeFieldUpdateOperationsInput | $Enums.ParagraphCommentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParagraphCommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    paragraphRevisionId?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumParagraphCommentTypeFieldUpdateOperationsInput | $Enums.ParagraphCommentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileCreateInput = {
    id?: string
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutFilesInput
    story?: StoryCreateNestedOneWithoutFilesInput
    storyCoverArt?: StoryCreateNestedManyWithoutCoverArtFileInput
    bookCoverArt?: BookCreateNestedManyWithoutCoverArtFileInput
    bookSpineArt?: BookCreateNestedManyWithoutSpineArtFileInput
    characterPicture?: CharacterCreateNestedManyWithoutPictureFileInput
    locationPicture?: LocationCreateNestedManyWithoutPictureFileInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    ownerId: number
    storyId?: string | null
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    storyCoverArt?: StoryUncheckedCreateNestedManyWithoutCoverArtFileInput
    bookCoverArt?: BookUncheckedCreateNestedManyWithoutCoverArtFileInput
    bookSpineArt?: BookUncheckedCreateNestedManyWithoutSpineArtFileInput
    characterPicture?: CharacterUncheckedCreateNestedManyWithoutPictureFileInput
    locationPicture?: LocationUncheckedCreateNestedManyWithoutPictureFileInput
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutFilesNestedInput
    story?: StoryUpdateOneWithoutFilesNestedInput
    storyCoverArt?: StoryUpdateManyWithoutCoverArtFileNestedInput
    bookCoverArt?: BookUpdateManyWithoutCoverArtFileNestedInput
    bookSpineArt?: BookUpdateManyWithoutSpineArtFileNestedInput
    characterPicture?: CharacterUpdateManyWithoutPictureFileNestedInput
    locationPicture?: LocationUpdateManyWithoutPictureFileNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    storyId?: NullableStringFieldUpdateOperationsInput | string | null
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storyCoverArt?: StoryUncheckedUpdateManyWithoutCoverArtFileNestedInput
    bookCoverArt?: BookUncheckedUpdateManyWithoutCoverArtFileNestedInput
    bookSpineArt?: BookUncheckedUpdateManyWithoutSpineArtFileNestedInput
    characterPicture?: CharacterUncheckedUpdateManyWithoutPictureFileNestedInput
    locationPicture?: LocationUncheckedUpdateManyWithoutPictureFileNestedInput
  }

  export type FileCreateManyInput = {
    id?: string
    ownerId: number
    storyId?: string | null
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    storyId?: NullableStringFieldUpdateOperationsInput | string | null
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterPublishingCreateInput = {
    id?: string
    platform: $Enums.PublishingPlatform
    status?: $Enums.PublishingStatus
    platformId?: string | null
    publishedAt?: Date | string | null
    lastAttempt?: Date | string | null
    errorMessage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chapter: ChapterCreateNestedOneWithoutPublishingStatusInput
  }

  export type ChapterPublishingUncheckedCreateInput = {
    id?: string
    chapterId: string
    platform: $Enums.PublishingPlatform
    status?: $Enums.PublishingStatus
    platformId?: string | null
    publishedAt?: Date | string | null
    lastAttempt?: Date | string | null
    errorMessage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChapterPublishingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPublishingPlatformFieldUpdateOperationsInput | $Enums.PublishingPlatform
    status?: EnumPublishingStatusFieldUpdateOperationsInput | $Enums.PublishingStatus
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAttempt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapter?: ChapterUpdateOneRequiredWithoutPublishingStatusNestedInput
  }

  export type ChapterPublishingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    chapterId?: StringFieldUpdateOperationsInput | string
    platform?: EnumPublishingPlatformFieldUpdateOperationsInput | $Enums.PublishingPlatform
    status?: EnumPublishingStatusFieldUpdateOperationsInput | $Enums.PublishingStatus
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAttempt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterPublishingCreateManyInput = {
    id?: string
    chapterId: string
    platform: $Enums.PublishingPlatform
    status?: $Enums.PublishingStatus
    platformId?: string | null
    publishedAt?: Date | string | null
    lastAttempt?: Date | string | null
    errorMessage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChapterPublishingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPublishingPlatformFieldUpdateOperationsInput | $Enums.PublishingPlatform
    status?: EnumPublishingStatusFieldUpdateOperationsInput | $Enums.PublishingStatus
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAttempt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterPublishingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    chapterId?: StringFieldUpdateOperationsInput | string
    platform?: EnumPublishingPlatformFieldUpdateOperationsInput | $Enums.PublishingPlatform
    status?: EnumPublishingStatusFieldUpdateOperationsInput | $Enums.PublishingStatus
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAttempt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterCreateInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutCharactersInput
    pictureFile?: FileCreateNestedOneWithoutCharacterPictureInput
    laterVersionOf?: CharacterCreateNestedOneWithoutPreviousVersionInput
    previousVersion?: CharacterCreateNestedManyWithoutLaterVersionOfInput
    defaultProtagonistForStory?: StoryCreateNestedManyWithoutDefaultProtagonistInput
    sceneProtagonistIn?: SceneCreateNestedManyWithoutProtagonistInput
    participatingInScenes?: SceneCharacterCreateNestedManyWithoutCharacterInput
    referredInScenes?: SceneReferredCharacterCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateInput = {
    id?: string
    storyId: string
    pictureFileId?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    laterVersionOfId?: string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    previousVersion?: CharacterUncheckedCreateNestedManyWithoutLaterVersionOfInput
    defaultProtagonistForStory?: StoryUncheckedCreateNestedManyWithoutDefaultProtagonistInput
    sceneProtagonistIn?: SceneUncheckedCreateNestedManyWithoutProtagonistInput
    participatingInScenes?: SceneCharacterUncheckedCreateNestedManyWithoutCharacterInput
    referredInScenes?: SceneReferredCharacterUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutCharactersNestedInput
    pictureFile?: FileUpdateOneWithoutCharacterPictureNestedInput
    laterVersionOf?: CharacterUpdateOneWithoutPreviousVersionNestedInput
    previousVersion?: CharacterUpdateManyWithoutLaterVersionOfNestedInput
    defaultProtagonistForStory?: StoryUpdateManyWithoutDefaultProtagonistNestedInput
    sceneProtagonistIn?: SceneUpdateManyWithoutProtagonistNestedInput
    participatingInScenes?: SceneCharacterUpdateManyWithoutCharacterNestedInput
    referredInScenes?: SceneReferredCharacterUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    laterVersionOfId?: NullableStringFieldUpdateOperationsInput | string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousVersion?: CharacterUncheckedUpdateManyWithoutLaterVersionOfNestedInput
    defaultProtagonistForStory?: StoryUncheckedUpdateManyWithoutDefaultProtagonistNestedInput
    sceneProtagonistIn?: SceneUncheckedUpdateManyWithoutProtagonistNestedInput
    participatingInScenes?: SceneCharacterUncheckedUpdateManyWithoutCharacterNestedInput
    referredInScenes?: SceneReferredCharacterUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterCreateManyInput = {
    id?: string
    storyId: string
    pictureFileId?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    laterVersionOfId?: string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    laterVersionOfId?: NullableStringFieldUpdateOperationsInput | string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutLocationsInput
    pictureFile?: FileCreateNestedOneWithoutLocationPictureInput
    scenes?: SceneCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: string
    storyId: string
    name: string
    pictureFileId?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scenes?: SceneUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutLocationsNestedInput
    pictureFile?: FileUpdateOneWithoutLocationPictureNestedInput
    scenes?: SceneUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scenes?: SceneUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: string
    storyId: string
    name: string
    pictureFileId?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlotPointCreateInput = {
    id?: string
    title: string
    summary?: string | null
    state?: $Enums.PlotPointState
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutPlotPointsInput
  }

  export type PlotPointUncheckedCreateInput = {
    id?: string
    storyId: string
    title: string
    summary?: string | null
    state?: $Enums.PlotPointState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlotPointUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumPlotPointStateFieldUpdateOperationsInput | $Enums.PlotPointState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutPlotPointsNestedInput
  }

  export type PlotPointUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumPlotPointStateFieldUpdateOperationsInput | $Enums.PlotPointState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlotPointCreateManyInput = {
    id?: string
    storyId: string
    title: string
    summary?: string | null
    state?: $Enums.PlotPointState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlotPointUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumPlotPointStateFieldUpdateOperationsInput | $Enums.PlotPointState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlotPointUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumPlotPointStateFieldUpdateOperationsInput | $Enums.PlotPointState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutItemsInput
  }

  export type ItemUncheckedCreateInput = {
    id?: string
    storyId: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemCreateManyInput = {
    id?: string
    storyId: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneCharacterCreateInput = {
    assignedAt?: Date | string
    scene: SceneCreateNestedOneWithoutParticipatingCharactersInput
    character: CharacterCreateNestedOneWithoutParticipatingInScenesInput
  }

  export type SceneCharacterUncheckedCreateInput = {
    sceneId: string
    characterId: string
    assignedAt?: Date | string
  }

  export type SceneCharacterUpdateInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scene?: SceneUpdateOneRequiredWithoutParticipatingCharactersNestedInput
    character?: CharacterUpdateOneRequiredWithoutParticipatingInScenesNestedInput
  }

  export type SceneCharacterUncheckedUpdateInput = {
    sceneId?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneCharacterCreateManyInput = {
    sceneId: string
    characterId: string
    assignedAt?: Date | string
  }

  export type SceneCharacterUpdateManyMutationInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneCharacterUncheckedUpdateManyInput = {
    sceneId?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneReferredCharacterCreateInput = {
    assignedAt?: Date | string
    scene: SceneCreateNestedOneWithoutReferredCharactersInput
    character: CharacterCreateNestedOneWithoutReferredInScenesInput
  }

  export type SceneReferredCharacterUncheckedCreateInput = {
    sceneId: string
    characterId: string
    assignedAt?: Date | string
  }

  export type SceneReferredCharacterUpdateInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scene?: SceneUpdateOneRequiredWithoutReferredCharactersNestedInput
    character?: CharacterUpdateOneRequiredWithoutReferredInScenesNestedInput
  }

  export type SceneReferredCharacterUncheckedUpdateInput = {
    sceneId?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneReferredCharacterCreateManyInput = {
    sceneId: string
    characterId: string
    assignedAt?: Date | string
  }

  export type SceneReferredCharacterUpdateManyMutationInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneReferredCharacterUncheckedUpdateManyInput = {
    sceneId?: StringFieldUpdateOperationsInput | string
    characterId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StoryListRelationFilter = {
    every?: StoryWhereInput
    some?: StoryWhereInput
    none?: StoryWhereInput
  }

  export type BookShelfStoryListRelationFilter = {
    every?: BookShelfStoryWhereInput
    some?: BookShelfStoryWhereInput
    none?: BookShelfStoryWhereInput
  }

  export type AccessKeyListRelationFilter = {
    every?: AccessKeyWhereInput
    some?: AccessKeyWhereInput
    none?: AccessKeyWhereInput
  }

  export type ParagraphCommentListRelationFilter = {
    every?: ParagraphCommentWhereInput
    some?: ParagraphCommentWhereInput
    none?: ParagraphCommentWhereInput
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type StoryReadStatusListRelationFilter = {
    every?: StoryReadStatusWhereInput
    some?: StoryReadStatusWhereInput
    none?: StoryReadStatusWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type StoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookShelfStoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccessKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParagraphCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StoryReadStatusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatarUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatarUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatarUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionOrderByRelevanceInput = {
    fields: SessionOrderByRelevanceFieldEnum | SessionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    validUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    ownerId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    validUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    validUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    ownerId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AccessKeyOrderByRelevanceInput = {
    fields: AccessKeyOrderByRelevanceFieldEnum | AccessKeyOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AccessKeyCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastUsedAt?: SortOrder
  }

  export type AccessKeyAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type AccessKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastUsedAt?: SortOrder
  }

  export type AccessKeyMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastUsedAt?: SortOrder
  }

  export type AccessKeySumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumSavedTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SavedType | EnumSavedTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SavedType[]
    notIn?: $Enums.SavedType[]
    not?: NestedEnumSavedTypeFilter<$PrismaModel> | $Enums.SavedType
  }

  export type StoryScalarRelationFilter = {
    is?: StoryWhereInput
    isNot?: StoryWhereInput
  }

  export type BookShelfStoryOrderByRelevanceInput = {
    fields: BookShelfStoryOrderByRelevanceFieldEnum | BookShelfStoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BookShelfStoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    storyId?: SortOrder
    kind?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookShelfStoryAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type BookShelfStoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    storyId?: SortOrder
    kind?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookShelfStoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    storyId?: SortOrder
    kind?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookShelfStorySumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type EnumSavedTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SavedType | EnumSavedTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SavedType[]
    notIn?: $Enums.SavedType[]
    not?: NestedEnumSavedTypeWithAggregatesFilter<$PrismaModel> | $Enums.SavedType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSavedTypeFilter<$PrismaModel>
    _max?: NestedEnumSavedTypeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumStoryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StoryStatus | EnumStoryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StoryStatus[]
    notIn?: $Enums.StoryStatus[]
    not?: NestedEnumStoryStatusFilter<$PrismaModel> | $Enums.StoryStatus
  }

  export type EnumStoryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StoryType | EnumStoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StoryType[]
    notIn?: $Enums.StoryType[]
    not?: NestedEnumStoryTypeFilter<$PrismaModel> | $Enums.StoryType
  }

  export type EnumPerspectiveNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Perspective | EnumPerspectiveFieldRefInput<$PrismaModel> | null
    in?: $Enums.Perspective[] | null
    notIn?: $Enums.Perspective[] | null
    not?: NestedEnumPerspectiveNullableFilter<$PrismaModel> | $Enums.Perspective | null
  }

  export type FileNullableScalarRelationFilter = {
    is?: FileWhereInput | null
    isNot?: FileWhereInput | null
  }

  export type CharacterNullableScalarRelationFilter = {
    is?: CharacterWhereInput | null
    isNot?: CharacterWhereInput | null
  }

  export type BookListRelationFilter = {
    every?: BookWhereInput
    some?: BookWhereInput
    none?: BookWhereInput
  }

  export type StoryTagListRelationFilter = {
    every?: StoryTagWhereInput
    some?: StoryTagWhereInput
    none?: StoryTagWhereInput
  }

  export type CharacterListRelationFilter = {
    every?: CharacterWhereInput
    some?: CharacterWhereInput
    none?: CharacterWhereInput
  }

  export type LocationListRelationFilter = {
    every?: LocationWhereInput
    some?: LocationWhereInput
    none?: LocationWhereInput
  }

  export type PlotPointListRelationFilter = {
    every?: PlotPointWhereInput
    some?: PlotPointWhereInput
    none?: PlotPointWhereInput
  }

  export type ItemListRelationFilter = {
    every?: ItemWhereInput
    some?: ItemWhereInput
    none?: ItemWhereInput
  }

  export type BookOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StoryTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CharacterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlotPointOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StoryOrderByRelevanceInput = {
    fields: StoryOrderByRelevanceFieldEnum | StoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    ownerId?: SortOrder
    royalRoadId?: SortOrder
    published?: SortOrder
    status?: SortOrder
    type?: SortOrder
    wordsPerWeek?: SortOrder
    spellingLevel?: SortOrder
    chapters?: SortOrder
    firstChapterReleasedAt?: SortOrder
    lastChapterReleasedAt?: SortOrder
    coverArtFileId?: SortOrder
    coverColor?: SortOrder
    coverTextColor?: SortOrder
    coverFontFamily?: SortOrder
    defaultPerspective?: SortOrder
    defaultProtagonistId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sortOrder?: SortOrder
    pages?: SortOrder
  }

  export type StoryAvgOrderByAggregateInput = {
    ownerId?: SortOrder
    royalRoadId?: SortOrder
    wordsPerWeek?: SortOrder
    spellingLevel?: SortOrder
    chapters?: SortOrder
    sortOrder?: SortOrder
    pages?: SortOrder
  }

  export type StoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    ownerId?: SortOrder
    royalRoadId?: SortOrder
    published?: SortOrder
    status?: SortOrder
    type?: SortOrder
    wordsPerWeek?: SortOrder
    spellingLevel?: SortOrder
    chapters?: SortOrder
    firstChapterReleasedAt?: SortOrder
    lastChapterReleasedAt?: SortOrder
    coverArtFileId?: SortOrder
    coverColor?: SortOrder
    coverTextColor?: SortOrder
    coverFontFamily?: SortOrder
    defaultPerspective?: SortOrder
    defaultProtagonistId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sortOrder?: SortOrder
    pages?: SortOrder
  }

  export type StoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    ownerId?: SortOrder
    royalRoadId?: SortOrder
    published?: SortOrder
    status?: SortOrder
    type?: SortOrder
    wordsPerWeek?: SortOrder
    spellingLevel?: SortOrder
    chapters?: SortOrder
    firstChapterReleasedAt?: SortOrder
    lastChapterReleasedAt?: SortOrder
    coverArtFileId?: SortOrder
    coverColor?: SortOrder
    coverTextColor?: SortOrder
    coverFontFamily?: SortOrder
    defaultPerspective?: SortOrder
    defaultProtagonistId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sortOrder?: SortOrder
    pages?: SortOrder
  }

  export type StorySumOrderByAggregateInput = {
    ownerId?: SortOrder
    royalRoadId?: SortOrder
    wordsPerWeek?: SortOrder
    spellingLevel?: SortOrder
    chapters?: SortOrder
    sortOrder?: SortOrder
    pages?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumStoryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StoryStatus | EnumStoryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StoryStatus[]
    notIn?: $Enums.StoryStatus[]
    not?: NestedEnumStoryStatusWithAggregatesFilter<$PrismaModel> | $Enums.StoryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStoryStatusFilter<$PrismaModel>
    _max?: NestedEnumStoryStatusFilter<$PrismaModel>
  }

  export type EnumStoryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StoryType | EnumStoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StoryType[]
    notIn?: $Enums.StoryType[]
    not?: NestedEnumStoryTypeWithAggregatesFilter<$PrismaModel> | $Enums.StoryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStoryTypeFilter<$PrismaModel>
    _max?: NestedEnumStoryTypeFilter<$PrismaModel>
  }

  export type EnumPerspectiveNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Perspective | EnumPerspectiveFieldRefInput<$PrismaModel> | null
    in?: $Enums.Perspective[] | null
    notIn?: $Enums.Perspective[] | null
    not?: NestedEnumPerspectiveNullableWithAggregatesFilter<$PrismaModel> | $Enums.Perspective | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPerspectiveNullableFilter<$PrismaModel>
    _max?: NestedEnumPerspectiveNullableFilter<$PrismaModel>
  }

  export type TagOrderByRelevanceInput = {
    fields: TagOrderByRelevanceFieldEnum | TagOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagScalarRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type StoryTagOrderByRelevanceInput = {
    fields: StoryTagOrderByRelevanceFieldEnum | StoryTagOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StoryTagStoryIdTagIdCompoundUniqueInput = {
    storyId: string
    tagId: string
  }

  export type StoryTagCountOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    tagId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoryTagMaxOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    tagId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoryTagMinOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    tagId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChapterNullableScalarRelationFilter = {
    is?: ChapterWhereInput | null
    isNot?: ChapterWhereInput | null
  }

  export type StoryReadStatusOrderByRelevanceInput = {
    fields: StoryReadStatusOrderByRelevanceFieldEnum | StoryReadStatusOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StoryReadStatusCountOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    userId?: SortOrder
    lastChapterId?: SortOrder
    lastChapterReadAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoryReadStatusAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type StoryReadStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    userId?: SortOrder
    lastChapterId?: SortOrder
    lastChapterReadAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoryReadStatusMinOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    userId?: SortOrder
    lastChapterId?: SortOrder
    lastChapterReadAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoryReadStatusSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type ArcListRelationFilter = {
    every?: ArcWhereInput
    some?: ArcWhereInput
    none?: ArcWhereInput
  }

  export type ArcOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookOrderByRelevanceInput = {
    fields: BookOrderByRelevanceFieldEnum | BookOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BookCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    storyId?: SortOrder
    coverArtFileId?: SortOrder
    spineArtFileId?: SortOrder
    pages?: SortOrder
    sortOrder?: SortOrder
    nodeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookAvgOrderByAggregateInput = {
    pages?: SortOrder
    sortOrder?: SortOrder
  }

  export type BookMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    storyId?: SortOrder
    coverArtFileId?: SortOrder
    spineArtFileId?: SortOrder
    pages?: SortOrder
    sortOrder?: SortOrder
    nodeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    storyId?: SortOrder
    coverArtFileId?: SortOrder
    spineArtFileId?: SortOrder
    pages?: SortOrder
    sortOrder?: SortOrder
    nodeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookSumOrderByAggregateInput = {
    pages?: SortOrder
    sortOrder?: SortOrder
  }

  export type BookScalarRelationFilter = {
    is?: BookWhereInput
    isNot?: BookWhereInput
  }

  export type ChapterListRelationFilter = {
    every?: ChapterWhereInput
    some?: ChapterWhereInput
    none?: ChapterWhereInput
  }

  export type ChapterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArcOrderByRelevanceInput = {
    fields: ArcOrderByRelevanceFieldEnum | ArcOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ArcCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    bookId?: SortOrder
    sortOrder?: SortOrder
    nodeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArcAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type ArcMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    bookId?: SortOrder
    sortOrder?: SortOrder
    nodeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArcMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    bookId?: SortOrder
    sortOrder?: SortOrder
    nodeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArcSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type ArcScalarRelationFilter = {
    is?: ArcWhereInput
    isNot?: ArcWhereInput
  }

  export type SceneListRelationFilter = {
    every?: SceneWhereInput
    some?: SceneWhereInput
    none?: SceneWhereInput
  }

  export type ChapterPublishingListRelationFilter = {
    every?: ChapterPublishingWhereInput
    some?: ChapterPublishingWhereInput
    none?: ChapterPublishingWhereInput
  }

  export type SceneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChapterPublishingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChapterOrderByRelevanceInput = {
    fields: ChapterOrderByRelevanceFieldEnum | ChapterOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ChapterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    arcId?: SortOrder
    publishedOn?: SortOrder
    sortOrder?: SortOrder
    royalRoadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nodeType?: SortOrder
  }

  export type ChapterAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
    royalRoadId?: SortOrder
  }

  export type ChapterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    arcId?: SortOrder
    publishedOn?: SortOrder
    sortOrder?: SortOrder
    royalRoadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nodeType?: SortOrder
  }

  export type ChapterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    arcId?: SortOrder
    publishedOn?: SortOrder
    sortOrder?: SortOrder
    royalRoadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nodeType?: SortOrder
  }

  export type ChapterSumOrderByAggregateInput = {
    sortOrder?: SortOrder
    royalRoadId?: SortOrder
  }

  export type ChapterScalarRelationFilter = {
    is?: ChapterWhereInput
    isNot?: ChapterWhereInput
  }

  export type LocationNullableScalarRelationFilter = {
    is?: LocationWhereInput | null
    isNot?: LocationWhereInput | null
  }

  export type ParagraphListRelationFilter = {
    every?: ParagraphWhereInput
    some?: ParagraphWhereInput
    none?: ParagraphWhereInput
  }

  export type SceneCharacterListRelationFilter = {
    every?: SceneCharacterWhereInput
    some?: SceneCharacterWhereInput
    none?: SceneCharacterWhereInput
  }

  export type SceneReferredCharacterListRelationFilter = {
    every?: SceneReferredCharacterWhereInput
    some?: SceneReferredCharacterWhereInput
    none?: SceneReferredCharacterWhereInput
  }

  export type ParagraphOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SceneCharacterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SceneReferredCharacterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SceneOrderByRelevanceInput = {
    fields: SceneOrderByRelevanceFieldEnum | SceneOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SceneCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    body?: SortOrder
    chapterId?: SortOrder
    sortOrder?: SortOrder
    nodeType?: SortOrder
    perspective?: SortOrder
    protagonistId?: SortOrder
    locationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SceneAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type SceneMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    body?: SortOrder
    chapterId?: SortOrder
    sortOrder?: SortOrder
    nodeType?: SortOrder
    perspective?: SortOrder
    protagonistId?: SortOrder
    locationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SceneMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    summary?: SortOrder
    body?: SortOrder
    chapterId?: SortOrder
    sortOrder?: SortOrder
    nodeType?: SortOrder
    perspective?: SortOrder
    protagonistId?: SortOrder
    locationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SceneSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type SceneScalarRelationFilter = {
    is?: SceneWhereInput
    isNot?: SceneWhereInput
  }

  export type ParagraphRevisionListRelationFilter = {
    every?: ParagraphRevisionWhereInput
    some?: ParagraphRevisionWhereInput
    none?: ParagraphRevisionWhereInput
  }

  export type ParagraphRevisionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParagraphOrderByRelevanceInput = {
    fields: ParagraphOrderByRelevanceFieldEnum | ParagraphOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ParagraphCountOrderByAggregateInput = {
    id?: SortOrder
    sceneId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sortOrder?: SortOrder
  }

  export type ParagraphAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type ParagraphMaxOrderByAggregateInput = {
    id?: SortOrder
    sceneId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sortOrder?: SortOrder
  }

  export type ParagraphMinOrderByAggregateInput = {
    id?: SortOrder
    sceneId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sortOrder?: SortOrder
  }

  export type ParagraphSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type EnumParagraphStateNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ParagraphState | EnumParagraphStateFieldRefInput<$PrismaModel> | null
    in?: $Enums.ParagraphState[] | null
    notIn?: $Enums.ParagraphState[] | null
    not?: NestedEnumParagraphStateNullableFilter<$PrismaModel> | $Enums.ParagraphState | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ParagraphScalarRelationFilter = {
    is?: ParagraphWhereInput
    isNot?: ParagraphWhereInput
  }

  export type ParagraphRevisionOrderByRelevanceInput = {
    fields: ParagraphRevisionOrderByRelevanceFieldEnum | ParagraphRevisionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ParagraphRevisionCountOrderByAggregateInput = {
    id?: SortOrder
    paragraphId?: SortOrder
    body?: SortOrder
    contentSchema?: SortOrder
    version?: SortOrder
    state?: SortOrder
    aiCharacters?: SortOrder
    humanCharacters?: SortOrder
    plotPointActions?: SortOrder
    inventoryActions?: SortOrder
    createdAt?: SortOrder
  }

  export type ParagraphRevisionAvgOrderByAggregateInput = {
    version?: SortOrder
    aiCharacters?: SortOrder
    humanCharacters?: SortOrder
  }

  export type ParagraphRevisionMaxOrderByAggregateInput = {
    id?: SortOrder
    paragraphId?: SortOrder
    body?: SortOrder
    contentSchema?: SortOrder
    version?: SortOrder
    state?: SortOrder
    aiCharacters?: SortOrder
    humanCharacters?: SortOrder
    createdAt?: SortOrder
  }

  export type ParagraphRevisionMinOrderByAggregateInput = {
    id?: SortOrder
    paragraphId?: SortOrder
    body?: SortOrder
    contentSchema?: SortOrder
    version?: SortOrder
    state?: SortOrder
    aiCharacters?: SortOrder
    humanCharacters?: SortOrder
    createdAt?: SortOrder
  }

  export type ParagraphRevisionSumOrderByAggregateInput = {
    version?: SortOrder
    aiCharacters?: SortOrder
    humanCharacters?: SortOrder
  }

  export type EnumParagraphStateNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ParagraphState | EnumParagraphStateFieldRefInput<$PrismaModel> | null
    in?: $Enums.ParagraphState[] | null
    notIn?: $Enums.ParagraphState[] | null
    not?: NestedEnumParagraphStateNullableWithAggregatesFilter<$PrismaModel> | $Enums.ParagraphState | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumParagraphStateNullableFilter<$PrismaModel>
    _max?: NestedEnumParagraphStateNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumParagraphCommentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ParagraphCommentType | EnumParagraphCommentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ParagraphCommentType[]
    notIn?: $Enums.ParagraphCommentType[]
    not?: NestedEnumParagraphCommentTypeFilter<$PrismaModel> | $Enums.ParagraphCommentType
  }

  export type ParagraphRevisionScalarRelationFilter = {
    is?: ParagraphRevisionWhereInput
    isNot?: ParagraphRevisionWhereInput
  }

  export type ParagraphCommentOrderByRelevanceInput = {
    fields: ParagraphCommentOrderByRelevanceFieldEnum | ParagraphCommentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ParagraphCommentCountOrderByAggregateInput = {
    id?: SortOrder
    paragraphRevisionId?: SortOrder
    ownerId?: SortOrder
    body?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParagraphCommentAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type ParagraphCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    paragraphRevisionId?: SortOrder
    ownerId?: SortOrder
    body?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParagraphCommentMinOrderByAggregateInput = {
    id?: SortOrder
    paragraphRevisionId?: SortOrder
    ownerId?: SortOrder
    body?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParagraphCommentSumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type EnumParagraphCommentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ParagraphCommentType | EnumParagraphCommentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ParagraphCommentType[]
    notIn?: $Enums.ParagraphCommentType[]
    not?: NestedEnumParagraphCommentTypeWithAggregatesFilter<$PrismaModel> | $Enums.ParagraphCommentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumParagraphCommentTypeFilter<$PrismaModel>
    _max?: NestedEnumParagraphCommentTypeFilter<$PrismaModel>
  }

  export type StoryNullableScalarRelationFilter = {
    is?: StoryWhereInput | null
    isNot?: StoryWhereInput | null
  }

  export type FileOrderByRelevanceInput = {
    fields: FileOrderByRelevanceFieldEnum | FileOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    storyId?: SortOrder
    localPath?: SortOrder
    path?: SortOrder
    sha256?: SortOrder
    width?: SortOrder
    height?: SortOrder
    bytes?: SortOrder
    mimeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileAvgOrderByAggregateInput = {
    ownerId?: SortOrder
    width?: SortOrder
    height?: SortOrder
    bytes?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    storyId?: SortOrder
    localPath?: SortOrder
    path?: SortOrder
    sha256?: SortOrder
    width?: SortOrder
    height?: SortOrder
    bytes?: SortOrder
    mimeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    storyId?: SortOrder
    localPath?: SortOrder
    path?: SortOrder
    sha256?: SortOrder
    width?: SortOrder
    height?: SortOrder
    bytes?: SortOrder
    mimeType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileSumOrderByAggregateInput = {
    ownerId?: SortOrder
    width?: SortOrder
    height?: SortOrder
    bytes?: SortOrder
  }

  export type EnumPublishingPlatformFilter<$PrismaModel = never> = {
    equals?: $Enums.PublishingPlatform | EnumPublishingPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.PublishingPlatform[]
    notIn?: $Enums.PublishingPlatform[]
    not?: NestedEnumPublishingPlatformFilter<$PrismaModel> | $Enums.PublishingPlatform
  }

  export type EnumPublishingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PublishingStatus | EnumPublishingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PublishingStatus[]
    notIn?: $Enums.PublishingStatus[]
    not?: NestedEnumPublishingStatusFilter<$PrismaModel> | $Enums.PublishingStatus
  }

  export type ChapterPublishingOrderByRelevanceInput = {
    fields: ChapterPublishingOrderByRelevanceFieldEnum | ChapterPublishingOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ChapterPublishingChapterIdPlatformCompoundUniqueInput = {
    chapterId: string
    platform: $Enums.PublishingPlatform
  }

  export type ChapterPublishingPlatformPlatformIdCompoundUniqueInput = {
    platform: $Enums.PublishingPlatform
    platformId: string
  }

  export type ChapterPublishingCountOrderByAggregateInput = {
    id?: SortOrder
    chapterId?: SortOrder
    platform?: SortOrder
    status?: SortOrder
    platformId?: SortOrder
    publishedAt?: SortOrder
    lastAttempt?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChapterPublishingMaxOrderByAggregateInput = {
    id?: SortOrder
    chapterId?: SortOrder
    platform?: SortOrder
    status?: SortOrder
    platformId?: SortOrder
    publishedAt?: SortOrder
    lastAttempt?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChapterPublishingMinOrderByAggregateInput = {
    id?: SortOrder
    chapterId?: SortOrder
    platform?: SortOrder
    status?: SortOrder
    platformId?: SortOrder
    publishedAt?: SortOrder
    lastAttempt?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPublishingPlatformWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PublishingPlatform | EnumPublishingPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.PublishingPlatform[]
    notIn?: $Enums.PublishingPlatform[]
    not?: NestedEnumPublishingPlatformWithAggregatesFilter<$PrismaModel> | $Enums.PublishingPlatform
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPublishingPlatformFilter<$PrismaModel>
    _max?: NestedEnumPublishingPlatformFilter<$PrismaModel>
  }

  export type EnumPublishingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PublishingStatus | EnumPublishingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PublishingStatus[]
    notIn?: $Enums.PublishingStatus[]
    not?: NestedEnumPublishingStatusWithAggregatesFilter<$PrismaModel> | $Enums.PublishingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPublishingStatusFilter<$PrismaModel>
    _max?: NestedEnumPublishingStatusFilter<$PrismaModel>
  }

  export type CharacterOrderByRelevanceInput = {
    fields: CharacterOrderByRelevanceFieldEnum | CharacterOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CharacterCountOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    pictureFileId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrder
    summary?: SortOrder
    background?: SortOrder
    personality?: SortOrder
    personalityQuirks?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    sexualOrientation?: SortOrder
    height?: SortOrder
    hairColor?: SortOrder
    eyeColor?: SortOrder
    distinguishingFeatures?: SortOrder
    writingStyle?: SortOrder
    isMainCharacter?: SortOrder
    laterVersionOfId?: SortOrder
    significantActions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterAvgOrderByAggregateInput = {
    height?: SortOrder
  }

  export type CharacterMaxOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    pictureFileId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrder
    summary?: SortOrder
    background?: SortOrder
    personality?: SortOrder
    personalityQuirks?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    sexualOrientation?: SortOrder
    height?: SortOrder
    hairColor?: SortOrder
    eyeColor?: SortOrder
    distinguishingFeatures?: SortOrder
    writingStyle?: SortOrder
    isMainCharacter?: SortOrder
    laterVersionOfId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterMinOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    pictureFileId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    nickname?: SortOrder
    summary?: SortOrder
    background?: SortOrder
    personality?: SortOrder
    personalityQuirks?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    sexualOrientation?: SortOrder
    height?: SortOrder
    hairColor?: SortOrder
    eyeColor?: SortOrder
    distinguishingFeatures?: SortOrder
    writingStyle?: SortOrder
    isMainCharacter?: SortOrder
    laterVersionOfId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterSumOrderByAggregateInput = {
    height?: SortOrder
  }

  export type LocationOrderByRelevanceInput = {
    fields: LocationOrderByRelevanceFieldEnum | LocationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    name?: SortOrder
    pictureFileId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    name?: SortOrder
    pictureFileId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    name?: SortOrder
    pictureFileId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPlotPointStateFilter<$PrismaModel = never> = {
    equals?: $Enums.PlotPointState | EnumPlotPointStateFieldRefInput<$PrismaModel>
    in?: $Enums.PlotPointState[]
    notIn?: $Enums.PlotPointState[]
    not?: NestedEnumPlotPointStateFilter<$PrismaModel> | $Enums.PlotPointState
  }

  export type PlotPointOrderByRelevanceInput = {
    fields: PlotPointOrderByRelevanceFieldEnum | PlotPointOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PlotPointCountOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlotPointMaxOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlotPointMinOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    title?: SortOrder
    summary?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPlotPointStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlotPointState | EnumPlotPointStateFieldRefInput<$PrismaModel>
    in?: $Enums.PlotPointState[]
    notIn?: $Enums.PlotPointState[]
    not?: NestedEnumPlotPointStateWithAggregatesFilter<$PrismaModel> | $Enums.PlotPointState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlotPointStateFilter<$PrismaModel>
    _max?: NestedEnumPlotPointStateFilter<$PrismaModel>
  }

  export type ItemOrderByRelevanceInput = {
    fields: ItemOrderByRelevanceFieldEnum | ItemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ItemStoryIdNameCompoundUniqueInput = {
    storyId: string
    name: string
  }

  export type ItemCountOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemMaxOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ItemMinOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterScalarRelationFilter = {
    is?: CharacterWhereInput
    isNot?: CharacterWhereInput
  }

  export type SceneCharacterOrderByRelevanceInput = {
    fields: SceneCharacterOrderByRelevanceFieldEnum | SceneCharacterOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SceneCharacterSceneIdCharacterIdCompoundUniqueInput = {
    sceneId: string
    characterId: string
  }

  export type SceneCharacterCountOrderByAggregateInput = {
    sceneId?: SortOrder
    characterId?: SortOrder
    assignedAt?: SortOrder
  }

  export type SceneCharacterMaxOrderByAggregateInput = {
    sceneId?: SortOrder
    characterId?: SortOrder
    assignedAt?: SortOrder
  }

  export type SceneCharacterMinOrderByAggregateInput = {
    sceneId?: SortOrder
    characterId?: SortOrder
    assignedAt?: SortOrder
  }

  export type SceneReferredCharacterOrderByRelevanceInput = {
    fields: SceneReferredCharacterOrderByRelevanceFieldEnum | SceneReferredCharacterOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SceneReferredCharacterSceneIdCharacterIdCompoundUniqueInput = {
    sceneId: string
    characterId: string
  }

  export type SceneReferredCharacterCountOrderByAggregateInput = {
    sceneId?: SortOrder
    characterId?: SortOrder
    assignedAt?: SortOrder
  }

  export type SceneReferredCharacterMaxOrderByAggregateInput = {
    sceneId?: SortOrder
    characterId?: SortOrder
    assignedAt?: SortOrder
  }

  export type SceneReferredCharacterMinOrderByAggregateInput = {
    sceneId?: SortOrder
    characterId?: SortOrder
    assignedAt?: SortOrder
  }

  export type StoryCreateNestedManyWithoutOwnerInput = {
    create?: XOR<StoryCreateWithoutOwnerInput, StoryUncheckedCreateWithoutOwnerInput> | StoryCreateWithoutOwnerInput[] | StoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutOwnerInput | StoryCreateOrConnectWithoutOwnerInput[]
    createMany?: StoryCreateManyOwnerInputEnvelope
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
  }

  export type BookShelfStoryCreateNestedManyWithoutOwnerInput = {
    create?: XOR<BookShelfStoryCreateWithoutOwnerInput, BookShelfStoryUncheckedCreateWithoutOwnerInput> | BookShelfStoryCreateWithoutOwnerInput[] | BookShelfStoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: BookShelfStoryCreateOrConnectWithoutOwnerInput | BookShelfStoryCreateOrConnectWithoutOwnerInput[]
    createMany?: BookShelfStoryCreateManyOwnerInputEnvelope
    connect?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
  }

  export type AccessKeyCreateNestedManyWithoutOwnerInput = {
    create?: XOR<AccessKeyCreateWithoutOwnerInput, AccessKeyUncheckedCreateWithoutOwnerInput> | AccessKeyCreateWithoutOwnerInput[] | AccessKeyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: AccessKeyCreateOrConnectWithoutOwnerInput | AccessKeyCreateOrConnectWithoutOwnerInput[]
    createMany?: AccessKeyCreateManyOwnerInputEnvelope
    connect?: AccessKeyWhereUniqueInput | AccessKeyWhereUniqueInput[]
  }

  export type ParagraphCommentCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ParagraphCommentCreateWithoutOwnerInput, ParagraphCommentUncheckedCreateWithoutOwnerInput> | ParagraphCommentCreateWithoutOwnerInput[] | ParagraphCommentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ParagraphCommentCreateOrConnectWithoutOwnerInput | ParagraphCommentCreateOrConnectWithoutOwnerInput[]
    createMany?: ParagraphCommentCreateManyOwnerInputEnvelope
    connect?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutOwnerInput = {
    create?: XOR<FileCreateWithoutOwnerInput, FileUncheckedCreateWithoutOwnerInput> | FileCreateWithoutOwnerInput[] | FileUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: FileCreateOrConnectWithoutOwnerInput | FileCreateOrConnectWithoutOwnerInput[]
    createMany?: FileCreateManyOwnerInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutOwnerInput = {
    create?: XOR<SessionCreateWithoutOwnerInput, SessionUncheckedCreateWithoutOwnerInput> | SessionCreateWithoutOwnerInput[] | SessionUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutOwnerInput | SessionCreateOrConnectWithoutOwnerInput[]
    createMany?: SessionCreateManyOwnerInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type StoryReadStatusCreateNestedManyWithoutUserInput = {
    create?: XOR<StoryReadStatusCreateWithoutUserInput, StoryReadStatusUncheckedCreateWithoutUserInput> | StoryReadStatusCreateWithoutUserInput[] | StoryReadStatusUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StoryReadStatusCreateOrConnectWithoutUserInput | StoryReadStatusCreateOrConnectWithoutUserInput[]
    createMany?: StoryReadStatusCreateManyUserInputEnvelope
    connect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
  }

  export type StoryUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<StoryCreateWithoutOwnerInput, StoryUncheckedCreateWithoutOwnerInput> | StoryCreateWithoutOwnerInput[] | StoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutOwnerInput | StoryCreateOrConnectWithoutOwnerInput[]
    createMany?: StoryCreateManyOwnerInputEnvelope
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
  }

  export type BookShelfStoryUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<BookShelfStoryCreateWithoutOwnerInput, BookShelfStoryUncheckedCreateWithoutOwnerInput> | BookShelfStoryCreateWithoutOwnerInput[] | BookShelfStoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: BookShelfStoryCreateOrConnectWithoutOwnerInput | BookShelfStoryCreateOrConnectWithoutOwnerInput[]
    createMany?: BookShelfStoryCreateManyOwnerInputEnvelope
    connect?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
  }

  export type AccessKeyUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<AccessKeyCreateWithoutOwnerInput, AccessKeyUncheckedCreateWithoutOwnerInput> | AccessKeyCreateWithoutOwnerInput[] | AccessKeyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: AccessKeyCreateOrConnectWithoutOwnerInput | AccessKeyCreateOrConnectWithoutOwnerInput[]
    createMany?: AccessKeyCreateManyOwnerInputEnvelope
    connect?: AccessKeyWhereUniqueInput | AccessKeyWhereUniqueInput[]
  }

  export type ParagraphCommentUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ParagraphCommentCreateWithoutOwnerInput, ParagraphCommentUncheckedCreateWithoutOwnerInput> | ParagraphCommentCreateWithoutOwnerInput[] | ParagraphCommentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ParagraphCommentCreateOrConnectWithoutOwnerInput | ParagraphCommentCreateOrConnectWithoutOwnerInput[]
    createMany?: ParagraphCommentCreateManyOwnerInputEnvelope
    connect?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<FileCreateWithoutOwnerInput, FileUncheckedCreateWithoutOwnerInput> | FileCreateWithoutOwnerInput[] | FileUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: FileCreateOrConnectWithoutOwnerInput | FileCreateOrConnectWithoutOwnerInput[]
    createMany?: FileCreateManyOwnerInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<SessionCreateWithoutOwnerInput, SessionUncheckedCreateWithoutOwnerInput> | SessionCreateWithoutOwnerInput[] | SessionUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutOwnerInput | SessionCreateOrConnectWithoutOwnerInput[]
    createMany?: SessionCreateManyOwnerInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type StoryReadStatusUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StoryReadStatusCreateWithoutUserInput, StoryReadStatusUncheckedCreateWithoutUserInput> | StoryReadStatusCreateWithoutUserInput[] | StoryReadStatusUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StoryReadStatusCreateOrConnectWithoutUserInput | StoryReadStatusCreateOrConnectWithoutUserInput[]
    createMany?: StoryReadStatusCreateManyUserInputEnvelope
    connect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StoryUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<StoryCreateWithoutOwnerInput, StoryUncheckedCreateWithoutOwnerInput> | StoryCreateWithoutOwnerInput[] | StoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutOwnerInput | StoryCreateOrConnectWithoutOwnerInput[]
    upsert?: StoryUpsertWithWhereUniqueWithoutOwnerInput | StoryUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: StoryCreateManyOwnerInputEnvelope
    set?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    disconnect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    delete?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    update?: StoryUpdateWithWhereUniqueWithoutOwnerInput | StoryUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: StoryUpdateManyWithWhereWithoutOwnerInput | StoryUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: StoryScalarWhereInput | StoryScalarWhereInput[]
  }

  export type BookShelfStoryUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<BookShelfStoryCreateWithoutOwnerInput, BookShelfStoryUncheckedCreateWithoutOwnerInput> | BookShelfStoryCreateWithoutOwnerInput[] | BookShelfStoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: BookShelfStoryCreateOrConnectWithoutOwnerInput | BookShelfStoryCreateOrConnectWithoutOwnerInput[]
    upsert?: BookShelfStoryUpsertWithWhereUniqueWithoutOwnerInput | BookShelfStoryUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: BookShelfStoryCreateManyOwnerInputEnvelope
    set?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    disconnect?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    delete?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    connect?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    update?: BookShelfStoryUpdateWithWhereUniqueWithoutOwnerInput | BookShelfStoryUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: BookShelfStoryUpdateManyWithWhereWithoutOwnerInput | BookShelfStoryUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: BookShelfStoryScalarWhereInput | BookShelfStoryScalarWhereInput[]
  }

  export type AccessKeyUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<AccessKeyCreateWithoutOwnerInput, AccessKeyUncheckedCreateWithoutOwnerInput> | AccessKeyCreateWithoutOwnerInput[] | AccessKeyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: AccessKeyCreateOrConnectWithoutOwnerInput | AccessKeyCreateOrConnectWithoutOwnerInput[]
    upsert?: AccessKeyUpsertWithWhereUniqueWithoutOwnerInput | AccessKeyUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: AccessKeyCreateManyOwnerInputEnvelope
    set?: AccessKeyWhereUniqueInput | AccessKeyWhereUniqueInput[]
    disconnect?: AccessKeyWhereUniqueInput | AccessKeyWhereUniqueInput[]
    delete?: AccessKeyWhereUniqueInput | AccessKeyWhereUniqueInput[]
    connect?: AccessKeyWhereUniqueInput | AccessKeyWhereUniqueInput[]
    update?: AccessKeyUpdateWithWhereUniqueWithoutOwnerInput | AccessKeyUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: AccessKeyUpdateManyWithWhereWithoutOwnerInput | AccessKeyUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: AccessKeyScalarWhereInput | AccessKeyScalarWhereInput[]
  }

  export type ParagraphCommentUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ParagraphCommentCreateWithoutOwnerInput, ParagraphCommentUncheckedCreateWithoutOwnerInput> | ParagraphCommentCreateWithoutOwnerInput[] | ParagraphCommentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ParagraphCommentCreateOrConnectWithoutOwnerInput | ParagraphCommentCreateOrConnectWithoutOwnerInput[]
    upsert?: ParagraphCommentUpsertWithWhereUniqueWithoutOwnerInput | ParagraphCommentUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ParagraphCommentCreateManyOwnerInputEnvelope
    set?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    disconnect?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    delete?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    connect?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    update?: ParagraphCommentUpdateWithWhereUniqueWithoutOwnerInput | ParagraphCommentUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ParagraphCommentUpdateManyWithWhereWithoutOwnerInput | ParagraphCommentUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ParagraphCommentScalarWhereInput | ParagraphCommentScalarWhereInput[]
  }

  export type FileUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<FileCreateWithoutOwnerInput, FileUncheckedCreateWithoutOwnerInput> | FileCreateWithoutOwnerInput[] | FileUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: FileCreateOrConnectWithoutOwnerInput | FileCreateOrConnectWithoutOwnerInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutOwnerInput | FileUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: FileCreateManyOwnerInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutOwnerInput | FileUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: FileUpdateManyWithWhereWithoutOwnerInput | FileUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<SessionCreateWithoutOwnerInput, SessionUncheckedCreateWithoutOwnerInput> | SessionCreateWithoutOwnerInput[] | SessionUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutOwnerInput | SessionCreateOrConnectWithoutOwnerInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutOwnerInput | SessionUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: SessionCreateManyOwnerInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutOwnerInput | SessionUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutOwnerInput | SessionUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type StoryReadStatusUpdateManyWithoutUserNestedInput = {
    create?: XOR<StoryReadStatusCreateWithoutUserInput, StoryReadStatusUncheckedCreateWithoutUserInput> | StoryReadStatusCreateWithoutUserInput[] | StoryReadStatusUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StoryReadStatusCreateOrConnectWithoutUserInput | StoryReadStatusCreateOrConnectWithoutUserInput[]
    upsert?: StoryReadStatusUpsertWithWhereUniqueWithoutUserInput | StoryReadStatusUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StoryReadStatusCreateManyUserInputEnvelope
    set?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    disconnect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    delete?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    connect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    update?: StoryReadStatusUpdateWithWhereUniqueWithoutUserInput | StoryReadStatusUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StoryReadStatusUpdateManyWithWhereWithoutUserInput | StoryReadStatusUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StoryReadStatusScalarWhereInput | StoryReadStatusScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StoryUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<StoryCreateWithoutOwnerInput, StoryUncheckedCreateWithoutOwnerInput> | StoryCreateWithoutOwnerInput[] | StoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutOwnerInput | StoryCreateOrConnectWithoutOwnerInput[]
    upsert?: StoryUpsertWithWhereUniqueWithoutOwnerInput | StoryUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: StoryCreateManyOwnerInputEnvelope
    set?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    disconnect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    delete?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    update?: StoryUpdateWithWhereUniqueWithoutOwnerInput | StoryUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: StoryUpdateManyWithWhereWithoutOwnerInput | StoryUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: StoryScalarWhereInput | StoryScalarWhereInput[]
  }

  export type BookShelfStoryUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<BookShelfStoryCreateWithoutOwnerInput, BookShelfStoryUncheckedCreateWithoutOwnerInput> | BookShelfStoryCreateWithoutOwnerInput[] | BookShelfStoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: BookShelfStoryCreateOrConnectWithoutOwnerInput | BookShelfStoryCreateOrConnectWithoutOwnerInput[]
    upsert?: BookShelfStoryUpsertWithWhereUniqueWithoutOwnerInput | BookShelfStoryUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: BookShelfStoryCreateManyOwnerInputEnvelope
    set?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    disconnect?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    delete?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    connect?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    update?: BookShelfStoryUpdateWithWhereUniqueWithoutOwnerInput | BookShelfStoryUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: BookShelfStoryUpdateManyWithWhereWithoutOwnerInput | BookShelfStoryUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: BookShelfStoryScalarWhereInput | BookShelfStoryScalarWhereInput[]
  }

  export type AccessKeyUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<AccessKeyCreateWithoutOwnerInput, AccessKeyUncheckedCreateWithoutOwnerInput> | AccessKeyCreateWithoutOwnerInput[] | AccessKeyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: AccessKeyCreateOrConnectWithoutOwnerInput | AccessKeyCreateOrConnectWithoutOwnerInput[]
    upsert?: AccessKeyUpsertWithWhereUniqueWithoutOwnerInput | AccessKeyUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: AccessKeyCreateManyOwnerInputEnvelope
    set?: AccessKeyWhereUniqueInput | AccessKeyWhereUniqueInput[]
    disconnect?: AccessKeyWhereUniqueInput | AccessKeyWhereUniqueInput[]
    delete?: AccessKeyWhereUniqueInput | AccessKeyWhereUniqueInput[]
    connect?: AccessKeyWhereUniqueInput | AccessKeyWhereUniqueInput[]
    update?: AccessKeyUpdateWithWhereUniqueWithoutOwnerInput | AccessKeyUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: AccessKeyUpdateManyWithWhereWithoutOwnerInput | AccessKeyUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: AccessKeyScalarWhereInput | AccessKeyScalarWhereInput[]
  }

  export type ParagraphCommentUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ParagraphCommentCreateWithoutOwnerInput, ParagraphCommentUncheckedCreateWithoutOwnerInput> | ParagraphCommentCreateWithoutOwnerInput[] | ParagraphCommentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ParagraphCommentCreateOrConnectWithoutOwnerInput | ParagraphCommentCreateOrConnectWithoutOwnerInput[]
    upsert?: ParagraphCommentUpsertWithWhereUniqueWithoutOwnerInput | ParagraphCommentUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ParagraphCommentCreateManyOwnerInputEnvelope
    set?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    disconnect?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    delete?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    connect?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    update?: ParagraphCommentUpdateWithWhereUniqueWithoutOwnerInput | ParagraphCommentUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ParagraphCommentUpdateManyWithWhereWithoutOwnerInput | ParagraphCommentUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ParagraphCommentScalarWhereInput | ParagraphCommentScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<FileCreateWithoutOwnerInput, FileUncheckedCreateWithoutOwnerInput> | FileCreateWithoutOwnerInput[] | FileUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: FileCreateOrConnectWithoutOwnerInput | FileCreateOrConnectWithoutOwnerInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutOwnerInput | FileUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: FileCreateManyOwnerInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutOwnerInput | FileUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: FileUpdateManyWithWhereWithoutOwnerInput | FileUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<SessionCreateWithoutOwnerInput, SessionUncheckedCreateWithoutOwnerInput> | SessionCreateWithoutOwnerInput[] | SessionUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutOwnerInput | SessionCreateOrConnectWithoutOwnerInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutOwnerInput | SessionUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: SessionCreateManyOwnerInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutOwnerInput | SessionUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutOwnerInput | SessionUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type StoryReadStatusUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StoryReadStatusCreateWithoutUserInput, StoryReadStatusUncheckedCreateWithoutUserInput> | StoryReadStatusCreateWithoutUserInput[] | StoryReadStatusUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StoryReadStatusCreateOrConnectWithoutUserInput | StoryReadStatusCreateOrConnectWithoutUserInput[]
    upsert?: StoryReadStatusUpsertWithWhereUniqueWithoutUserInput | StoryReadStatusUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StoryReadStatusCreateManyUserInputEnvelope
    set?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    disconnect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    delete?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    connect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    update?: StoryReadStatusUpdateWithWhereUniqueWithoutUserInput | StoryReadStatusUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StoryReadStatusUpdateManyWithWhereWithoutUserInput | StoryReadStatusUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StoryReadStatusScalarWhereInput | StoryReadStatusScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutAccessKeysInput = {
    create?: XOR<UserCreateWithoutAccessKeysInput, UserUncheckedCreateWithoutAccessKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccessKeysInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutAccessKeysNestedInput = {
    create?: XOR<UserCreateWithoutAccessKeysInput, UserUncheckedCreateWithoutAccessKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccessKeysInput
    upsert?: UserUpsertWithoutAccessKeysInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccessKeysInput, UserUpdateWithoutAccessKeysInput>, UserUncheckedUpdateWithoutAccessKeysInput>
  }

  export type UserCreateNestedOneWithoutBookShelfStoriesInput = {
    create?: XOR<UserCreateWithoutBookShelfStoriesInput, UserUncheckedCreateWithoutBookShelfStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookShelfStoriesInput
    connect?: UserWhereUniqueInput
  }

  export type StoryCreateNestedOneWithoutBookShelfStoriesInput = {
    create?: XOR<StoryCreateWithoutBookShelfStoriesInput, StoryUncheckedCreateWithoutBookShelfStoriesInput>
    connectOrCreate?: StoryCreateOrConnectWithoutBookShelfStoriesInput
    connect?: StoryWhereUniqueInput
  }

  export type EnumSavedTypeFieldUpdateOperationsInput = {
    set?: $Enums.SavedType
  }

  export type UserUpdateOneRequiredWithoutBookShelfStoriesNestedInput = {
    create?: XOR<UserCreateWithoutBookShelfStoriesInput, UserUncheckedCreateWithoutBookShelfStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookShelfStoriesInput
    upsert?: UserUpsertWithoutBookShelfStoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBookShelfStoriesInput, UserUpdateWithoutBookShelfStoriesInput>, UserUncheckedUpdateWithoutBookShelfStoriesInput>
  }

  export type StoryUpdateOneRequiredWithoutBookShelfStoriesNestedInput = {
    create?: XOR<StoryCreateWithoutBookShelfStoriesInput, StoryUncheckedCreateWithoutBookShelfStoriesInput>
    connectOrCreate?: StoryCreateOrConnectWithoutBookShelfStoriesInput
    upsert?: StoryUpsertWithoutBookShelfStoriesInput
    connect?: StoryWhereUniqueInput
    update?: XOR<XOR<StoryUpdateToOneWithWhereWithoutBookShelfStoriesInput, StoryUpdateWithoutBookShelfStoriesInput>, StoryUncheckedUpdateWithoutBookShelfStoriesInput>
  }

  export type UserCreateNestedOneWithoutOwnedStoriesInput = {
    create?: XOR<UserCreateWithoutOwnedStoriesInput, UserUncheckedCreateWithoutOwnedStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedStoriesInput
    connect?: UserWhereUniqueInput
  }

  export type BookShelfStoryCreateNestedManyWithoutStoryInput = {
    create?: XOR<BookShelfStoryCreateWithoutStoryInput, BookShelfStoryUncheckedCreateWithoutStoryInput> | BookShelfStoryCreateWithoutStoryInput[] | BookShelfStoryUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: BookShelfStoryCreateOrConnectWithoutStoryInput | BookShelfStoryCreateOrConnectWithoutStoryInput[]
    createMany?: BookShelfStoryCreateManyStoryInputEnvelope
    connect?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
  }

  export type FileCreateNestedOneWithoutStoryCoverArtInput = {
    create?: XOR<FileCreateWithoutStoryCoverArtInput, FileUncheckedCreateWithoutStoryCoverArtInput>
    connectOrCreate?: FileCreateOrConnectWithoutStoryCoverArtInput
    connect?: FileWhereUniqueInput
  }

  export type CharacterCreateNestedOneWithoutDefaultProtagonistForStoryInput = {
    create?: XOR<CharacterCreateWithoutDefaultProtagonistForStoryInput, CharacterUncheckedCreateWithoutDefaultProtagonistForStoryInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutDefaultProtagonistForStoryInput
    connect?: CharacterWhereUniqueInput
  }

  export type BookCreateNestedManyWithoutStoryInput = {
    create?: XOR<BookCreateWithoutStoryInput, BookUncheckedCreateWithoutStoryInput> | BookCreateWithoutStoryInput[] | BookUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: BookCreateOrConnectWithoutStoryInput | BookCreateOrConnectWithoutStoryInput[]
    createMany?: BookCreateManyStoryInputEnvelope
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutStoryInput = {
    create?: XOR<FileCreateWithoutStoryInput, FileUncheckedCreateWithoutStoryInput> | FileCreateWithoutStoryInput[] | FileUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: FileCreateOrConnectWithoutStoryInput | FileCreateOrConnectWithoutStoryInput[]
    createMany?: FileCreateManyStoryInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type StoryReadStatusCreateNestedManyWithoutStoryInput = {
    create?: XOR<StoryReadStatusCreateWithoutStoryInput, StoryReadStatusUncheckedCreateWithoutStoryInput> | StoryReadStatusCreateWithoutStoryInput[] | StoryReadStatusUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: StoryReadStatusCreateOrConnectWithoutStoryInput | StoryReadStatusCreateOrConnectWithoutStoryInput[]
    createMany?: StoryReadStatusCreateManyStoryInputEnvelope
    connect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
  }

  export type StoryTagCreateNestedManyWithoutStoryInput = {
    create?: XOR<StoryTagCreateWithoutStoryInput, StoryTagUncheckedCreateWithoutStoryInput> | StoryTagCreateWithoutStoryInput[] | StoryTagUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: StoryTagCreateOrConnectWithoutStoryInput | StoryTagCreateOrConnectWithoutStoryInput[]
    createMany?: StoryTagCreateManyStoryInputEnvelope
    connect?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
  }

  export type CharacterCreateNestedManyWithoutStoryInput = {
    create?: XOR<CharacterCreateWithoutStoryInput, CharacterUncheckedCreateWithoutStoryInput> | CharacterCreateWithoutStoryInput[] | CharacterUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutStoryInput | CharacterCreateOrConnectWithoutStoryInput[]
    createMany?: CharacterCreateManyStoryInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type LocationCreateNestedManyWithoutStoryInput = {
    create?: XOR<LocationCreateWithoutStoryInput, LocationUncheckedCreateWithoutStoryInput> | LocationCreateWithoutStoryInput[] | LocationUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutStoryInput | LocationCreateOrConnectWithoutStoryInput[]
    createMany?: LocationCreateManyStoryInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type PlotPointCreateNestedManyWithoutStoryInput = {
    create?: XOR<PlotPointCreateWithoutStoryInput, PlotPointUncheckedCreateWithoutStoryInput> | PlotPointCreateWithoutStoryInput[] | PlotPointUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: PlotPointCreateOrConnectWithoutStoryInput | PlotPointCreateOrConnectWithoutStoryInput[]
    createMany?: PlotPointCreateManyStoryInputEnvelope
    connect?: PlotPointWhereUniqueInput | PlotPointWhereUniqueInput[]
  }

  export type ItemCreateNestedManyWithoutStoryInput = {
    create?: XOR<ItemCreateWithoutStoryInput, ItemUncheckedCreateWithoutStoryInput> | ItemCreateWithoutStoryInput[] | ItemUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutStoryInput | ItemCreateOrConnectWithoutStoryInput[]
    createMany?: ItemCreateManyStoryInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type BookShelfStoryUncheckedCreateNestedManyWithoutStoryInput = {
    create?: XOR<BookShelfStoryCreateWithoutStoryInput, BookShelfStoryUncheckedCreateWithoutStoryInput> | BookShelfStoryCreateWithoutStoryInput[] | BookShelfStoryUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: BookShelfStoryCreateOrConnectWithoutStoryInput | BookShelfStoryCreateOrConnectWithoutStoryInput[]
    createMany?: BookShelfStoryCreateManyStoryInputEnvelope
    connect?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
  }

  export type BookUncheckedCreateNestedManyWithoutStoryInput = {
    create?: XOR<BookCreateWithoutStoryInput, BookUncheckedCreateWithoutStoryInput> | BookCreateWithoutStoryInput[] | BookUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: BookCreateOrConnectWithoutStoryInput | BookCreateOrConnectWithoutStoryInput[]
    createMany?: BookCreateManyStoryInputEnvelope
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutStoryInput = {
    create?: XOR<FileCreateWithoutStoryInput, FileUncheckedCreateWithoutStoryInput> | FileCreateWithoutStoryInput[] | FileUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: FileCreateOrConnectWithoutStoryInput | FileCreateOrConnectWithoutStoryInput[]
    createMany?: FileCreateManyStoryInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type StoryReadStatusUncheckedCreateNestedManyWithoutStoryInput = {
    create?: XOR<StoryReadStatusCreateWithoutStoryInput, StoryReadStatusUncheckedCreateWithoutStoryInput> | StoryReadStatusCreateWithoutStoryInput[] | StoryReadStatusUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: StoryReadStatusCreateOrConnectWithoutStoryInput | StoryReadStatusCreateOrConnectWithoutStoryInput[]
    createMany?: StoryReadStatusCreateManyStoryInputEnvelope
    connect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
  }

  export type StoryTagUncheckedCreateNestedManyWithoutStoryInput = {
    create?: XOR<StoryTagCreateWithoutStoryInput, StoryTagUncheckedCreateWithoutStoryInput> | StoryTagCreateWithoutStoryInput[] | StoryTagUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: StoryTagCreateOrConnectWithoutStoryInput | StoryTagCreateOrConnectWithoutStoryInput[]
    createMany?: StoryTagCreateManyStoryInputEnvelope
    connect?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
  }

  export type CharacterUncheckedCreateNestedManyWithoutStoryInput = {
    create?: XOR<CharacterCreateWithoutStoryInput, CharacterUncheckedCreateWithoutStoryInput> | CharacterCreateWithoutStoryInput[] | CharacterUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutStoryInput | CharacterCreateOrConnectWithoutStoryInput[]
    createMany?: CharacterCreateManyStoryInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type LocationUncheckedCreateNestedManyWithoutStoryInput = {
    create?: XOR<LocationCreateWithoutStoryInput, LocationUncheckedCreateWithoutStoryInput> | LocationCreateWithoutStoryInput[] | LocationUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutStoryInput | LocationCreateOrConnectWithoutStoryInput[]
    createMany?: LocationCreateManyStoryInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type PlotPointUncheckedCreateNestedManyWithoutStoryInput = {
    create?: XOR<PlotPointCreateWithoutStoryInput, PlotPointUncheckedCreateWithoutStoryInput> | PlotPointCreateWithoutStoryInput[] | PlotPointUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: PlotPointCreateOrConnectWithoutStoryInput | PlotPointCreateOrConnectWithoutStoryInput[]
    createMany?: PlotPointCreateManyStoryInputEnvelope
    connect?: PlotPointWhereUniqueInput | PlotPointWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutStoryInput = {
    create?: XOR<ItemCreateWithoutStoryInput, ItemUncheckedCreateWithoutStoryInput> | ItemCreateWithoutStoryInput[] | ItemUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutStoryInput | ItemCreateOrConnectWithoutStoryInput[]
    createMany?: ItemCreateManyStoryInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumStoryStatusFieldUpdateOperationsInput = {
    set?: $Enums.StoryStatus
  }

  export type EnumStoryTypeFieldUpdateOperationsInput = {
    set?: $Enums.StoryType
  }

  export type NullableEnumPerspectiveFieldUpdateOperationsInput = {
    set?: $Enums.Perspective | null
  }

  export type UserUpdateOneRequiredWithoutOwnedStoriesNestedInput = {
    create?: XOR<UserCreateWithoutOwnedStoriesInput, UserUncheckedCreateWithoutOwnedStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedStoriesInput
    upsert?: UserUpsertWithoutOwnedStoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedStoriesInput, UserUpdateWithoutOwnedStoriesInput>, UserUncheckedUpdateWithoutOwnedStoriesInput>
  }

  export type BookShelfStoryUpdateManyWithoutStoryNestedInput = {
    create?: XOR<BookShelfStoryCreateWithoutStoryInput, BookShelfStoryUncheckedCreateWithoutStoryInput> | BookShelfStoryCreateWithoutStoryInput[] | BookShelfStoryUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: BookShelfStoryCreateOrConnectWithoutStoryInput | BookShelfStoryCreateOrConnectWithoutStoryInput[]
    upsert?: BookShelfStoryUpsertWithWhereUniqueWithoutStoryInput | BookShelfStoryUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: BookShelfStoryCreateManyStoryInputEnvelope
    set?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    disconnect?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    delete?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    connect?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    update?: BookShelfStoryUpdateWithWhereUniqueWithoutStoryInput | BookShelfStoryUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: BookShelfStoryUpdateManyWithWhereWithoutStoryInput | BookShelfStoryUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: BookShelfStoryScalarWhereInput | BookShelfStoryScalarWhereInput[]
  }

  export type FileUpdateOneWithoutStoryCoverArtNestedInput = {
    create?: XOR<FileCreateWithoutStoryCoverArtInput, FileUncheckedCreateWithoutStoryCoverArtInput>
    connectOrCreate?: FileCreateOrConnectWithoutStoryCoverArtInput
    upsert?: FileUpsertWithoutStoryCoverArtInput
    disconnect?: FileWhereInput | boolean
    delete?: FileWhereInput | boolean
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutStoryCoverArtInput, FileUpdateWithoutStoryCoverArtInput>, FileUncheckedUpdateWithoutStoryCoverArtInput>
  }

  export type CharacterUpdateOneWithoutDefaultProtagonistForStoryNestedInput = {
    create?: XOR<CharacterCreateWithoutDefaultProtagonistForStoryInput, CharacterUncheckedCreateWithoutDefaultProtagonistForStoryInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutDefaultProtagonistForStoryInput
    upsert?: CharacterUpsertWithoutDefaultProtagonistForStoryInput
    disconnect?: CharacterWhereInput | boolean
    delete?: CharacterWhereInput | boolean
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutDefaultProtagonistForStoryInput, CharacterUpdateWithoutDefaultProtagonistForStoryInput>, CharacterUncheckedUpdateWithoutDefaultProtagonistForStoryInput>
  }

  export type BookUpdateManyWithoutStoryNestedInput = {
    create?: XOR<BookCreateWithoutStoryInput, BookUncheckedCreateWithoutStoryInput> | BookCreateWithoutStoryInput[] | BookUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: BookCreateOrConnectWithoutStoryInput | BookCreateOrConnectWithoutStoryInput[]
    upsert?: BookUpsertWithWhereUniqueWithoutStoryInput | BookUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: BookCreateManyStoryInputEnvelope
    set?: BookWhereUniqueInput | BookWhereUniqueInput[]
    disconnect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    delete?: BookWhereUniqueInput | BookWhereUniqueInput[]
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    update?: BookUpdateWithWhereUniqueWithoutStoryInput | BookUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: BookUpdateManyWithWhereWithoutStoryInput | BookUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: BookScalarWhereInput | BookScalarWhereInput[]
  }

  export type FileUpdateManyWithoutStoryNestedInput = {
    create?: XOR<FileCreateWithoutStoryInput, FileUncheckedCreateWithoutStoryInput> | FileCreateWithoutStoryInput[] | FileUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: FileCreateOrConnectWithoutStoryInput | FileCreateOrConnectWithoutStoryInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutStoryInput | FileUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: FileCreateManyStoryInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutStoryInput | FileUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: FileUpdateManyWithWhereWithoutStoryInput | FileUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type StoryReadStatusUpdateManyWithoutStoryNestedInput = {
    create?: XOR<StoryReadStatusCreateWithoutStoryInput, StoryReadStatusUncheckedCreateWithoutStoryInput> | StoryReadStatusCreateWithoutStoryInput[] | StoryReadStatusUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: StoryReadStatusCreateOrConnectWithoutStoryInput | StoryReadStatusCreateOrConnectWithoutStoryInput[]
    upsert?: StoryReadStatusUpsertWithWhereUniqueWithoutStoryInput | StoryReadStatusUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: StoryReadStatusCreateManyStoryInputEnvelope
    set?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    disconnect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    delete?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    connect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    update?: StoryReadStatusUpdateWithWhereUniqueWithoutStoryInput | StoryReadStatusUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: StoryReadStatusUpdateManyWithWhereWithoutStoryInput | StoryReadStatusUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: StoryReadStatusScalarWhereInput | StoryReadStatusScalarWhereInput[]
  }

  export type StoryTagUpdateManyWithoutStoryNestedInput = {
    create?: XOR<StoryTagCreateWithoutStoryInput, StoryTagUncheckedCreateWithoutStoryInput> | StoryTagCreateWithoutStoryInput[] | StoryTagUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: StoryTagCreateOrConnectWithoutStoryInput | StoryTagCreateOrConnectWithoutStoryInput[]
    upsert?: StoryTagUpsertWithWhereUniqueWithoutStoryInput | StoryTagUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: StoryTagCreateManyStoryInputEnvelope
    set?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    disconnect?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    delete?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    connect?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    update?: StoryTagUpdateWithWhereUniqueWithoutStoryInput | StoryTagUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: StoryTagUpdateManyWithWhereWithoutStoryInput | StoryTagUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: StoryTagScalarWhereInput | StoryTagScalarWhereInput[]
  }

  export type CharacterUpdateManyWithoutStoryNestedInput = {
    create?: XOR<CharacterCreateWithoutStoryInput, CharacterUncheckedCreateWithoutStoryInput> | CharacterCreateWithoutStoryInput[] | CharacterUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutStoryInput | CharacterCreateOrConnectWithoutStoryInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutStoryInput | CharacterUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: CharacterCreateManyStoryInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutStoryInput | CharacterUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutStoryInput | CharacterUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type LocationUpdateManyWithoutStoryNestedInput = {
    create?: XOR<LocationCreateWithoutStoryInput, LocationUncheckedCreateWithoutStoryInput> | LocationCreateWithoutStoryInput[] | LocationUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutStoryInput | LocationCreateOrConnectWithoutStoryInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutStoryInput | LocationUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: LocationCreateManyStoryInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutStoryInput | LocationUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutStoryInput | LocationUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type PlotPointUpdateManyWithoutStoryNestedInput = {
    create?: XOR<PlotPointCreateWithoutStoryInput, PlotPointUncheckedCreateWithoutStoryInput> | PlotPointCreateWithoutStoryInput[] | PlotPointUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: PlotPointCreateOrConnectWithoutStoryInput | PlotPointCreateOrConnectWithoutStoryInput[]
    upsert?: PlotPointUpsertWithWhereUniqueWithoutStoryInput | PlotPointUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: PlotPointCreateManyStoryInputEnvelope
    set?: PlotPointWhereUniqueInput | PlotPointWhereUniqueInput[]
    disconnect?: PlotPointWhereUniqueInput | PlotPointWhereUniqueInput[]
    delete?: PlotPointWhereUniqueInput | PlotPointWhereUniqueInput[]
    connect?: PlotPointWhereUniqueInput | PlotPointWhereUniqueInput[]
    update?: PlotPointUpdateWithWhereUniqueWithoutStoryInput | PlotPointUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: PlotPointUpdateManyWithWhereWithoutStoryInput | PlotPointUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: PlotPointScalarWhereInput | PlotPointScalarWhereInput[]
  }

  export type ItemUpdateManyWithoutStoryNestedInput = {
    create?: XOR<ItemCreateWithoutStoryInput, ItemUncheckedCreateWithoutStoryInput> | ItemCreateWithoutStoryInput[] | ItemUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutStoryInput | ItemCreateOrConnectWithoutStoryInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutStoryInput | ItemUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: ItemCreateManyStoryInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutStoryInput | ItemUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutStoryInput | ItemUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type BookShelfStoryUncheckedUpdateManyWithoutStoryNestedInput = {
    create?: XOR<BookShelfStoryCreateWithoutStoryInput, BookShelfStoryUncheckedCreateWithoutStoryInput> | BookShelfStoryCreateWithoutStoryInput[] | BookShelfStoryUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: BookShelfStoryCreateOrConnectWithoutStoryInput | BookShelfStoryCreateOrConnectWithoutStoryInput[]
    upsert?: BookShelfStoryUpsertWithWhereUniqueWithoutStoryInput | BookShelfStoryUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: BookShelfStoryCreateManyStoryInputEnvelope
    set?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    disconnect?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    delete?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    connect?: BookShelfStoryWhereUniqueInput | BookShelfStoryWhereUniqueInput[]
    update?: BookShelfStoryUpdateWithWhereUniqueWithoutStoryInput | BookShelfStoryUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: BookShelfStoryUpdateManyWithWhereWithoutStoryInput | BookShelfStoryUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: BookShelfStoryScalarWhereInput | BookShelfStoryScalarWhereInput[]
  }

  export type BookUncheckedUpdateManyWithoutStoryNestedInput = {
    create?: XOR<BookCreateWithoutStoryInput, BookUncheckedCreateWithoutStoryInput> | BookCreateWithoutStoryInput[] | BookUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: BookCreateOrConnectWithoutStoryInput | BookCreateOrConnectWithoutStoryInput[]
    upsert?: BookUpsertWithWhereUniqueWithoutStoryInput | BookUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: BookCreateManyStoryInputEnvelope
    set?: BookWhereUniqueInput | BookWhereUniqueInput[]
    disconnect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    delete?: BookWhereUniqueInput | BookWhereUniqueInput[]
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    update?: BookUpdateWithWhereUniqueWithoutStoryInput | BookUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: BookUpdateManyWithWhereWithoutStoryInput | BookUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: BookScalarWhereInput | BookScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutStoryNestedInput = {
    create?: XOR<FileCreateWithoutStoryInput, FileUncheckedCreateWithoutStoryInput> | FileCreateWithoutStoryInput[] | FileUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: FileCreateOrConnectWithoutStoryInput | FileCreateOrConnectWithoutStoryInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutStoryInput | FileUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: FileCreateManyStoryInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutStoryInput | FileUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: FileUpdateManyWithWhereWithoutStoryInput | FileUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type StoryReadStatusUncheckedUpdateManyWithoutStoryNestedInput = {
    create?: XOR<StoryReadStatusCreateWithoutStoryInput, StoryReadStatusUncheckedCreateWithoutStoryInput> | StoryReadStatusCreateWithoutStoryInput[] | StoryReadStatusUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: StoryReadStatusCreateOrConnectWithoutStoryInput | StoryReadStatusCreateOrConnectWithoutStoryInput[]
    upsert?: StoryReadStatusUpsertWithWhereUniqueWithoutStoryInput | StoryReadStatusUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: StoryReadStatusCreateManyStoryInputEnvelope
    set?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    disconnect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    delete?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    connect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    update?: StoryReadStatusUpdateWithWhereUniqueWithoutStoryInput | StoryReadStatusUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: StoryReadStatusUpdateManyWithWhereWithoutStoryInput | StoryReadStatusUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: StoryReadStatusScalarWhereInput | StoryReadStatusScalarWhereInput[]
  }

  export type StoryTagUncheckedUpdateManyWithoutStoryNestedInput = {
    create?: XOR<StoryTagCreateWithoutStoryInput, StoryTagUncheckedCreateWithoutStoryInput> | StoryTagCreateWithoutStoryInput[] | StoryTagUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: StoryTagCreateOrConnectWithoutStoryInput | StoryTagCreateOrConnectWithoutStoryInput[]
    upsert?: StoryTagUpsertWithWhereUniqueWithoutStoryInput | StoryTagUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: StoryTagCreateManyStoryInputEnvelope
    set?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    disconnect?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    delete?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    connect?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    update?: StoryTagUpdateWithWhereUniqueWithoutStoryInput | StoryTagUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: StoryTagUpdateManyWithWhereWithoutStoryInput | StoryTagUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: StoryTagScalarWhereInput | StoryTagScalarWhereInput[]
  }

  export type CharacterUncheckedUpdateManyWithoutStoryNestedInput = {
    create?: XOR<CharacterCreateWithoutStoryInput, CharacterUncheckedCreateWithoutStoryInput> | CharacterCreateWithoutStoryInput[] | CharacterUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutStoryInput | CharacterCreateOrConnectWithoutStoryInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutStoryInput | CharacterUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: CharacterCreateManyStoryInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutStoryInput | CharacterUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutStoryInput | CharacterUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type LocationUncheckedUpdateManyWithoutStoryNestedInput = {
    create?: XOR<LocationCreateWithoutStoryInput, LocationUncheckedCreateWithoutStoryInput> | LocationCreateWithoutStoryInput[] | LocationUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutStoryInput | LocationCreateOrConnectWithoutStoryInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutStoryInput | LocationUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: LocationCreateManyStoryInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutStoryInput | LocationUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutStoryInput | LocationUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type PlotPointUncheckedUpdateManyWithoutStoryNestedInput = {
    create?: XOR<PlotPointCreateWithoutStoryInput, PlotPointUncheckedCreateWithoutStoryInput> | PlotPointCreateWithoutStoryInput[] | PlotPointUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: PlotPointCreateOrConnectWithoutStoryInput | PlotPointCreateOrConnectWithoutStoryInput[]
    upsert?: PlotPointUpsertWithWhereUniqueWithoutStoryInput | PlotPointUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: PlotPointCreateManyStoryInputEnvelope
    set?: PlotPointWhereUniqueInput | PlotPointWhereUniqueInput[]
    disconnect?: PlotPointWhereUniqueInput | PlotPointWhereUniqueInput[]
    delete?: PlotPointWhereUniqueInput | PlotPointWhereUniqueInput[]
    connect?: PlotPointWhereUniqueInput | PlotPointWhereUniqueInput[]
    update?: PlotPointUpdateWithWhereUniqueWithoutStoryInput | PlotPointUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: PlotPointUpdateManyWithWhereWithoutStoryInput | PlotPointUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: PlotPointScalarWhereInput | PlotPointScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutStoryNestedInput = {
    create?: XOR<ItemCreateWithoutStoryInput, ItemUncheckedCreateWithoutStoryInput> | ItemCreateWithoutStoryInput[] | ItemUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutStoryInput | ItemCreateOrConnectWithoutStoryInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutStoryInput | ItemUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: ItemCreateManyStoryInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutStoryInput | ItemUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutStoryInput | ItemUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type StoryTagCreateNestedManyWithoutTagInput = {
    create?: XOR<StoryTagCreateWithoutTagInput, StoryTagUncheckedCreateWithoutTagInput> | StoryTagCreateWithoutTagInput[] | StoryTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: StoryTagCreateOrConnectWithoutTagInput | StoryTagCreateOrConnectWithoutTagInput[]
    createMany?: StoryTagCreateManyTagInputEnvelope
    connect?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
  }

  export type StoryTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<StoryTagCreateWithoutTagInput, StoryTagUncheckedCreateWithoutTagInput> | StoryTagCreateWithoutTagInput[] | StoryTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: StoryTagCreateOrConnectWithoutTagInput | StoryTagCreateOrConnectWithoutTagInput[]
    createMany?: StoryTagCreateManyTagInputEnvelope
    connect?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
  }

  export type StoryTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<StoryTagCreateWithoutTagInput, StoryTagUncheckedCreateWithoutTagInput> | StoryTagCreateWithoutTagInput[] | StoryTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: StoryTagCreateOrConnectWithoutTagInput | StoryTagCreateOrConnectWithoutTagInput[]
    upsert?: StoryTagUpsertWithWhereUniqueWithoutTagInput | StoryTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: StoryTagCreateManyTagInputEnvelope
    set?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    disconnect?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    delete?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    connect?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    update?: StoryTagUpdateWithWhereUniqueWithoutTagInput | StoryTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: StoryTagUpdateManyWithWhereWithoutTagInput | StoryTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: StoryTagScalarWhereInput | StoryTagScalarWhereInput[]
  }

  export type StoryTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<StoryTagCreateWithoutTagInput, StoryTagUncheckedCreateWithoutTagInput> | StoryTagCreateWithoutTagInput[] | StoryTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: StoryTagCreateOrConnectWithoutTagInput | StoryTagCreateOrConnectWithoutTagInput[]
    upsert?: StoryTagUpsertWithWhereUniqueWithoutTagInput | StoryTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: StoryTagCreateManyTagInputEnvelope
    set?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    disconnect?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    delete?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    connect?: StoryTagWhereUniqueInput | StoryTagWhereUniqueInput[]
    update?: StoryTagUpdateWithWhereUniqueWithoutTagInput | StoryTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: StoryTagUpdateManyWithWhereWithoutTagInput | StoryTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: StoryTagScalarWhereInput | StoryTagScalarWhereInput[]
  }

  export type StoryCreateNestedOneWithoutStoryTagsInput = {
    create?: XOR<StoryCreateWithoutStoryTagsInput, StoryUncheckedCreateWithoutStoryTagsInput>
    connectOrCreate?: StoryCreateOrConnectWithoutStoryTagsInput
    connect?: StoryWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutStoryTagsInput = {
    create?: XOR<TagCreateWithoutStoryTagsInput, TagUncheckedCreateWithoutStoryTagsInput>
    connectOrCreate?: TagCreateOrConnectWithoutStoryTagsInput
    connect?: TagWhereUniqueInput
  }

  export type StoryUpdateOneRequiredWithoutStoryTagsNestedInput = {
    create?: XOR<StoryCreateWithoutStoryTagsInput, StoryUncheckedCreateWithoutStoryTagsInput>
    connectOrCreate?: StoryCreateOrConnectWithoutStoryTagsInput
    upsert?: StoryUpsertWithoutStoryTagsInput
    connect?: StoryWhereUniqueInput
    update?: XOR<XOR<StoryUpdateToOneWithWhereWithoutStoryTagsInput, StoryUpdateWithoutStoryTagsInput>, StoryUncheckedUpdateWithoutStoryTagsInput>
  }

  export type TagUpdateOneRequiredWithoutStoryTagsNestedInput = {
    create?: XOR<TagCreateWithoutStoryTagsInput, TagUncheckedCreateWithoutStoryTagsInput>
    connectOrCreate?: TagCreateOrConnectWithoutStoryTagsInput
    upsert?: TagUpsertWithoutStoryTagsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutStoryTagsInput, TagUpdateWithoutStoryTagsInput>, TagUncheckedUpdateWithoutStoryTagsInput>
  }

  export type StoryCreateNestedOneWithoutStoryReadStatusesInput = {
    create?: XOR<StoryCreateWithoutStoryReadStatusesInput, StoryUncheckedCreateWithoutStoryReadStatusesInput>
    connectOrCreate?: StoryCreateOrConnectWithoutStoryReadStatusesInput
    connect?: StoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutStoryReadStatusesInput = {
    create?: XOR<UserCreateWithoutStoryReadStatusesInput, UserUncheckedCreateWithoutStoryReadStatusesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStoryReadStatusesInput
    connect?: UserWhereUniqueInput
  }

  export type ChapterCreateNestedOneWithoutStoryReadStatusInput = {
    create?: XOR<ChapterCreateWithoutStoryReadStatusInput, ChapterUncheckedCreateWithoutStoryReadStatusInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutStoryReadStatusInput
    connect?: ChapterWhereUniqueInput
  }

  export type StoryUpdateOneRequiredWithoutStoryReadStatusesNestedInput = {
    create?: XOR<StoryCreateWithoutStoryReadStatusesInput, StoryUncheckedCreateWithoutStoryReadStatusesInput>
    connectOrCreate?: StoryCreateOrConnectWithoutStoryReadStatusesInput
    upsert?: StoryUpsertWithoutStoryReadStatusesInput
    connect?: StoryWhereUniqueInput
    update?: XOR<XOR<StoryUpdateToOneWithWhereWithoutStoryReadStatusesInput, StoryUpdateWithoutStoryReadStatusesInput>, StoryUncheckedUpdateWithoutStoryReadStatusesInput>
  }

  export type UserUpdateOneRequiredWithoutStoryReadStatusesNestedInput = {
    create?: XOR<UserCreateWithoutStoryReadStatusesInput, UserUncheckedCreateWithoutStoryReadStatusesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStoryReadStatusesInput
    upsert?: UserUpsertWithoutStoryReadStatusesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStoryReadStatusesInput, UserUpdateWithoutStoryReadStatusesInput>, UserUncheckedUpdateWithoutStoryReadStatusesInput>
  }

  export type ChapterUpdateOneWithoutStoryReadStatusNestedInput = {
    create?: XOR<ChapterCreateWithoutStoryReadStatusInput, ChapterUncheckedCreateWithoutStoryReadStatusInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutStoryReadStatusInput
    upsert?: ChapterUpsertWithoutStoryReadStatusInput
    disconnect?: ChapterWhereInput | boolean
    delete?: ChapterWhereInput | boolean
    connect?: ChapterWhereUniqueInput
    update?: XOR<XOR<ChapterUpdateToOneWithWhereWithoutStoryReadStatusInput, ChapterUpdateWithoutStoryReadStatusInput>, ChapterUncheckedUpdateWithoutStoryReadStatusInput>
  }

  export type StoryCreateNestedOneWithoutBooksInput = {
    create?: XOR<StoryCreateWithoutBooksInput, StoryUncheckedCreateWithoutBooksInput>
    connectOrCreate?: StoryCreateOrConnectWithoutBooksInput
    connect?: StoryWhereUniqueInput
  }

  export type FileCreateNestedOneWithoutBookCoverArtInput = {
    create?: XOR<FileCreateWithoutBookCoverArtInput, FileUncheckedCreateWithoutBookCoverArtInput>
    connectOrCreate?: FileCreateOrConnectWithoutBookCoverArtInput
    connect?: FileWhereUniqueInput
  }

  export type FileCreateNestedOneWithoutBookSpineArtInput = {
    create?: XOR<FileCreateWithoutBookSpineArtInput, FileUncheckedCreateWithoutBookSpineArtInput>
    connectOrCreate?: FileCreateOrConnectWithoutBookSpineArtInput
    connect?: FileWhereUniqueInput
  }

  export type ArcCreateNestedManyWithoutBookInput = {
    create?: XOR<ArcCreateWithoutBookInput, ArcUncheckedCreateWithoutBookInput> | ArcCreateWithoutBookInput[] | ArcUncheckedCreateWithoutBookInput[]
    connectOrCreate?: ArcCreateOrConnectWithoutBookInput | ArcCreateOrConnectWithoutBookInput[]
    createMany?: ArcCreateManyBookInputEnvelope
    connect?: ArcWhereUniqueInput | ArcWhereUniqueInput[]
  }

  export type ArcUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<ArcCreateWithoutBookInput, ArcUncheckedCreateWithoutBookInput> | ArcCreateWithoutBookInput[] | ArcUncheckedCreateWithoutBookInput[]
    connectOrCreate?: ArcCreateOrConnectWithoutBookInput | ArcCreateOrConnectWithoutBookInput[]
    createMany?: ArcCreateManyBookInputEnvelope
    connect?: ArcWhereUniqueInput | ArcWhereUniqueInput[]
  }

  export type StoryUpdateOneRequiredWithoutBooksNestedInput = {
    create?: XOR<StoryCreateWithoutBooksInput, StoryUncheckedCreateWithoutBooksInput>
    connectOrCreate?: StoryCreateOrConnectWithoutBooksInput
    upsert?: StoryUpsertWithoutBooksInput
    connect?: StoryWhereUniqueInput
    update?: XOR<XOR<StoryUpdateToOneWithWhereWithoutBooksInput, StoryUpdateWithoutBooksInput>, StoryUncheckedUpdateWithoutBooksInput>
  }

  export type FileUpdateOneWithoutBookCoverArtNestedInput = {
    create?: XOR<FileCreateWithoutBookCoverArtInput, FileUncheckedCreateWithoutBookCoverArtInput>
    connectOrCreate?: FileCreateOrConnectWithoutBookCoverArtInput
    upsert?: FileUpsertWithoutBookCoverArtInput
    disconnect?: FileWhereInput | boolean
    delete?: FileWhereInput | boolean
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutBookCoverArtInput, FileUpdateWithoutBookCoverArtInput>, FileUncheckedUpdateWithoutBookCoverArtInput>
  }

  export type FileUpdateOneWithoutBookSpineArtNestedInput = {
    create?: XOR<FileCreateWithoutBookSpineArtInput, FileUncheckedCreateWithoutBookSpineArtInput>
    connectOrCreate?: FileCreateOrConnectWithoutBookSpineArtInput
    upsert?: FileUpsertWithoutBookSpineArtInput
    disconnect?: FileWhereInput | boolean
    delete?: FileWhereInput | boolean
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutBookSpineArtInput, FileUpdateWithoutBookSpineArtInput>, FileUncheckedUpdateWithoutBookSpineArtInput>
  }

  export type ArcUpdateManyWithoutBookNestedInput = {
    create?: XOR<ArcCreateWithoutBookInput, ArcUncheckedCreateWithoutBookInput> | ArcCreateWithoutBookInput[] | ArcUncheckedCreateWithoutBookInput[]
    connectOrCreate?: ArcCreateOrConnectWithoutBookInput | ArcCreateOrConnectWithoutBookInput[]
    upsert?: ArcUpsertWithWhereUniqueWithoutBookInput | ArcUpsertWithWhereUniqueWithoutBookInput[]
    createMany?: ArcCreateManyBookInputEnvelope
    set?: ArcWhereUniqueInput | ArcWhereUniqueInput[]
    disconnect?: ArcWhereUniqueInput | ArcWhereUniqueInput[]
    delete?: ArcWhereUniqueInput | ArcWhereUniqueInput[]
    connect?: ArcWhereUniqueInput | ArcWhereUniqueInput[]
    update?: ArcUpdateWithWhereUniqueWithoutBookInput | ArcUpdateWithWhereUniqueWithoutBookInput[]
    updateMany?: ArcUpdateManyWithWhereWithoutBookInput | ArcUpdateManyWithWhereWithoutBookInput[]
    deleteMany?: ArcScalarWhereInput | ArcScalarWhereInput[]
  }

  export type ArcUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<ArcCreateWithoutBookInput, ArcUncheckedCreateWithoutBookInput> | ArcCreateWithoutBookInput[] | ArcUncheckedCreateWithoutBookInput[]
    connectOrCreate?: ArcCreateOrConnectWithoutBookInput | ArcCreateOrConnectWithoutBookInput[]
    upsert?: ArcUpsertWithWhereUniqueWithoutBookInput | ArcUpsertWithWhereUniqueWithoutBookInput[]
    createMany?: ArcCreateManyBookInputEnvelope
    set?: ArcWhereUniqueInput | ArcWhereUniqueInput[]
    disconnect?: ArcWhereUniqueInput | ArcWhereUniqueInput[]
    delete?: ArcWhereUniqueInput | ArcWhereUniqueInput[]
    connect?: ArcWhereUniqueInput | ArcWhereUniqueInput[]
    update?: ArcUpdateWithWhereUniqueWithoutBookInput | ArcUpdateWithWhereUniqueWithoutBookInput[]
    updateMany?: ArcUpdateManyWithWhereWithoutBookInput | ArcUpdateManyWithWhereWithoutBookInput[]
    deleteMany?: ArcScalarWhereInput | ArcScalarWhereInput[]
  }

  export type BookCreateNestedOneWithoutArcsInput = {
    create?: XOR<BookCreateWithoutArcsInput, BookUncheckedCreateWithoutArcsInput>
    connectOrCreate?: BookCreateOrConnectWithoutArcsInput
    connect?: BookWhereUniqueInput
  }

  export type ChapterCreateNestedManyWithoutArcInput = {
    create?: XOR<ChapterCreateWithoutArcInput, ChapterUncheckedCreateWithoutArcInput> | ChapterCreateWithoutArcInput[] | ChapterUncheckedCreateWithoutArcInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutArcInput | ChapterCreateOrConnectWithoutArcInput[]
    createMany?: ChapterCreateManyArcInputEnvelope
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
  }

  export type ChapterUncheckedCreateNestedManyWithoutArcInput = {
    create?: XOR<ChapterCreateWithoutArcInput, ChapterUncheckedCreateWithoutArcInput> | ChapterCreateWithoutArcInput[] | ChapterUncheckedCreateWithoutArcInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutArcInput | ChapterCreateOrConnectWithoutArcInput[]
    createMany?: ChapterCreateManyArcInputEnvelope
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
  }

  export type BookUpdateOneRequiredWithoutArcsNestedInput = {
    create?: XOR<BookCreateWithoutArcsInput, BookUncheckedCreateWithoutArcsInput>
    connectOrCreate?: BookCreateOrConnectWithoutArcsInput
    upsert?: BookUpsertWithoutArcsInput
    connect?: BookWhereUniqueInput
    update?: XOR<XOR<BookUpdateToOneWithWhereWithoutArcsInput, BookUpdateWithoutArcsInput>, BookUncheckedUpdateWithoutArcsInput>
  }

  export type ChapterUpdateManyWithoutArcNestedInput = {
    create?: XOR<ChapterCreateWithoutArcInput, ChapterUncheckedCreateWithoutArcInput> | ChapterCreateWithoutArcInput[] | ChapterUncheckedCreateWithoutArcInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutArcInput | ChapterCreateOrConnectWithoutArcInput[]
    upsert?: ChapterUpsertWithWhereUniqueWithoutArcInput | ChapterUpsertWithWhereUniqueWithoutArcInput[]
    createMany?: ChapterCreateManyArcInputEnvelope
    set?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    disconnect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    delete?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    update?: ChapterUpdateWithWhereUniqueWithoutArcInput | ChapterUpdateWithWhereUniqueWithoutArcInput[]
    updateMany?: ChapterUpdateManyWithWhereWithoutArcInput | ChapterUpdateManyWithWhereWithoutArcInput[]
    deleteMany?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
  }

  export type ChapterUncheckedUpdateManyWithoutArcNestedInput = {
    create?: XOR<ChapterCreateWithoutArcInput, ChapterUncheckedCreateWithoutArcInput> | ChapterCreateWithoutArcInput[] | ChapterUncheckedCreateWithoutArcInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutArcInput | ChapterCreateOrConnectWithoutArcInput[]
    upsert?: ChapterUpsertWithWhereUniqueWithoutArcInput | ChapterUpsertWithWhereUniqueWithoutArcInput[]
    createMany?: ChapterCreateManyArcInputEnvelope
    set?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    disconnect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    delete?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    update?: ChapterUpdateWithWhereUniqueWithoutArcInput | ChapterUpdateWithWhereUniqueWithoutArcInput[]
    updateMany?: ChapterUpdateManyWithWhereWithoutArcInput | ChapterUpdateManyWithWhereWithoutArcInput[]
    deleteMany?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
  }

  export type ArcCreateNestedOneWithoutChaptersInput = {
    create?: XOR<ArcCreateWithoutChaptersInput, ArcUncheckedCreateWithoutChaptersInput>
    connectOrCreate?: ArcCreateOrConnectWithoutChaptersInput
    connect?: ArcWhereUniqueInput
  }

  export type SceneCreateNestedManyWithoutChapterInput = {
    create?: XOR<SceneCreateWithoutChapterInput, SceneUncheckedCreateWithoutChapterInput> | SceneCreateWithoutChapterInput[] | SceneUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutChapterInput | SceneCreateOrConnectWithoutChapterInput[]
    createMany?: SceneCreateManyChapterInputEnvelope
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
  }

  export type StoryReadStatusCreateNestedManyWithoutLastChapterInput = {
    create?: XOR<StoryReadStatusCreateWithoutLastChapterInput, StoryReadStatusUncheckedCreateWithoutLastChapterInput> | StoryReadStatusCreateWithoutLastChapterInput[] | StoryReadStatusUncheckedCreateWithoutLastChapterInput[]
    connectOrCreate?: StoryReadStatusCreateOrConnectWithoutLastChapterInput | StoryReadStatusCreateOrConnectWithoutLastChapterInput[]
    createMany?: StoryReadStatusCreateManyLastChapterInputEnvelope
    connect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
  }

  export type ChapterPublishingCreateNestedManyWithoutChapterInput = {
    create?: XOR<ChapterPublishingCreateWithoutChapterInput, ChapterPublishingUncheckedCreateWithoutChapterInput> | ChapterPublishingCreateWithoutChapterInput[] | ChapterPublishingUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: ChapterPublishingCreateOrConnectWithoutChapterInput | ChapterPublishingCreateOrConnectWithoutChapterInput[]
    createMany?: ChapterPublishingCreateManyChapterInputEnvelope
    connect?: ChapterPublishingWhereUniqueInput | ChapterPublishingWhereUniqueInput[]
  }

  export type SceneUncheckedCreateNestedManyWithoutChapterInput = {
    create?: XOR<SceneCreateWithoutChapterInput, SceneUncheckedCreateWithoutChapterInput> | SceneCreateWithoutChapterInput[] | SceneUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutChapterInput | SceneCreateOrConnectWithoutChapterInput[]
    createMany?: SceneCreateManyChapterInputEnvelope
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
  }

  export type StoryReadStatusUncheckedCreateNestedManyWithoutLastChapterInput = {
    create?: XOR<StoryReadStatusCreateWithoutLastChapterInput, StoryReadStatusUncheckedCreateWithoutLastChapterInput> | StoryReadStatusCreateWithoutLastChapterInput[] | StoryReadStatusUncheckedCreateWithoutLastChapterInput[]
    connectOrCreate?: StoryReadStatusCreateOrConnectWithoutLastChapterInput | StoryReadStatusCreateOrConnectWithoutLastChapterInput[]
    createMany?: StoryReadStatusCreateManyLastChapterInputEnvelope
    connect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
  }

  export type ChapterPublishingUncheckedCreateNestedManyWithoutChapterInput = {
    create?: XOR<ChapterPublishingCreateWithoutChapterInput, ChapterPublishingUncheckedCreateWithoutChapterInput> | ChapterPublishingCreateWithoutChapterInput[] | ChapterPublishingUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: ChapterPublishingCreateOrConnectWithoutChapterInput | ChapterPublishingCreateOrConnectWithoutChapterInput[]
    createMany?: ChapterPublishingCreateManyChapterInputEnvelope
    connect?: ChapterPublishingWhereUniqueInput | ChapterPublishingWhereUniqueInput[]
  }

  export type ArcUpdateOneRequiredWithoutChaptersNestedInput = {
    create?: XOR<ArcCreateWithoutChaptersInput, ArcUncheckedCreateWithoutChaptersInput>
    connectOrCreate?: ArcCreateOrConnectWithoutChaptersInput
    upsert?: ArcUpsertWithoutChaptersInput
    connect?: ArcWhereUniqueInput
    update?: XOR<XOR<ArcUpdateToOneWithWhereWithoutChaptersInput, ArcUpdateWithoutChaptersInput>, ArcUncheckedUpdateWithoutChaptersInput>
  }

  export type SceneUpdateManyWithoutChapterNestedInput = {
    create?: XOR<SceneCreateWithoutChapterInput, SceneUncheckedCreateWithoutChapterInput> | SceneCreateWithoutChapterInput[] | SceneUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutChapterInput | SceneCreateOrConnectWithoutChapterInput[]
    upsert?: SceneUpsertWithWhereUniqueWithoutChapterInput | SceneUpsertWithWhereUniqueWithoutChapterInput[]
    createMany?: SceneCreateManyChapterInputEnvelope
    set?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    disconnect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    delete?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    update?: SceneUpdateWithWhereUniqueWithoutChapterInput | SceneUpdateWithWhereUniqueWithoutChapterInput[]
    updateMany?: SceneUpdateManyWithWhereWithoutChapterInput | SceneUpdateManyWithWhereWithoutChapterInput[]
    deleteMany?: SceneScalarWhereInput | SceneScalarWhereInput[]
  }

  export type StoryReadStatusUpdateManyWithoutLastChapterNestedInput = {
    create?: XOR<StoryReadStatusCreateWithoutLastChapterInput, StoryReadStatusUncheckedCreateWithoutLastChapterInput> | StoryReadStatusCreateWithoutLastChapterInput[] | StoryReadStatusUncheckedCreateWithoutLastChapterInput[]
    connectOrCreate?: StoryReadStatusCreateOrConnectWithoutLastChapterInput | StoryReadStatusCreateOrConnectWithoutLastChapterInput[]
    upsert?: StoryReadStatusUpsertWithWhereUniqueWithoutLastChapterInput | StoryReadStatusUpsertWithWhereUniqueWithoutLastChapterInput[]
    createMany?: StoryReadStatusCreateManyLastChapterInputEnvelope
    set?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    disconnect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    delete?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    connect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    update?: StoryReadStatusUpdateWithWhereUniqueWithoutLastChapterInput | StoryReadStatusUpdateWithWhereUniqueWithoutLastChapterInput[]
    updateMany?: StoryReadStatusUpdateManyWithWhereWithoutLastChapterInput | StoryReadStatusUpdateManyWithWhereWithoutLastChapterInput[]
    deleteMany?: StoryReadStatusScalarWhereInput | StoryReadStatusScalarWhereInput[]
  }

  export type ChapterPublishingUpdateManyWithoutChapterNestedInput = {
    create?: XOR<ChapterPublishingCreateWithoutChapterInput, ChapterPublishingUncheckedCreateWithoutChapterInput> | ChapterPublishingCreateWithoutChapterInput[] | ChapterPublishingUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: ChapterPublishingCreateOrConnectWithoutChapterInput | ChapterPublishingCreateOrConnectWithoutChapterInput[]
    upsert?: ChapterPublishingUpsertWithWhereUniqueWithoutChapterInput | ChapterPublishingUpsertWithWhereUniqueWithoutChapterInput[]
    createMany?: ChapterPublishingCreateManyChapterInputEnvelope
    set?: ChapterPublishingWhereUniqueInput | ChapterPublishingWhereUniqueInput[]
    disconnect?: ChapterPublishingWhereUniqueInput | ChapterPublishingWhereUniqueInput[]
    delete?: ChapterPublishingWhereUniqueInput | ChapterPublishingWhereUniqueInput[]
    connect?: ChapterPublishingWhereUniqueInput | ChapterPublishingWhereUniqueInput[]
    update?: ChapterPublishingUpdateWithWhereUniqueWithoutChapterInput | ChapterPublishingUpdateWithWhereUniqueWithoutChapterInput[]
    updateMany?: ChapterPublishingUpdateManyWithWhereWithoutChapterInput | ChapterPublishingUpdateManyWithWhereWithoutChapterInput[]
    deleteMany?: ChapterPublishingScalarWhereInput | ChapterPublishingScalarWhereInput[]
  }

  export type SceneUncheckedUpdateManyWithoutChapterNestedInput = {
    create?: XOR<SceneCreateWithoutChapterInput, SceneUncheckedCreateWithoutChapterInput> | SceneCreateWithoutChapterInput[] | SceneUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutChapterInput | SceneCreateOrConnectWithoutChapterInput[]
    upsert?: SceneUpsertWithWhereUniqueWithoutChapterInput | SceneUpsertWithWhereUniqueWithoutChapterInput[]
    createMany?: SceneCreateManyChapterInputEnvelope
    set?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    disconnect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    delete?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    update?: SceneUpdateWithWhereUniqueWithoutChapterInput | SceneUpdateWithWhereUniqueWithoutChapterInput[]
    updateMany?: SceneUpdateManyWithWhereWithoutChapterInput | SceneUpdateManyWithWhereWithoutChapterInput[]
    deleteMany?: SceneScalarWhereInput | SceneScalarWhereInput[]
  }

  export type StoryReadStatusUncheckedUpdateManyWithoutLastChapterNestedInput = {
    create?: XOR<StoryReadStatusCreateWithoutLastChapterInput, StoryReadStatusUncheckedCreateWithoutLastChapterInput> | StoryReadStatusCreateWithoutLastChapterInput[] | StoryReadStatusUncheckedCreateWithoutLastChapterInput[]
    connectOrCreate?: StoryReadStatusCreateOrConnectWithoutLastChapterInput | StoryReadStatusCreateOrConnectWithoutLastChapterInput[]
    upsert?: StoryReadStatusUpsertWithWhereUniqueWithoutLastChapterInput | StoryReadStatusUpsertWithWhereUniqueWithoutLastChapterInput[]
    createMany?: StoryReadStatusCreateManyLastChapterInputEnvelope
    set?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    disconnect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    delete?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    connect?: StoryReadStatusWhereUniqueInput | StoryReadStatusWhereUniqueInput[]
    update?: StoryReadStatusUpdateWithWhereUniqueWithoutLastChapterInput | StoryReadStatusUpdateWithWhereUniqueWithoutLastChapterInput[]
    updateMany?: StoryReadStatusUpdateManyWithWhereWithoutLastChapterInput | StoryReadStatusUpdateManyWithWhereWithoutLastChapterInput[]
    deleteMany?: StoryReadStatusScalarWhereInput | StoryReadStatusScalarWhereInput[]
  }

  export type ChapterPublishingUncheckedUpdateManyWithoutChapterNestedInput = {
    create?: XOR<ChapterPublishingCreateWithoutChapterInput, ChapterPublishingUncheckedCreateWithoutChapterInput> | ChapterPublishingCreateWithoutChapterInput[] | ChapterPublishingUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: ChapterPublishingCreateOrConnectWithoutChapterInput | ChapterPublishingCreateOrConnectWithoutChapterInput[]
    upsert?: ChapterPublishingUpsertWithWhereUniqueWithoutChapterInput | ChapterPublishingUpsertWithWhereUniqueWithoutChapterInput[]
    createMany?: ChapterPublishingCreateManyChapterInputEnvelope
    set?: ChapterPublishingWhereUniqueInput | ChapterPublishingWhereUniqueInput[]
    disconnect?: ChapterPublishingWhereUniqueInput | ChapterPublishingWhereUniqueInput[]
    delete?: ChapterPublishingWhereUniqueInput | ChapterPublishingWhereUniqueInput[]
    connect?: ChapterPublishingWhereUniqueInput | ChapterPublishingWhereUniqueInput[]
    update?: ChapterPublishingUpdateWithWhereUniqueWithoutChapterInput | ChapterPublishingUpdateWithWhereUniqueWithoutChapterInput[]
    updateMany?: ChapterPublishingUpdateManyWithWhereWithoutChapterInput | ChapterPublishingUpdateManyWithWhereWithoutChapterInput[]
    deleteMany?: ChapterPublishingScalarWhereInput | ChapterPublishingScalarWhereInput[]
  }

  export type ChapterCreateNestedOneWithoutScenesInput = {
    create?: XOR<ChapterCreateWithoutScenesInput, ChapterUncheckedCreateWithoutScenesInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutScenesInput
    connect?: ChapterWhereUniqueInput
  }

  export type CharacterCreateNestedOneWithoutSceneProtagonistInInput = {
    create?: XOR<CharacterCreateWithoutSceneProtagonistInInput, CharacterUncheckedCreateWithoutSceneProtagonistInInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutSceneProtagonistInInput
    connect?: CharacterWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutScenesInput = {
    create?: XOR<LocationCreateWithoutScenesInput, LocationUncheckedCreateWithoutScenesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutScenesInput
    connect?: LocationWhereUniqueInput
  }

  export type ParagraphCreateNestedManyWithoutSceneInput = {
    create?: XOR<ParagraphCreateWithoutSceneInput, ParagraphUncheckedCreateWithoutSceneInput> | ParagraphCreateWithoutSceneInput[] | ParagraphUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: ParagraphCreateOrConnectWithoutSceneInput | ParagraphCreateOrConnectWithoutSceneInput[]
    createMany?: ParagraphCreateManySceneInputEnvelope
    connect?: ParagraphWhereUniqueInput | ParagraphWhereUniqueInput[]
  }

  export type SceneCharacterCreateNestedManyWithoutSceneInput = {
    create?: XOR<SceneCharacterCreateWithoutSceneInput, SceneCharacterUncheckedCreateWithoutSceneInput> | SceneCharacterCreateWithoutSceneInput[] | SceneCharacterUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneCharacterCreateOrConnectWithoutSceneInput | SceneCharacterCreateOrConnectWithoutSceneInput[]
    createMany?: SceneCharacterCreateManySceneInputEnvelope
    connect?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
  }

  export type SceneReferredCharacterCreateNestedManyWithoutSceneInput = {
    create?: XOR<SceneReferredCharacterCreateWithoutSceneInput, SceneReferredCharacterUncheckedCreateWithoutSceneInput> | SceneReferredCharacterCreateWithoutSceneInput[] | SceneReferredCharacterUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneReferredCharacterCreateOrConnectWithoutSceneInput | SceneReferredCharacterCreateOrConnectWithoutSceneInput[]
    createMany?: SceneReferredCharacterCreateManySceneInputEnvelope
    connect?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
  }

  export type ParagraphUncheckedCreateNestedManyWithoutSceneInput = {
    create?: XOR<ParagraphCreateWithoutSceneInput, ParagraphUncheckedCreateWithoutSceneInput> | ParagraphCreateWithoutSceneInput[] | ParagraphUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: ParagraphCreateOrConnectWithoutSceneInput | ParagraphCreateOrConnectWithoutSceneInput[]
    createMany?: ParagraphCreateManySceneInputEnvelope
    connect?: ParagraphWhereUniqueInput | ParagraphWhereUniqueInput[]
  }

  export type SceneCharacterUncheckedCreateNestedManyWithoutSceneInput = {
    create?: XOR<SceneCharacterCreateWithoutSceneInput, SceneCharacterUncheckedCreateWithoutSceneInput> | SceneCharacterCreateWithoutSceneInput[] | SceneCharacterUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneCharacterCreateOrConnectWithoutSceneInput | SceneCharacterCreateOrConnectWithoutSceneInput[]
    createMany?: SceneCharacterCreateManySceneInputEnvelope
    connect?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
  }

  export type SceneReferredCharacterUncheckedCreateNestedManyWithoutSceneInput = {
    create?: XOR<SceneReferredCharacterCreateWithoutSceneInput, SceneReferredCharacterUncheckedCreateWithoutSceneInput> | SceneReferredCharacterCreateWithoutSceneInput[] | SceneReferredCharacterUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneReferredCharacterCreateOrConnectWithoutSceneInput | SceneReferredCharacterCreateOrConnectWithoutSceneInput[]
    createMany?: SceneReferredCharacterCreateManySceneInputEnvelope
    connect?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
  }

  export type ChapterUpdateOneRequiredWithoutScenesNestedInput = {
    create?: XOR<ChapterCreateWithoutScenesInput, ChapterUncheckedCreateWithoutScenesInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutScenesInput
    upsert?: ChapterUpsertWithoutScenesInput
    connect?: ChapterWhereUniqueInput
    update?: XOR<XOR<ChapterUpdateToOneWithWhereWithoutScenesInput, ChapterUpdateWithoutScenesInput>, ChapterUncheckedUpdateWithoutScenesInput>
  }

  export type CharacterUpdateOneWithoutSceneProtagonistInNestedInput = {
    create?: XOR<CharacterCreateWithoutSceneProtagonistInInput, CharacterUncheckedCreateWithoutSceneProtagonistInInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutSceneProtagonistInInput
    upsert?: CharacterUpsertWithoutSceneProtagonistInInput
    disconnect?: CharacterWhereInput | boolean
    delete?: CharacterWhereInput | boolean
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutSceneProtagonistInInput, CharacterUpdateWithoutSceneProtagonistInInput>, CharacterUncheckedUpdateWithoutSceneProtagonistInInput>
  }

  export type LocationUpdateOneWithoutScenesNestedInput = {
    create?: XOR<LocationCreateWithoutScenesInput, LocationUncheckedCreateWithoutScenesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutScenesInput
    upsert?: LocationUpsertWithoutScenesInput
    disconnect?: LocationWhereInput | boolean
    delete?: LocationWhereInput | boolean
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutScenesInput, LocationUpdateWithoutScenesInput>, LocationUncheckedUpdateWithoutScenesInput>
  }

  export type ParagraphUpdateManyWithoutSceneNestedInput = {
    create?: XOR<ParagraphCreateWithoutSceneInput, ParagraphUncheckedCreateWithoutSceneInput> | ParagraphCreateWithoutSceneInput[] | ParagraphUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: ParagraphCreateOrConnectWithoutSceneInput | ParagraphCreateOrConnectWithoutSceneInput[]
    upsert?: ParagraphUpsertWithWhereUniqueWithoutSceneInput | ParagraphUpsertWithWhereUniqueWithoutSceneInput[]
    createMany?: ParagraphCreateManySceneInputEnvelope
    set?: ParagraphWhereUniqueInput | ParagraphWhereUniqueInput[]
    disconnect?: ParagraphWhereUniqueInput | ParagraphWhereUniqueInput[]
    delete?: ParagraphWhereUniqueInput | ParagraphWhereUniqueInput[]
    connect?: ParagraphWhereUniqueInput | ParagraphWhereUniqueInput[]
    update?: ParagraphUpdateWithWhereUniqueWithoutSceneInput | ParagraphUpdateWithWhereUniqueWithoutSceneInput[]
    updateMany?: ParagraphUpdateManyWithWhereWithoutSceneInput | ParagraphUpdateManyWithWhereWithoutSceneInput[]
    deleteMany?: ParagraphScalarWhereInput | ParagraphScalarWhereInput[]
  }

  export type SceneCharacterUpdateManyWithoutSceneNestedInput = {
    create?: XOR<SceneCharacterCreateWithoutSceneInput, SceneCharacterUncheckedCreateWithoutSceneInput> | SceneCharacterCreateWithoutSceneInput[] | SceneCharacterUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneCharacterCreateOrConnectWithoutSceneInput | SceneCharacterCreateOrConnectWithoutSceneInput[]
    upsert?: SceneCharacterUpsertWithWhereUniqueWithoutSceneInput | SceneCharacterUpsertWithWhereUniqueWithoutSceneInput[]
    createMany?: SceneCharacterCreateManySceneInputEnvelope
    set?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    disconnect?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    delete?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    connect?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    update?: SceneCharacterUpdateWithWhereUniqueWithoutSceneInput | SceneCharacterUpdateWithWhereUniqueWithoutSceneInput[]
    updateMany?: SceneCharacterUpdateManyWithWhereWithoutSceneInput | SceneCharacterUpdateManyWithWhereWithoutSceneInput[]
    deleteMany?: SceneCharacterScalarWhereInput | SceneCharacterScalarWhereInput[]
  }

  export type SceneReferredCharacterUpdateManyWithoutSceneNestedInput = {
    create?: XOR<SceneReferredCharacterCreateWithoutSceneInput, SceneReferredCharacterUncheckedCreateWithoutSceneInput> | SceneReferredCharacterCreateWithoutSceneInput[] | SceneReferredCharacterUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneReferredCharacterCreateOrConnectWithoutSceneInput | SceneReferredCharacterCreateOrConnectWithoutSceneInput[]
    upsert?: SceneReferredCharacterUpsertWithWhereUniqueWithoutSceneInput | SceneReferredCharacterUpsertWithWhereUniqueWithoutSceneInput[]
    createMany?: SceneReferredCharacterCreateManySceneInputEnvelope
    set?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    disconnect?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    delete?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    connect?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    update?: SceneReferredCharacterUpdateWithWhereUniqueWithoutSceneInput | SceneReferredCharacterUpdateWithWhereUniqueWithoutSceneInput[]
    updateMany?: SceneReferredCharacterUpdateManyWithWhereWithoutSceneInput | SceneReferredCharacterUpdateManyWithWhereWithoutSceneInput[]
    deleteMany?: SceneReferredCharacterScalarWhereInput | SceneReferredCharacterScalarWhereInput[]
  }

  export type ParagraphUncheckedUpdateManyWithoutSceneNestedInput = {
    create?: XOR<ParagraphCreateWithoutSceneInput, ParagraphUncheckedCreateWithoutSceneInput> | ParagraphCreateWithoutSceneInput[] | ParagraphUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: ParagraphCreateOrConnectWithoutSceneInput | ParagraphCreateOrConnectWithoutSceneInput[]
    upsert?: ParagraphUpsertWithWhereUniqueWithoutSceneInput | ParagraphUpsertWithWhereUniqueWithoutSceneInput[]
    createMany?: ParagraphCreateManySceneInputEnvelope
    set?: ParagraphWhereUniqueInput | ParagraphWhereUniqueInput[]
    disconnect?: ParagraphWhereUniqueInput | ParagraphWhereUniqueInput[]
    delete?: ParagraphWhereUniqueInput | ParagraphWhereUniqueInput[]
    connect?: ParagraphWhereUniqueInput | ParagraphWhereUniqueInput[]
    update?: ParagraphUpdateWithWhereUniqueWithoutSceneInput | ParagraphUpdateWithWhereUniqueWithoutSceneInput[]
    updateMany?: ParagraphUpdateManyWithWhereWithoutSceneInput | ParagraphUpdateManyWithWhereWithoutSceneInput[]
    deleteMany?: ParagraphScalarWhereInput | ParagraphScalarWhereInput[]
  }

  export type SceneCharacterUncheckedUpdateManyWithoutSceneNestedInput = {
    create?: XOR<SceneCharacterCreateWithoutSceneInput, SceneCharacterUncheckedCreateWithoutSceneInput> | SceneCharacterCreateWithoutSceneInput[] | SceneCharacterUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneCharacterCreateOrConnectWithoutSceneInput | SceneCharacterCreateOrConnectWithoutSceneInput[]
    upsert?: SceneCharacterUpsertWithWhereUniqueWithoutSceneInput | SceneCharacterUpsertWithWhereUniqueWithoutSceneInput[]
    createMany?: SceneCharacterCreateManySceneInputEnvelope
    set?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    disconnect?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    delete?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    connect?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    update?: SceneCharacterUpdateWithWhereUniqueWithoutSceneInput | SceneCharacterUpdateWithWhereUniqueWithoutSceneInput[]
    updateMany?: SceneCharacterUpdateManyWithWhereWithoutSceneInput | SceneCharacterUpdateManyWithWhereWithoutSceneInput[]
    deleteMany?: SceneCharacterScalarWhereInput | SceneCharacterScalarWhereInput[]
  }

  export type SceneReferredCharacterUncheckedUpdateManyWithoutSceneNestedInput = {
    create?: XOR<SceneReferredCharacterCreateWithoutSceneInput, SceneReferredCharacterUncheckedCreateWithoutSceneInput> | SceneReferredCharacterCreateWithoutSceneInput[] | SceneReferredCharacterUncheckedCreateWithoutSceneInput[]
    connectOrCreate?: SceneReferredCharacterCreateOrConnectWithoutSceneInput | SceneReferredCharacterCreateOrConnectWithoutSceneInput[]
    upsert?: SceneReferredCharacterUpsertWithWhereUniqueWithoutSceneInput | SceneReferredCharacterUpsertWithWhereUniqueWithoutSceneInput[]
    createMany?: SceneReferredCharacterCreateManySceneInputEnvelope
    set?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    disconnect?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    delete?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    connect?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    update?: SceneReferredCharacterUpdateWithWhereUniqueWithoutSceneInput | SceneReferredCharacterUpdateWithWhereUniqueWithoutSceneInput[]
    updateMany?: SceneReferredCharacterUpdateManyWithWhereWithoutSceneInput | SceneReferredCharacterUpdateManyWithWhereWithoutSceneInput[]
    deleteMany?: SceneReferredCharacterScalarWhereInput | SceneReferredCharacterScalarWhereInput[]
  }

  export type SceneCreateNestedOneWithoutParagraphsInput = {
    create?: XOR<SceneCreateWithoutParagraphsInput, SceneUncheckedCreateWithoutParagraphsInput>
    connectOrCreate?: SceneCreateOrConnectWithoutParagraphsInput
    connect?: SceneWhereUniqueInput
  }

  export type ParagraphRevisionCreateNestedManyWithoutParagraphInput = {
    create?: XOR<ParagraphRevisionCreateWithoutParagraphInput, ParagraphRevisionUncheckedCreateWithoutParagraphInput> | ParagraphRevisionCreateWithoutParagraphInput[] | ParagraphRevisionUncheckedCreateWithoutParagraphInput[]
    connectOrCreate?: ParagraphRevisionCreateOrConnectWithoutParagraphInput | ParagraphRevisionCreateOrConnectWithoutParagraphInput[]
    createMany?: ParagraphRevisionCreateManyParagraphInputEnvelope
    connect?: ParagraphRevisionWhereUniqueInput | ParagraphRevisionWhereUniqueInput[]
  }

  export type ParagraphRevisionUncheckedCreateNestedManyWithoutParagraphInput = {
    create?: XOR<ParagraphRevisionCreateWithoutParagraphInput, ParagraphRevisionUncheckedCreateWithoutParagraphInput> | ParagraphRevisionCreateWithoutParagraphInput[] | ParagraphRevisionUncheckedCreateWithoutParagraphInput[]
    connectOrCreate?: ParagraphRevisionCreateOrConnectWithoutParagraphInput | ParagraphRevisionCreateOrConnectWithoutParagraphInput[]
    createMany?: ParagraphRevisionCreateManyParagraphInputEnvelope
    connect?: ParagraphRevisionWhereUniqueInput | ParagraphRevisionWhereUniqueInput[]
  }

  export type SceneUpdateOneRequiredWithoutParagraphsNestedInput = {
    create?: XOR<SceneCreateWithoutParagraphsInput, SceneUncheckedCreateWithoutParagraphsInput>
    connectOrCreate?: SceneCreateOrConnectWithoutParagraphsInput
    upsert?: SceneUpsertWithoutParagraphsInput
    connect?: SceneWhereUniqueInput
    update?: XOR<XOR<SceneUpdateToOneWithWhereWithoutParagraphsInput, SceneUpdateWithoutParagraphsInput>, SceneUncheckedUpdateWithoutParagraphsInput>
  }

  export type ParagraphRevisionUpdateManyWithoutParagraphNestedInput = {
    create?: XOR<ParagraphRevisionCreateWithoutParagraphInput, ParagraphRevisionUncheckedCreateWithoutParagraphInput> | ParagraphRevisionCreateWithoutParagraphInput[] | ParagraphRevisionUncheckedCreateWithoutParagraphInput[]
    connectOrCreate?: ParagraphRevisionCreateOrConnectWithoutParagraphInput | ParagraphRevisionCreateOrConnectWithoutParagraphInput[]
    upsert?: ParagraphRevisionUpsertWithWhereUniqueWithoutParagraphInput | ParagraphRevisionUpsertWithWhereUniqueWithoutParagraphInput[]
    createMany?: ParagraphRevisionCreateManyParagraphInputEnvelope
    set?: ParagraphRevisionWhereUniqueInput | ParagraphRevisionWhereUniqueInput[]
    disconnect?: ParagraphRevisionWhereUniqueInput | ParagraphRevisionWhereUniqueInput[]
    delete?: ParagraphRevisionWhereUniqueInput | ParagraphRevisionWhereUniqueInput[]
    connect?: ParagraphRevisionWhereUniqueInput | ParagraphRevisionWhereUniqueInput[]
    update?: ParagraphRevisionUpdateWithWhereUniqueWithoutParagraphInput | ParagraphRevisionUpdateWithWhereUniqueWithoutParagraphInput[]
    updateMany?: ParagraphRevisionUpdateManyWithWhereWithoutParagraphInput | ParagraphRevisionUpdateManyWithWhereWithoutParagraphInput[]
    deleteMany?: ParagraphRevisionScalarWhereInput | ParagraphRevisionScalarWhereInput[]
  }

  export type ParagraphRevisionUncheckedUpdateManyWithoutParagraphNestedInput = {
    create?: XOR<ParagraphRevisionCreateWithoutParagraphInput, ParagraphRevisionUncheckedCreateWithoutParagraphInput> | ParagraphRevisionCreateWithoutParagraphInput[] | ParagraphRevisionUncheckedCreateWithoutParagraphInput[]
    connectOrCreate?: ParagraphRevisionCreateOrConnectWithoutParagraphInput | ParagraphRevisionCreateOrConnectWithoutParagraphInput[]
    upsert?: ParagraphRevisionUpsertWithWhereUniqueWithoutParagraphInput | ParagraphRevisionUpsertWithWhereUniqueWithoutParagraphInput[]
    createMany?: ParagraphRevisionCreateManyParagraphInputEnvelope
    set?: ParagraphRevisionWhereUniqueInput | ParagraphRevisionWhereUniqueInput[]
    disconnect?: ParagraphRevisionWhereUniqueInput | ParagraphRevisionWhereUniqueInput[]
    delete?: ParagraphRevisionWhereUniqueInput | ParagraphRevisionWhereUniqueInput[]
    connect?: ParagraphRevisionWhereUniqueInput | ParagraphRevisionWhereUniqueInput[]
    update?: ParagraphRevisionUpdateWithWhereUniqueWithoutParagraphInput | ParagraphRevisionUpdateWithWhereUniqueWithoutParagraphInput[]
    updateMany?: ParagraphRevisionUpdateManyWithWhereWithoutParagraphInput | ParagraphRevisionUpdateManyWithWhereWithoutParagraphInput[]
    deleteMany?: ParagraphRevisionScalarWhereInput | ParagraphRevisionScalarWhereInput[]
  }

  export type ParagraphCreateNestedOneWithoutParagraphRevisionsInput = {
    create?: XOR<ParagraphCreateWithoutParagraphRevisionsInput, ParagraphUncheckedCreateWithoutParagraphRevisionsInput>
    connectOrCreate?: ParagraphCreateOrConnectWithoutParagraphRevisionsInput
    connect?: ParagraphWhereUniqueInput
  }

  export type ParagraphCommentCreateNestedManyWithoutParagraphRevisionInput = {
    create?: XOR<ParagraphCommentCreateWithoutParagraphRevisionInput, ParagraphCommentUncheckedCreateWithoutParagraphRevisionInput> | ParagraphCommentCreateWithoutParagraphRevisionInput[] | ParagraphCommentUncheckedCreateWithoutParagraphRevisionInput[]
    connectOrCreate?: ParagraphCommentCreateOrConnectWithoutParagraphRevisionInput | ParagraphCommentCreateOrConnectWithoutParagraphRevisionInput[]
    createMany?: ParagraphCommentCreateManyParagraphRevisionInputEnvelope
    connect?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
  }

  export type ParagraphCommentUncheckedCreateNestedManyWithoutParagraphRevisionInput = {
    create?: XOR<ParagraphCommentCreateWithoutParagraphRevisionInput, ParagraphCommentUncheckedCreateWithoutParagraphRevisionInput> | ParagraphCommentCreateWithoutParagraphRevisionInput[] | ParagraphCommentUncheckedCreateWithoutParagraphRevisionInput[]
    connectOrCreate?: ParagraphCommentCreateOrConnectWithoutParagraphRevisionInput | ParagraphCommentCreateOrConnectWithoutParagraphRevisionInput[]
    createMany?: ParagraphCommentCreateManyParagraphRevisionInputEnvelope
    connect?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
  }

  export type NullableEnumParagraphStateFieldUpdateOperationsInput = {
    set?: $Enums.ParagraphState | null
  }

  export type ParagraphUpdateOneRequiredWithoutParagraphRevisionsNestedInput = {
    create?: XOR<ParagraphCreateWithoutParagraphRevisionsInput, ParagraphUncheckedCreateWithoutParagraphRevisionsInput>
    connectOrCreate?: ParagraphCreateOrConnectWithoutParagraphRevisionsInput
    upsert?: ParagraphUpsertWithoutParagraphRevisionsInput
    connect?: ParagraphWhereUniqueInput
    update?: XOR<XOR<ParagraphUpdateToOneWithWhereWithoutParagraphRevisionsInput, ParagraphUpdateWithoutParagraphRevisionsInput>, ParagraphUncheckedUpdateWithoutParagraphRevisionsInput>
  }

  export type ParagraphCommentUpdateManyWithoutParagraphRevisionNestedInput = {
    create?: XOR<ParagraphCommentCreateWithoutParagraphRevisionInput, ParagraphCommentUncheckedCreateWithoutParagraphRevisionInput> | ParagraphCommentCreateWithoutParagraphRevisionInput[] | ParagraphCommentUncheckedCreateWithoutParagraphRevisionInput[]
    connectOrCreate?: ParagraphCommentCreateOrConnectWithoutParagraphRevisionInput | ParagraphCommentCreateOrConnectWithoutParagraphRevisionInput[]
    upsert?: ParagraphCommentUpsertWithWhereUniqueWithoutParagraphRevisionInput | ParagraphCommentUpsertWithWhereUniqueWithoutParagraphRevisionInput[]
    createMany?: ParagraphCommentCreateManyParagraphRevisionInputEnvelope
    set?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    disconnect?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    delete?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    connect?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    update?: ParagraphCommentUpdateWithWhereUniqueWithoutParagraphRevisionInput | ParagraphCommentUpdateWithWhereUniqueWithoutParagraphRevisionInput[]
    updateMany?: ParagraphCommentUpdateManyWithWhereWithoutParagraphRevisionInput | ParagraphCommentUpdateManyWithWhereWithoutParagraphRevisionInput[]
    deleteMany?: ParagraphCommentScalarWhereInput | ParagraphCommentScalarWhereInput[]
  }

  export type ParagraphCommentUncheckedUpdateManyWithoutParagraphRevisionNestedInput = {
    create?: XOR<ParagraphCommentCreateWithoutParagraphRevisionInput, ParagraphCommentUncheckedCreateWithoutParagraphRevisionInput> | ParagraphCommentCreateWithoutParagraphRevisionInput[] | ParagraphCommentUncheckedCreateWithoutParagraphRevisionInput[]
    connectOrCreate?: ParagraphCommentCreateOrConnectWithoutParagraphRevisionInput | ParagraphCommentCreateOrConnectWithoutParagraphRevisionInput[]
    upsert?: ParagraphCommentUpsertWithWhereUniqueWithoutParagraphRevisionInput | ParagraphCommentUpsertWithWhereUniqueWithoutParagraphRevisionInput[]
    createMany?: ParagraphCommentCreateManyParagraphRevisionInputEnvelope
    set?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    disconnect?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    delete?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    connect?: ParagraphCommentWhereUniqueInput | ParagraphCommentWhereUniqueInput[]
    update?: ParagraphCommentUpdateWithWhereUniqueWithoutParagraphRevisionInput | ParagraphCommentUpdateWithWhereUniqueWithoutParagraphRevisionInput[]
    updateMany?: ParagraphCommentUpdateManyWithWhereWithoutParagraphRevisionInput | ParagraphCommentUpdateManyWithWhereWithoutParagraphRevisionInput[]
    deleteMany?: ParagraphCommentScalarWhereInput | ParagraphCommentScalarWhereInput[]
  }

  export type ParagraphRevisionCreateNestedOneWithoutParagraphCommentInput = {
    create?: XOR<ParagraphRevisionCreateWithoutParagraphCommentInput, ParagraphRevisionUncheckedCreateWithoutParagraphCommentInput>
    connectOrCreate?: ParagraphRevisionCreateOrConnectWithoutParagraphCommentInput
    connect?: ParagraphRevisionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutParagraphCommentsInput = {
    create?: XOR<UserCreateWithoutParagraphCommentsInput, UserUncheckedCreateWithoutParagraphCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutParagraphCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumParagraphCommentTypeFieldUpdateOperationsInput = {
    set?: $Enums.ParagraphCommentType
  }

  export type ParagraphRevisionUpdateOneRequiredWithoutParagraphCommentNestedInput = {
    create?: XOR<ParagraphRevisionCreateWithoutParagraphCommentInput, ParagraphRevisionUncheckedCreateWithoutParagraphCommentInput>
    connectOrCreate?: ParagraphRevisionCreateOrConnectWithoutParagraphCommentInput
    upsert?: ParagraphRevisionUpsertWithoutParagraphCommentInput
    connect?: ParagraphRevisionWhereUniqueInput
    update?: XOR<XOR<ParagraphRevisionUpdateToOneWithWhereWithoutParagraphCommentInput, ParagraphRevisionUpdateWithoutParagraphCommentInput>, ParagraphRevisionUncheckedUpdateWithoutParagraphCommentInput>
  }

  export type UserUpdateOneRequiredWithoutParagraphCommentsNestedInput = {
    create?: XOR<UserCreateWithoutParagraphCommentsInput, UserUncheckedCreateWithoutParagraphCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutParagraphCommentsInput
    upsert?: UserUpsertWithoutParagraphCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutParagraphCommentsInput, UserUpdateWithoutParagraphCommentsInput>, UserUncheckedUpdateWithoutParagraphCommentsInput>
  }

  export type UserCreateNestedOneWithoutFilesInput = {
    create?: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilesInput
    connect?: UserWhereUniqueInput
  }

  export type StoryCreateNestedOneWithoutFilesInput = {
    create?: XOR<StoryCreateWithoutFilesInput, StoryUncheckedCreateWithoutFilesInput>
    connectOrCreate?: StoryCreateOrConnectWithoutFilesInput
    connect?: StoryWhereUniqueInput
  }

  export type StoryCreateNestedManyWithoutCoverArtFileInput = {
    create?: XOR<StoryCreateWithoutCoverArtFileInput, StoryUncheckedCreateWithoutCoverArtFileInput> | StoryCreateWithoutCoverArtFileInput[] | StoryUncheckedCreateWithoutCoverArtFileInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutCoverArtFileInput | StoryCreateOrConnectWithoutCoverArtFileInput[]
    createMany?: StoryCreateManyCoverArtFileInputEnvelope
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
  }

  export type BookCreateNestedManyWithoutCoverArtFileInput = {
    create?: XOR<BookCreateWithoutCoverArtFileInput, BookUncheckedCreateWithoutCoverArtFileInput> | BookCreateWithoutCoverArtFileInput[] | BookUncheckedCreateWithoutCoverArtFileInput[]
    connectOrCreate?: BookCreateOrConnectWithoutCoverArtFileInput | BookCreateOrConnectWithoutCoverArtFileInput[]
    createMany?: BookCreateManyCoverArtFileInputEnvelope
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
  }

  export type BookCreateNestedManyWithoutSpineArtFileInput = {
    create?: XOR<BookCreateWithoutSpineArtFileInput, BookUncheckedCreateWithoutSpineArtFileInput> | BookCreateWithoutSpineArtFileInput[] | BookUncheckedCreateWithoutSpineArtFileInput[]
    connectOrCreate?: BookCreateOrConnectWithoutSpineArtFileInput | BookCreateOrConnectWithoutSpineArtFileInput[]
    createMany?: BookCreateManySpineArtFileInputEnvelope
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
  }

  export type CharacterCreateNestedManyWithoutPictureFileInput = {
    create?: XOR<CharacterCreateWithoutPictureFileInput, CharacterUncheckedCreateWithoutPictureFileInput> | CharacterCreateWithoutPictureFileInput[] | CharacterUncheckedCreateWithoutPictureFileInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutPictureFileInput | CharacterCreateOrConnectWithoutPictureFileInput[]
    createMany?: CharacterCreateManyPictureFileInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type LocationCreateNestedManyWithoutPictureFileInput = {
    create?: XOR<LocationCreateWithoutPictureFileInput, LocationUncheckedCreateWithoutPictureFileInput> | LocationCreateWithoutPictureFileInput[] | LocationUncheckedCreateWithoutPictureFileInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutPictureFileInput | LocationCreateOrConnectWithoutPictureFileInput[]
    createMany?: LocationCreateManyPictureFileInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type StoryUncheckedCreateNestedManyWithoutCoverArtFileInput = {
    create?: XOR<StoryCreateWithoutCoverArtFileInput, StoryUncheckedCreateWithoutCoverArtFileInput> | StoryCreateWithoutCoverArtFileInput[] | StoryUncheckedCreateWithoutCoverArtFileInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutCoverArtFileInput | StoryCreateOrConnectWithoutCoverArtFileInput[]
    createMany?: StoryCreateManyCoverArtFileInputEnvelope
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
  }

  export type BookUncheckedCreateNestedManyWithoutCoverArtFileInput = {
    create?: XOR<BookCreateWithoutCoverArtFileInput, BookUncheckedCreateWithoutCoverArtFileInput> | BookCreateWithoutCoverArtFileInput[] | BookUncheckedCreateWithoutCoverArtFileInput[]
    connectOrCreate?: BookCreateOrConnectWithoutCoverArtFileInput | BookCreateOrConnectWithoutCoverArtFileInput[]
    createMany?: BookCreateManyCoverArtFileInputEnvelope
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
  }

  export type BookUncheckedCreateNestedManyWithoutSpineArtFileInput = {
    create?: XOR<BookCreateWithoutSpineArtFileInput, BookUncheckedCreateWithoutSpineArtFileInput> | BookCreateWithoutSpineArtFileInput[] | BookUncheckedCreateWithoutSpineArtFileInput[]
    connectOrCreate?: BookCreateOrConnectWithoutSpineArtFileInput | BookCreateOrConnectWithoutSpineArtFileInput[]
    createMany?: BookCreateManySpineArtFileInputEnvelope
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
  }

  export type CharacterUncheckedCreateNestedManyWithoutPictureFileInput = {
    create?: XOR<CharacterCreateWithoutPictureFileInput, CharacterUncheckedCreateWithoutPictureFileInput> | CharacterCreateWithoutPictureFileInput[] | CharacterUncheckedCreateWithoutPictureFileInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutPictureFileInput | CharacterCreateOrConnectWithoutPictureFileInput[]
    createMany?: CharacterCreateManyPictureFileInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type LocationUncheckedCreateNestedManyWithoutPictureFileInput = {
    create?: XOR<LocationCreateWithoutPictureFileInput, LocationUncheckedCreateWithoutPictureFileInput> | LocationCreateWithoutPictureFileInput[] | LocationUncheckedCreateWithoutPictureFileInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutPictureFileInput | LocationCreateOrConnectWithoutPictureFileInput[]
    createMany?: LocationCreateManyPictureFileInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilesInput
    upsert?: UserUpsertWithoutFilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFilesInput, UserUpdateWithoutFilesInput>, UserUncheckedUpdateWithoutFilesInput>
  }

  export type StoryUpdateOneWithoutFilesNestedInput = {
    create?: XOR<StoryCreateWithoutFilesInput, StoryUncheckedCreateWithoutFilesInput>
    connectOrCreate?: StoryCreateOrConnectWithoutFilesInput
    upsert?: StoryUpsertWithoutFilesInput
    disconnect?: StoryWhereInput | boolean
    delete?: StoryWhereInput | boolean
    connect?: StoryWhereUniqueInput
    update?: XOR<XOR<StoryUpdateToOneWithWhereWithoutFilesInput, StoryUpdateWithoutFilesInput>, StoryUncheckedUpdateWithoutFilesInput>
  }

  export type StoryUpdateManyWithoutCoverArtFileNestedInput = {
    create?: XOR<StoryCreateWithoutCoverArtFileInput, StoryUncheckedCreateWithoutCoverArtFileInput> | StoryCreateWithoutCoverArtFileInput[] | StoryUncheckedCreateWithoutCoverArtFileInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutCoverArtFileInput | StoryCreateOrConnectWithoutCoverArtFileInput[]
    upsert?: StoryUpsertWithWhereUniqueWithoutCoverArtFileInput | StoryUpsertWithWhereUniqueWithoutCoverArtFileInput[]
    createMany?: StoryCreateManyCoverArtFileInputEnvelope
    set?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    disconnect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    delete?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    update?: StoryUpdateWithWhereUniqueWithoutCoverArtFileInput | StoryUpdateWithWhereUniqueWithoutCoverArtFileInput[]
    updateMany?: StoryUpdateManyWithWhereWithoutCoverArtFileInput | StoryUpdateManyWithWhereWithoutCoverArtFileInput[]
    deleteMany?: StoryScalarWhereInput | StoryScalarWhereInput[]
  }

  export type BookUpdateManyWithoutCoverArtFileNestedInput = {
    create?: XOR<BookCreateWithoutCoverArtFileInput, BookUncheckedCreateWithoutCoverArtFileInput> | BookCreateWithoutCoverArtFileInput[] | BookUncheckedCreateWithoutCoverArtFileInput[]
    connectOrCreate?: BookCreateOrConnectWithoutCoverArtFileInput | BookCreateOrConnectWithoutCoverArtFileInput[]
    upsert?: BookUpsertWithWhereUniqueWithoutCoverArtFileInput | BookUpsertWithWhereUniqueWithoutCoverArtFileInput[]
    createMany?: BookCreateManyCoverArtFileInputEnvelope
    set?: BookWhereUniqueInput | BookWhereUniqueInput[]
    disconnect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    delete?: BookWhereUniqueInput | BookWhereUniqueInput[]
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    update?: BookUpdateWithWhereUniqueWithoutCoverArtFileInput | BookUpdateWithWhereUniqueWithoutCoverArtFileInput[]
    updateMany?: BookUpdateManyWithWhereWithoutCoverArtFileInput | BookUpdateManyWithWhereWithoutCoverArtFileInput[]
    deleteMany?: BookScalarWhereInput | BookScalarWhereInput[]
  }

  export type BookUpdateManyWithoutSpineArtFileNestedInput = {
    create?: XOR<BookCreateWithoutSpineArtFileInput, BookUncheckedCreateWithoutSpineArtFileInput> | BookCreateWithoutSpineArtFileInput[] | BookUncheckedCreateWithoutSpineArtFileInput[]
    connectOrCreate?: BookCreateOrConnectWithoutSpineArtFileInput | BookCreateOrConnectWithoutSpineArtFileInput[]
    upsert?: BookUpsertWithWhereUniqueWithoutSpineArtFileInput | BookUpsertWithWhereUniqueWithoutSpineArtFileInput[]
    createMany?: BookCreateManySpineArtFileInputEnvelope
    set?: BookWhereUniqueInput | BookWhereUniqueInput[]
    disconnect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    delete?: BookWhereUniqueInput | BookWhereUniqueInput[]
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    update?: BookUpdateWithWhereUniqueWithoutSpineArtFileInput | BookUpdateWithWhereUniqueWithoutSpineArtFileInput[]
    updateMany?: BookUpdateManyWithWhereWithoutSpineArtFileInput | BookUpdateManyWithWhereWithoutSpineArtFileInput[]
    deleteMany?: BookScalarWhereInput | BookScalarWhereInput[]
  }

  export type CharacterUpdateManyWithoutPictureFileNestedInput = {
    create?: XOR<CharacterCreateWithoutPictureFileInput, CharacterUncheckedCreateWithoutPictureFileInput> | CharacterCreateWithoutPictureFileInput[] | CharacterUncheckedCreateWithoutPictureFileInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutPictureFileInput | CharacterCreateOrConnectWithoutPictureFileInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutPictureFileInput | CharacterUpsertWithWhereUniqueWithoutPictureFileInput[]
    createMany?: CharacterCreateManyPictureFileInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutPictureFileInput | CharacterUpdateWithWhereUniqueWithoutPictureFileInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutPictureFileInput | CharacterUpdateManyWithWhereWithoutPictureFileInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type LocationUpdateManyWithoutPictureFileNestedInput = {
    create?: XOR<LocationCreateWithoutPictureFileInput, LocationUncheckedCreateWithoutPictureFileInput> | LocationCreateWithoutPictureFileInput[] | LocationUncheckedCreateWithoutPictureFileInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutPictureFileInput | LocationCreateOrConnectWithoutPictureFileInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutPictureFileInput | LocationUpsertWithWhereUniqueWithoutPictureFileInput[]
    createMany?: LocationCreateManyPictureFileInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutPictureFileInput | LocationUpdateWithWhereUniqueWithoutPictureFileInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutPictureFileInput | LocationUpdateManyWithWhereWithoutPictureFileInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type StoryUncheckedUpdateManyWithoutCoverArtFileNestedInput = {
    create?: XOR<StoryCreateWithoutCoverArtFileInput, StoryUncheckedCreateWithoutCoverArtFileInput> | StoryCreateWithoutCoverArtFileInput[] | StoryUncheckedCreateWithoutCoverArtFileInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutCoverArtFileInput | StoryCreateOrConnectWithoutCoverArtFileInput[]
    upsert?: StoryUpsertWithWhereUniqueWithoutCoverArtFileInput | StoryUpsertWithWhereUniqueWithoutCoverArtFileInput[]
    createMany?: StoryCreateManyCoverArtFileInputEnvelope
    set?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    disconnect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    delete?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    update?: StoryUpdateWithWhereUniqueWithoutCoverArtFileInput | StoryUpdateWithWhereUniqueWithoutCoverArtFileInput[]
    updateMany?: StoryUpdateManyWithWhereWithoutCoverArtFileInput | StoryUpdateManyWithWhereWithoutCoverArtFileInput[]
    deleteMany?: StoryScalarWhereInput | StoryScalarWhereInput[]
  }

  export type BookUncheckedUpdateManyWithoutCoverArtFileNestedInput = {
    create?: XOR<BookCreateWithoutCoverArtFileInput, BookUncheckedCreateWithoutCoverArtFileInput> | BookCreateWithoutCoverArtFileInput[] | BookUncheckedCreateWithoutCoverArtFileInput[]
    connectOrCreate?: BookCreateOrConnectWithoutCoverArtFileInput | BookCreateOrConnectWithoutCoverArtFileInput[]
    upsert?: BookUpsertWithWhereUniqueWithoutCoverArtFileInput | BookUpsertWithWhereUniqueWithoutCoverArtFileInput[]
    createMany?: BookCreateManyCoverArtFileInputEnvelope
    set?: BookWhereUniqueInput | BookWhereUniqueInput[]
    disconnect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    delete?: BookWhereUniqueInput | BookWhereUniqueInput[]
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    update?: BookUpdateWithWhereUniqueWithoutCoverArtFileInput | BookUpdateWithWhereUniqueWithoutCoverArtFileInput[]
    updateMany?: BookUpdateManyWithWhereWithoutCoverArtFileInput | BookUpdateManyWithWhereWithoutCoverArtFileInput[]
    deleteMany?: BookScalarWhereInput | BookScalarWhereInput[]
  }

  export type BookUncheckedUpdateManyWithoutSpineArtFileNestedInput = {
    create?: XOR<BookCreateWithoutSpineArtFileInput, BookUncheckedCreateWithoutSpineArtFileInput> | BookCreateWithoutSpineArtFileInput[] | BookUncheckedCreateWithoutSpineArtFileInput[]
    connectOrCreate?: BookCreateOrConnectWithoutSpineArtFileInput | BookCreateOrConnectWithoutSpineArtFileInput[]
    upsert?: BookUpsertWithWhereUniqueWithoutSpineArtFileInput | BookUpsertWithWhereUniqueWithoutSpineArtFileInput[]
    createMany?: BookCreateManySpineArtFileInputEnvelope
    set?: BookWhereUniqueInput | BookWhereUniqueInput[]
    disconnect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    delete?: BookWhereUniqueInput | BookWhereUniqueInput[]
    connect?: BookWhereUniqueInput | BookWhereUniqueInput[]
    update?: BookUpdateWithWhereUniqueWithoutSpineArtFileInput | BookUpdateWithWhereUniqueWithoutSpineArtFileInput[]
    updateMany?: BookUpdateManyWithWhereWithoutSpineArtFileInput | BookUpdateManyWithWhereWithoutSpineArtFileInput[]
    deleteMany?: BookScalarWhereInput | BookScalarWhereInput[]
  }

  export type CharacterUncheckedUpdateManyWithoutPictureFileNestedInput = {
    create?: XOR<CharacterCreateWithoutPictureFileInput, CharacterUncheckedCreateWithoutPictureFileInput> | CharacterCreateWithoutPictureFileInput[] | CharacterUncheckedCreateWithoutPictureFileInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutPictureFileInput | CharacterCreateOrConnectWithoutPictureFileInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutPictureFileInput | CharacterUpsertWithWhereUniqueWithoutPictureFileInput[]
    createMany?: CharacterCreateManyPictureFileInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutPictureFileInput | CharacterUpdateWithWhereUniqueWithoutPictureFileInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutPictureFileInput | CharacterUpdateManyWithWhereWithoutPictureFileInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type LocationUncheckedUpdateManyWithoutPictureFileNestedInput = {
    create?: XOR<LocationCreateWithoutPictureFileInput, LocationUncheckedCreateWithoutPictureFileInput> | LocationCreateWithoutPictureFileInput[] | LocationUncheckedCreateWithoutPictureFileInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutPictureFileInput | LocationCreateOrConnectWithoutPictureFileInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutPictureFileInput | LocationUpsertWithWhereUniqueWithoutPictureFileInput[]
    createMany?: LocationCreateManyPictureFileInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutPictureFileInput | LocationUpdateWithWhereUniqueWithoutPictureFileInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutPictureFileInput | LocationUpdateManyWithWhereWithoutPictureFileInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type ChapterCreateNestedOneWithoutPublishingStatusInput = {
    create?: XOR<ChapterCreateWithoutPublishingStatusInput, ChapterUncheckedCreateWithoutPublishingStatusInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutPublishingStatusInput
    connect?: ChapterWhereUniqueInput
  }

  export type EnumPublishingPlatformFieldUpdateOperationsInput = {
    set?: $Enums.PublishingPlatform
  }

  export type EnumPublishingStatusFieldUpdateOperationsInput = {
    set?: $Enums.PublishingStatus
  }

  export type ChapterUpdateOneRequiredWithoutPublishingStatusNestedInput = {
    create?: XOR<ChapterCreateWithoutPublishingStatusInput, ChapterUncheckedCreateWithoutPublishingStatusInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutPublishingStatusInput
    upsert?: ChapterUpsertWithoutPublishingStatusInput
    connect?: ChapterWhereUniqueInput
    update?: XOR<XOR<ChapterUpdateToOneWithWhereWithoutPublishingStatusInput, ChapterUpdateWithoutPublishingStatusInput>, ChapterUncheckedUpdateWithoutPublishingStatusInput>
  }

  export type StoryCreateNestedOneWithoutCharactersInput = {
    create?: XOR<StoryCreateWithoutCharactersInput, StoryUncheckedCreateWithoutCharactersInput>
    connectOrCreate?: StoryCreateOrConnectWithoutCharactersInput
    connect?: StoryWhereUniqueInput
  }

  export type FileCreateNestedOneWithoutCharacterPictureInput = {
    create?: XOR<FileCreateWithoutCharacterPictureInput, FileUncheckedCreateWithoutCharacterPictureInput>
    connectOrCreate?: FileCreateOrConnectWithoutCharacterPictureInput
    connect?: FileWhereUniqueInput
  }

  export type CharacterCreateNestedOneWithoutPreviousVersionInput = {
    create?: XOR<CharacterCreateWithoutPreviousVersionInput, CharacterUncheckedCreateWithoutPreviousVersionInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutPreviousVersionInput
    connect?: CharacterWhereUniqueInput
  }

  export type CharacterCreateNestedManyWithoutLaterVersionOfInput = {
    create?: XOR<CharacterCreateWithoutLaterVersionOfInput, CharacterUncheckedCreateWithoutLaterVersionOfInput> | CharacterCreateWithoutLaterVersionOfInput[] | CharacterUncheckedCreateWithoutLaterVersionOfInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutLaterVersionOfInput | CharacterCreateOrConnectWithoutLaterVersionOfInput[]
    createMany?: CharacterCreateManyLaterVersionOfInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type StoryCreateNestedManyWithoutDefaultProtagonistInput = {
    create?: XOR<StoryCreateWithoutDefaultProtagonistInput, StoryUncheckedCreateWithoutDefaultProtagonistInput> | StoryCreateWithoutDefaultProtagonistInput[] | StoryUncheckedCreateWithoutDefaultProtagonistInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutDefaultProtagonistInput | StoryCreateOrConnectWithoutDefaultProtagonistInput[]
    createMany?: StoryCreateManyDefaultProtagonistInputEnvelope
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
  }

  export type SceneCreateNestedManyWithoutProtagonistInput = {
    create?: XOR<SceneCreateWithoutProtagonistInput, SceneUncheckedCreateWithoutProtagonistInput> | SceneCreateWithoutProtagonistInput[] | SceneUncheckedCreateWithoutProtagonistInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutProtagonistInput | SceneCreateOrConnectWithoutProtagonistInput[]
    createMany?: SceneCreateManyProtagonistInputEnvelope
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
  }

  export type SceneCharacterCreateNestedManyWithoutCharacterInput = {
    create?: XOR<SceneCharacterCreateWithoutCharacterInput, SceneCharacterUncheckedCreateWithoutCharacterInput> | SceneCharacterCreateWithoutCharacterInput[] | SceneCharacterUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: SceneCharacterCreateOrConnectWithoutCharacterInput | SceneCharacterCreateOrConnectWithoutCharacterInput[]
    createMany?: SceneCharacterCreateManyCharacterInputEnvelope
    connect?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
  }

  export type SceneReferredCharacterCreateNestedManyWithoutCharacterInput = {
    create?: XOR<SceneReferredCharacterCreateWithoutCharacterInput, SceneReferredCharacterUncheckedCreateWithoutCharacterInput> | SceneReferredCharacterCreateWithoutCharacterInput[] | SceneReferredCharacterUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: SceneReferredCharacterCreateOrConnectWithoutCharacterInput | SceneReferredCharacterCreateOrConnectWithoutCharacterInput[]
    createMany?: SceneReferredCharacterCreateManyCharacterInputEnvelope
    connect?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
  }

  export type CharacterUncheckedCreateNestedManyWithoutLaterVersionOfInput = {
    create?: XOR<CharacterCreateWithoutLaterVersionOfInput, CharacterUncheckedCreateWithoutLaterVersionOfInput> | CharacterCreateWithoutLaterVersionOfInput[] | CharacterUncheckedCreateWithoutLaterVersionOfInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutLaterVersionOfInput | CharacterCreateOrConnectWithoutLaterVersionOfInput[]
    createMany?: CharacterCreateManyLaterVersionOfInputEnvelope
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
  }

  export type StoryUncheckedCreateNestedManyWithoutDefaultProtagonistInput = {
    create?: XOR<StoryCreateWithoutDefaultProtagonistInput, StoryUncheckedCreateWithoutDefaultProtagonistInput> | StoryCreateWithoutDefaultProtagonistInput[] | StoryUncheckedCreateWithoutDefaultProtagonistInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutDefaultProtagonistInput | StoryCreateOrConnectWithoutDefaultProtagonistInput[]
    createMany?: StoryCreateManyDefaultProtagonistInputEnvelope
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
  }

  export type SceneUncheckedCreateNestedManyWithoutProtagonistInput = {
    create?: XOR<SceneCreateWithoutProtagonistInput, SceneUncheckedCreateWithoutProtagonistInput> | SceneCreateWithoutProtagonistInput[] | SceneUncheckedCreateWithoutProtagonistInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutProtagonistInput | SceneCreateOrConnectWithoutProtagonistInput[]
    createMany?: SceneCreateManyProtagonistInputEnvelope
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
  }

  export type SceneCharacterUncheckedCreateNestedManyWithoutCharacterInput = {
    create?: XOR<SceneCharacterCreateWithoutCharacterInput, SceneCharacterUncheckedCreateWithoutCharacterInput> | SceneCharacterCreateWithoutCharacterInput[] | SceneCharacterUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: SceneCharacterCreateOrConnectWithoutCharacterInput | SceneCharacterCreateOrConnectWithoutCharacterInput[]
    createMany?: SceneCharacterCreateManyCharacterInputEnvelope
    connect?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
  }

  export type SceneReferredCharacterUncheckedCreateNestedManyWithoutCharacterInput = {
    create?: XOR<SceneReferredCharacterCreateWithoutCharacterInput, SceneReferredCharacterUncheckedCreateWithoutCharacterInput> | SceneReferredCharacterCreateWithoutCharacterInput[] | SceneReferredCharacterUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: SceneReferredCharacterCreateOrConnectWithoutCharacterInput | SceneReferredCharacterCreateOrConnectWithoutCharacterInput[]
    createMany?: SceneReferredCharacterCreateManyCharacterInputEnvelope
    connect?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
  }

  export type StoryUpdateOneRequiredWithoutCharactersNestedInput = {
    create?: XOR<StoryCreateWithoutCharactersInput, StoryUncheckedCreateWithoutCharactersInput>
    connectOrCreate?: StoryCreateOrConnectWithoutCharactersInput
    upsert?: StoryUpsertWithoutCharactersInput
    connect?: StoryWhereUniqueInput
    update?: XOR<XOR<StoryUpdateToOneWithWhereWithoutCharactersInput, StoryUpdateWithoutCharactersInput>, StoryUncheckedUpdateWithoutCharactersInput>
  }

  export type FileUpdateOneWithoutCharacterPictureNestedInput = {
    create?: XOR<FileCreateWithoutCharacterPictureInput, FileUncheckedCreateWithoutCharacterPictureInput>
    connectOrCreate?: FileCreateOrConnectWithoutCharacterPictureInput
    upsert?: FileUpsertWithoutCharacterPictureInput
    disconnect?: FileWhereInput | boolean
    delete?: FileWhereInput | boolean
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutCharacterPictureInput, FileUpdateWithoutCharacterPictureInput>, FileUncheckedUpdateWithoutCharacterPictureInput>
  }

  export type CharacterUpdateOneWithoutPreviousVersionNestedInput = {
    create?: XOR<CharacterCreateWithoutPreviousVersionInput, CharacterUncheckedCreateWithoutPreviousVersionInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutPreviousVersionInput
    upsert?: CharacterUpsertWithoutPreviousVersionInput
    disconnect?: CharacterWhereInput | boolean
    delete?: CharacterWhereInput | boolean
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutPreviousVersionInput, CharacterUpdateWithoutPreviousVersionInput>, CharacterUncheckedUpdateWithoutPreviousVersionInput>
  }

  export type CharacterUpdateManyWithoutLaterVersionOfNestedInput = {
    create?: XOR<CharacterCreateWithoutLaterVersionOfInput, CharacterUncheckedCreateWithoutLaterVersionOfInput> | CharacterCreateWithoutLaterVersionOfInput[] | CharacterUncheckedCreateWithoutLaterVersionOfInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutLaterVersionOfInput | CharacterCreateOrConnectWithoutLaterVersionOfInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutLaterVersionOfInput | CharacterUpsertWithWhereUniqueWithoutLaterVersionOfInput[]
    createMany?: CharacterCreateManyLaterVersionOfInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutLaterVersionOfInput | CharacterUpdateWithWhereUniqueWithoutLaterVersionOfInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutLaterVersionOfInput | CharacterUpdateManyWithWhereWithoutLaterVersionOfInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type StoryUpdateManyWithoutDefaultProtagonistNestedInput = {
    create?: XOR<StoryCreateWithoutDefaultProtagonistInput, StoryUncheckedCreateWithoutDefaultProtagonistInput> | StoryCreateWithoutDefaultProtagonistInput[] | StoryUncheckedCreateWithoutDefaultProtagonistInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutDefaultProtagonistInput | StoryCreateOrConnectWithoutDefaultProtagonistInput[]
    upsert?: StoryUpsertWithWhereUniqueWithoutDefaultProtagonistInput | StoryUpsertWithWhereUniqueWithoutDefaultProtagonistInput[]
    createMany?: StoryCreateManyDefaultProtagonistInputEnvelope
    set?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    disconnect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    delete?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    update?: StoryUpdateWithWhereUniqueWithoutDefaultProtagonistInput | StoryUpdateWithWhereUniqueWithoutDefaultProtagonistInput[]
    updateMany?: StoryUpdateManyWithWhereWithoutDefaultProtagonistInput | StoryUpdateManyWithWhereWithoutDefaultProtagonistInput[]
    deleteMany?: StoryScalarWhereInput | StoryScalarWhereInput[]
  }

  export type SceneUpdateManyWithoutProtagonistNestedInput = {
    create?: XOR<SceneCreateWithoutProtagonistInput, SceneUncheckedCreateWithoutProtagonistInput> | SceneCreateWithoutProtagonistInput[] | SceneUncheckedCreateWithoutProtagonistInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutProtagonistInput | SceneCreateOrConnectWithoutProtagonistInput[]
    upsert?: SceneUpsertWithWhereUniqueWithoutProtagonistInput | SceneUpsertWithWhereUniqueWithoutProtagonistInput[]
    createMany?: SceneCreateManyProtagonistInputEnvelope
    set?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    disconnect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    delete?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    update?: SceneUpdateWithWhereUniqueWithoutProtagonistInput | SceneUpdateWithWhereUniqueWithoutProtagonistInput[]
    updateMany?: SceneUpdateManyWithWhereWithoutProtagonistInput | SceneUpdateManyWithWhereWithoutProtagonistInput[]
    deleteMany?: SceneScalarWhereInput | SceneScalarWhereInput[]
  }

  export type SceneCharacterUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<SceneCharacterCreateWithoutCharacterInput, SceneCharacterUncheckedCreateWithoutCharacterInput> | SceneCharacterCreateWithoutCharacterInput[] | SceneCharacterUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: SceneCharacterCreateOrConnectWithoutCharacterInput | SceneCharacterCreateOrConnectWithoutCharacterInput[]
    upsert?: SceneCharacterUpsertWithWhereUniqueWithoutCharacterInput | SceneCharacterUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: SceneCharacterCreateManyCharacterInputEnvelope
    set?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    disconnect?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    delete?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    connect?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    update?: SceneCharacterUpdateWithWhereUniqueWithoutCharacterInput | SceneCharacterUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: SceneCharacterUpdateManyWithWhereWithoutCharacterInput | SceneCharacterUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: SceneCharacterScalarWhereInput | SceneCharacterScalarWhereInput[]
  }

  export type SceneReferredCharacterUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<SceneReferredCharacterCreateWithoutCharacterInput, SceneReferredCharacterUncheckedCreateWithoutCharacterInput> | SceneReferredCharacterCreateWithoutCharacterInput[] | SceneReferredCharacterUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: SceneReferredCharacterCreateOrConnectWithoutCharacterInput | SceneReferredCharacterCreateOrConnectWithoutCharacterInput[]
    upsert?: SceneReferredCharacterUpsertWithWhereUniqueWithoutCharacterInput | SceneReferredCharacterUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: SceneReferredCharacterCreateManyCharacterInputEnvelope
    set?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    disconnect?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    delete?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    connect?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    update?: SceneReferredCharacterUpdateWithWhereUniqueWithoutCharacterInput | SceneReferredCharacterUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: SceneReferredCharacterUpdateManyWithWhereWithoutCharacterInput | SceneReferredCharacterUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: SceneReferredCharacterScalarWhereInput | SceneReferredCharacterScalarWhereInput[]
  }

  export type CharacterUncheckedUpdateManyWithoutLaterVersionOfNestedInput = {
    create?: XOR<CharacterCreateWithoutLaterVersionOfInput, CharacterUncheckedCreateWithoutLaterVersionOfInput> | CharacterCreateWithoutLaterVersionOfInput[] | CharacterUncheckedCreateWithoutLaterVersionOfInput[]
    connectOrCreate?: CharacterCreateOrConnectWithoutLaterVersionOfInput | CharacterCreateOrConnectWithoutLaterVersionOfInput[]
    upsert?: CharacterUpsertWithWhereUniqueWithoutLaterVersionOfInput | CharacterUpsertWithWhereUniqueWithoutLaterVersionOfInput[]
    createMany?: CharacterCreateManyLaterVersionOfInputEnvelope
    set?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    disconnect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    delete?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    connect?: CharacterWhereUniqueInput | CharacterWhereUniqueInput[]
    update?: CharacterUpdateWithWhereUniqueWithoutLaterVersionOfInput | CharacterUpdateWithWhereUniqueWithoutLaterVersionOfInput[]
    updateMany?: CharacterUpdateManyWithWhereWithoutLaterVersionOfInput | CharacterUpdateManyWithWhereWithoutLaterVersionOfInput[]
    deleteMany?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
  }

  export type StoryUncheckedUpdateManyWithoutDefaultProtagonistNestedInput = {
    create?: XOR<StoryCreateWithoutDefaultProtagonistInput, StoryUncheckedCreateWithoutDefaultProtagonistInput> | StoryCreateWithoutDefaultProtagonistInput[] | StoryUncheckedCreateWithoutDefaultProtagonistInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutDefaultProtagonistInput | StoryCreateOrConnectWithoutDefaultProtagonistInput[]
    upsert?: StoryUpsertWithWhereUniqueWithoutDefaultProtagonistInput | StoryUpsertWithWhereUniqueWithoutDefaultProtagonistInput[]
    createMany?: StoryCreateManyDefaultProtagonistInputEnvelope
    set?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    disconnect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    delete?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    update?: StoryUpdateWithWhereUniqueWithoutDefaultProtagonistInput | StoryUpdateWithWhereUniqueWithoutDefaultProtagonistInput[]
    updateMany?: StoryUpdateManyWithWhereWithoutDefaultProtagonistInput | StoryUpdateManyWithWhereWithoutDefaultProtagonistInput[]
    deleteMany?: StoryScalarWhereInput | StoryScalarWhereInput[]
  }

  export type SceneUncheckedUpdateManyWithoutProtagonistNestedInput = {
    create?: XOR<SceneCreateWithoutProtagonistInput, SceneUncheckedCreateWithoutProtagonistInput> | SceneCreateWithoutProtagonistInput[] | SceneUncheckedCreateWithoutProtagonistInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutProtagonistInput | SceneCreateOrConnectWithoutProtagonistInput[]
    upsert?: SceneUpsertWithWhereUniqueWithoutProtagonistInput | SceneUpsertWithWhereUniqueWithoutProtagonistInput[]
    createMany?: SceneCreateManyProtagonistInputEnvelope
    set?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    disconnect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    delete?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    update?: SceneUpdateWithWhereUniqueWithoutProtagonistInput | SceneUpdateWithWhereUniqueWithoutProtagonistInput[]
    updateMany?: SceneUpdateManyWithWhereWithoutProtagonistInput | SceneUpdateManyWithWhereWithoutProtagonistInput[]
    deleteMany?: SceneScalarWhereInput | SceneScalarWhereInput[]
  }

  export type SceneCharacterUncheckedUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<SceneCharacterCreateWithoutCharacterInput, SceneCharacterUncheckedCreateWithoutCharacterInput> | SceneCharacterCreateWithoutCharacterInput[] | SceneCharacterUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: SceneCharacterCreateOrConnectWithoutCharacterInput | SceneCharacterCreateOrConnectWithoutCharacterInput[]
    upsert?: SceneCharacterUpsertWithWhereUniqueWithoutCharacterInput | SceneCharacterUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: SceneCharacterCreateManyCharacterInputEnvelope
    set?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    disconnect?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    delete?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    connect?: SceneCharacterWhereUniqueInput | SceneCharacterWhereUniqueInput[]
    update?: SceneCharacterUpdateWithWhereUniqueWithoutCharacterInput | SceneCharacterUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: SceneCharacterUpdateManyWithWhereWithoutCharacterInput | SceneCharacterUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: SceneCharacterScalarWhereInput | SceneCharacterScalarWhereInput[]
  }

  export type SceneReferredCharacterUncheckedUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<SceneReferredCharacterCreateWithoutCharacterInput, SceneReferredCharacterUncheckedCreateWithoutCharacterInput> | SceneReferredCharacterCreateWithoutCharacterInput[] | SceneReferredCharacterUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: SceneReferredCharacterCreateOrConnectWithoutCharacterInput | SceneReferredCharacterCreateOrConnectWithoutCharacterInput[]
    upsert?: SceneReferredCharacterUpsertWithWhereUniqueWithoutCharacterInput | SceneReferredCharacterUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: SceneReferredCharacterCreateManyCharacterInputEnvelope
    set?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    disconnect?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    delete?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    connect?: SceneReferredCharacterWhereUniqueInput | SceneReferredCharacterWhereUniqueInput[]
    update?: SceneReferredCharacterUpdateWithWhereUniqueWithoutCharacterInput | SceneReferredCharacterUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: SceneReferredCharacterUpdateManyWithWhereWithoutCharacterInput | SceneReferredCharacterUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: SceneReferredCharacterScalarWhereInput | SceneReferredCharacterScalarWhereInput[]
  }

  export type StoryCreateNestedOneWithoutLocationsInput = {
    create?: XOR<StoryCreateWithoutLocationsInput, StoryUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: StoryCreateOrConnectWithoutLocationsInput
    connect?: StoryWhereUniqueInput
  }

  export type FileCreateNestedOneWithoutLocationPictureInput = {
    create?: XOR<FileCreateWithoutLocationPictureInput, FileUncheckedCreateWithoutLocationPictureInput>
    connectOrCreate?: FileCreateOrConnectWithoutLocationPictureInput
    connect?: FileWhereUniqueInput
  }

  export type SceneCreateNestedManyWithoutLocationInput = {
    create?: XOR<SceneCreateWithoutLocationInput, SceneUncheckedCreateWithoutLocationInput> | SceneCreateWithoutLocationInput[] | SceneUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutLocationInput | SceneCreateOrConnectWithoutLocationInput[]
    createMany?: SceneCreateManyLocationInputEnvelope
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
  }

  export type SceneUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<SceneCreateWithoutLocationInput, SceneUncheckedCreateWithoutLocationInput> | SceneCreateWithoutLocationInput[] | SceneUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutLocationInput | SceneCreateOrConnectWithoutLocationInput[]
    createMany?: SceneCreateManyLocationInputEnvelope
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
  }

  export type StoryUpdateOneRequiredWithoutLocationsNestedInput = {
    create?: XOR<StoryCreateWithoutLocationsInput, StoryUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: StoryCreateOrConnectWithoutLocationsInput
    upsert?: StoryUpsertWithoutLocationsInput
    connect?: StoryWhereUniqueInput
    update?: XOR<XOR<StoryUpdateToOneWithWhereWithoutLocationsInput, StoryUpdateWithoutLocationsInput>, StoryUncheckedUpdateWithoutLocationsInput>
  }

  export type FileUpdateOneWithoutLocationPictureNestedInput = {
    create?: XOR<FileCreateWithoutLocationPictureInput, FileUncheckedCreateWithoutLocationPictureInput>
    connectOrCreate?: FileCreateOrConnectWithoutLocationPictureInput
    upsert?: FileUpsertWithoutLocationPictureInput
    disconnect?: FileWhereInput | boolean
    delete?: FileWhereInput | boolean
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutLocationPictureInput, FileUpdateWithoutLocationPictureInput>, FileUncheckedUpdateWithoutLocationPictureInput>
  }

  export type SceneUpdateManyWithoutLocationNestedInput = {
    create?: XOR<SceneCreateWithoutLocationInput, SceneUncheckedCreateWithoutLocationInput> | SceneCreateWithoutLocationInput[] | SceneUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutLocationInput | SceneCreateOrConnectWithoutLocationInput[]
    upsert?: SceneUpsertWithWhereUniqueWithoutLocationInput | SceneUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: SceneCreateManyLocationInputEnvelope
    set?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    disconnect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    delete?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    update?: SceneUpdateWithWhereUniqueWithoutLocationInput | SceneUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: SceneUpdateManyWithWhereWithoutLocationInput | SceneUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: SceneScalarWhereInput | SceneScalarWhereInput[]
  }

  export type SceneUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<SceneCreateWithoutLocationInput, SceneUncheckedCreateWithoutLocationInput> | SceneCreateWithoutLocationInput[] | SceneUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: SceneCreateOrConnectWithoutLocationInput | SceneCreateOrConnectWithoutLocationInput[]
    upsert?: SceneUpsertWithWhereUniqueWithoutLocationInput | SceneUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: SceneCreateManyLocationInputEnvelope
    set?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    disconnect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    delete?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    connect?: SceneWhereUniqueInput | SceneWhereUniqueInput[]
    update?: SceneUpdateWithWhereUniqueWithoutLocationInput | SceneUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: SceneUpdateManyWithWhereWithoutLocationInput | SceneUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: SceneScalarWhereInput | SceneScalarWhereInput[]
  }

  export type StoryCreateNestedOneWithoutPlotPointsInput = {
    create?: XOR<StoryCreateWithoutPlotPointsInput, StoryUncheckedCreateWithoutPlotPointsInput>
    connectOrCreate?: StoryCreateOrConnectWithoutPlotPointsInput
    connect?: StoryWhereUniqueInput
  }

  export type EnumPlotPointStateFieldUpdateOperationsInput = {
    set?: $Enums.PlotPointState
  }

  export type StoryUpdateOneRequiredWithoutPlotPointsNestedInput = {
    create?: XOR<StoryCreateWithoutPlotPointsInput, StoryUncheckedCreateWithoutPlotPointsInput>
    connectOrCreate?: StoryCreateOrConnectWithoutPlotPointsInput
    upsert?: StoryUpsertWithoutPlotPointsInput
    connect?: StoryWhereUniqueInput
    update?: XOR<XOR<StoryUpdateToOneWithWhereWithoutPlotPointsInput, StoryUpdateWithoutPlotPointsInput>, StoryUncheckedUpdateWithoutPlotPointsInput>
  }

  export type StoryCreateNestedOneWithoutItemsInput = {
    create?: XOR<StoryCreateWithoutItemsInput, StoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: StoryCreateOrConnectWithoutItemsInput
    connect?: StoryWhereUniqueInput
  }

  export type StoryUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<StoryCreateWithoutItemsInput, StoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: StoryCreateOrConnectWithoutItemsInput
    upsert?: StoryUpsertWithoutItemsInput
    connect?: StoryWhereUniqueInput
    update?: XOR<XOR<StoryUpdateToOneWithWhereWithoutItemsInput, StoryUpdateWithoutItemsInput>, StoryUncheckedUpdateWithoutItemsInput>
  }

  export type SceneCreateNestedOneWithoutParticipatingCharactersInput = {
    create?: XOR<SceneCreateWithoutParticipatingCharactersInput, SceneUncheckedCreateWithoutParticipatingCharactersInput>
    connectOrCreate?: SceneCreateOrConnectWithoutParticipatingCharactersInput
    connect?: SceneWhereUniqueInput
  }

  export type CharacterCreateNestedOneWithoutParticipatingInScenesInput = {
    create?: XOR<CharacterCreateWithoutParticipatingInScenesInput, CharacterUncheckedCreateWithoutParticipatingInScenesInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutParticipatingInScenesInput
    connect?: CharacterWhereUniqueInput
  }

  export type SceneUpdateOneRequiredWithoutParticipatingCharactersNestedInput = {
    create?: XOR<SceneCreateWithoutParticipatingCharactersInput, SceneUncheckedCreateWithoutParticipatingCharactersInput>
    connectOrCreate?: SceneCreateOrConnectWithoutParticipatingCharactersInput
    upsert?: SceneUpsertWithoutParticipatingCharactersInput
    connect?: SceneWhereUniqueInput
    update?: XOR<XOR<SceneUpdateToOneWithWhereWithoutParticipatingCharactersInput, SceneUpdateWithoutParticipatingCharactersInput>, SceneUncheckedUpdateWithoutParticipatingCharactersInput>
  }

  export type CharacterUpdateOneRequiredWithoutParticipatingInScenesNestedInput = {
    create?: XOR<CharacterCreateWithoutParticipatingInScenesInput, CharacterUncheckedCreateWithoutParticipatingInScenesInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutParticipatingInScenesInput
    upsert?: CharacterUpsertWithoutParticipatingInScenesInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutParticipatingInScenesInput, CharacterUpdateWithoutParticipatingInScenesInput>, CharacterUncheckedUpdateWithoutParticipatingInScenesInput>
  }

  export type SceneCreateNestedOneWithoutReferredCharactersInput = {
    create?: XOR<SceneCreateWithoutReferredCharactersInput, SceneUncheckedCreateWithoutReferredCharactersInput>
    connectOrCreate?: SceneCreateOrConnectWithoutReferredCharactersInput
    connect?: SceneWhereUniqueInput
  }

  export type CharacterCreateNestedOneWithoutReferredInScenesInput = {
    create?: XOR<CharacterCreateWithoutReferredInScenesInput, CharacterUncheckedCreateWithoutReferredInScenesInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutReferredInScenesInput
    connect?: CharacterWhereUniqueInput
  }

  export type SceneUpdateOneRequiredWithoutReferredCharactersNestedInput = {
    create?: XOR<SceneCreateWithoutReferredCharactersInput, SceneUncheckedCreateWithoutReferredCharactersInput>
    connectOrCreate?: SceneCreateOrConnectWithoutReferredCharactersInput
    upsert?: SceneUpsertWithoutReferredCharactersInput
    connect?: SceneWhereUniqueInput
    update?: XOR<XOR<SceneUpdateToOneWithWhereWithoutReferredCharactersInput, SceneUpdateWithoutReferredCharactersInput>, SceneUncheckedUpdateWithoutReferredCharactersInput>
  }

  export type CharacterUpdateOneRequiredWithoutReferredInScenesNestedInput = {
    create?: XOR<CharacterCreateWithoutReferredInScenesInput, CharacterUncheckedCreateWithoutReferredInScenesInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutReferredInScenesInput
    upsert?: CharacterUpsertWithoutReferredInScenesInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutReferredInScenesInput, CharacterUpdateWithoutReferredInScenesInput>, CharacterUncheckedUpdateWithoutReferredInScenesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumSavedTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SavedType | EnumSavedTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SavedType[]
    notIn?: $Enums.SavedType[]
    not?: NestedEnumSavedTypeFilter<$PrismaModel> | $Enums.SavedType
  }

  export type NestedEnumSavedTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SavedType | EnumSavedTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SavedType[]
    notIn?: $Enums.SavedType[]
    not?: NestedEnumSavedTypeWithAggregatesFilter<$PrismaModel> | $Enums.SavedType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSavedTypeFilter<$PrismaModel>
    _max?: NestedEnumSavedTypeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumStoryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StoryStatus | EnumStoryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StoryStatus[]
    notIn?: $Enums.StoryStatus[]
    not?: NestedEnumStoryStatusFilter<$PrismaModel> | $Enums.StoryStatus
  }

  export type NestedEnumStoryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StoryType | EnumStoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StoryType[]
    notIn?: $Enums.StoryType[]
    not?: NestedEnumStoryTypeFilter<$PrismaModel> | $Enums.StoryType
  }

  export type NestedEnumPerspectiveNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Perspective | EnumPerspectiveFieldRefInput<$PrismaModel> | null
    in?: $Enums.Perspective[] | null
    notIn?: $Enums.Perspective[] | null
    not?: NestedEnumPerspectiveNullableFilter<$PrismaModel> | $Enums.Perspective | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumStoryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StoryStatus | EnumStoryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StoryStatus[]
    notIn?: $Enums.StoryStatus[]
    not?: NestedEnumStoryStatusWithAggregatesFilter<$PrismaModel> | $Enums.StoryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStoryStatusFilter<$PrismaModel>
    _max?: NestedEnumStoryStatusFilter<$PrismaModel>
  }

  export type NestedEnumStoryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StoryType | EnumStoryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StoryType[]
    notIn?: $Enums.StoryType[]
    not?: NestedEnumStoryTypeWithAggregatesFilter<$PrismaModel> | $Enums.StoryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStoryTypeFilter<$PrismaModel>
    _max?: NestedEnumStoryTypeFilter<$PrismaModel>
  }

  export type NestedEnumPerspectiveNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Perspective | EnumPerspectiveFieldRefInput<$PrismaModel> | null
    in?: $Enums.Perspective[] | null
    notIn?: $Enums.Perspective[] | null
    not?: NestedEnumPerspectiveNullableWithAggregatesFilter<$PrismaModel> | $Enums.Perspective | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPerspectiveNullableFilter<$PrismaModel>
    _max?: NestedEnumPerspectiveNullableFilter<$PrismaModel>
  }

  export type NestedEnumParagraphStateNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ParagraphState | EnumParagraphStateFieldRefInput<$PrismaModel> | null
    in?: $Enums.ParagraphState[] | null
    notIn?: $Enums.ParagraphState[] | null
    not?: NestedEnumParagraphStateNullableFilter<$PrismaModel> | $Enums.ParagraphState | null
  }

  export type NestedEnumParagraphStateNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ParagraphState | EnumParagraphStateFieldRefInput<$PrismaModel> | null
    in?: $Enums.ParagraphState[] | null
    notIn?: $Enums.ParagraphState[] | null
    not?: NestedEnumParagraphStateNullableWithAggregatesFilter<$PrismaModel> | $Enums.ParagraphState | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumParagraphStateNullableFilter<$PrismaModel>
    _max?: NestedEnumParagraphStateNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumParagraphCommentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ParagraphCommentType | EnumParagraphCommentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ParagraphCommentType[]
    notIn?: $Enums.ParagraphCommentType[]
    not?: NestedEnumParagraphCommentTypeFilter<$PrismaModel> | $Enums.ParagraphCommentType
  }

  export type NestedEnumParagraphCommentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ParagraphCommentType | EnumParagraphCommentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ParagraphCommentType[]
    notIn?: $Enums.ParagraphCommentType[]
    not?: NestedEnumParagraphCommentTypeWithAggregatesFilter<$PrismaModel> | $Enums.ParagraphCommentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumParagraphCommentTypeFilter<$PrismaModel>
    _max?: NestedEnumParagraphCommentTypeFilter<$PrismaModel>
  }

  export type NestedEnumPublishingPlatformFilter<$PrismaModel = never> = {
    equals?: $Enums.PublishingPlatform | EnumPublishingPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.PublishingPlatform[]
    notIn?: $Enums.PublishingPlatform[]
    not?: NestedEnumPublishingPlatformFilter<$PrismaModel> | $Enums.PublishingPlatform
  }

  export type NestedEnumPublishingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PublishingStatus | EnumPublishingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PublishingStatus[]
    notIn?: $Enums.PublishingStatus[]
    not?: NestedEnumPublishingStatusFilter<$PrismaModel> | $Enums.PublishingStatus
  }

  export type NestedEnumPublishingPlatformWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PublishingPlatform | EnumPublishingPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.PublishingPlatform[]
    notIn?: $Enums.PublishingPlatform[]
    not?: NestedEnumPublishingPlatformWithAggregatesFilter<$PrismaModel> | $Enums.PublishingPlatform
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPublishingPlatformFilter<$PrismaModel>
    _max?: NestedEnumPublishingPlatformFilter<$PrismaModel>
  }

  export type NestedEnumPublishingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PublishingStatus | EnumPublishingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PublishingStatus[]
    notIn?: $Enums.PublishingStatus[]
    not?: NestedEnumPublishingStatusWithAggregatesFilter<$PrismaModel> | $Enums.PublishingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPublishingStatusFilter<$PrismaModel>
    _max?: NestedEnumPublishingStatusFilter<$PrismaModel>
  }

  export type NestedEnumPlotPointStateFilter<$PrismaModel = never> = {
    equals?: $Enums.PlotPointState | EnumPlotPointStateFieldRefInput<$PrismaModel>
    in?: $Enums.PlotPointState[]
    notIn?: $Enums.PlotPointState[]
    not?: NestedEnumPlotPointStateFilter<$PrismaModel> | $Enums.PlotPointState
  }

  export type NestedEnumPlotPointStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlotPointState | EnumPlotPointStateFieldRefInput<$PrismaModel>
    in?: $Enums.PlotPointState[]
    notIn?: $Enums.PlotPointState[]
    not?: NestedEnumPlotPointStateWithAggregatesFilter<$PrismaModel> | $Enums.PlotPointState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlotPointStateFilter<$PrismaModel>
    _max?: NestedEnumPlotPointStateFilter<$PrismaModel>
  }

  export type StoryCreateWithoutOwnerInput = {
    id?: string
    name?: string
    summary?: string | null
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutStoryInput
    coverArtFile?: FileCreateNestedOneWithoutStoryCoverArtInput
    defaultProtagonist?: CharacterCreateNestedOneWithoutDefaultProtagonistForStoryInput
    books?: BookCreateNestedManyWithoutStoryInput
    files?: FileCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagCreateNestedManyWithoutStoryInput
    characters?: CharacterCreateNestedManyWithoutStoryInput
    locations?: LocationCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointCreateNestedManyWithoutStoryInput
    items?: ItemCreateNestedManyWithoutStoryInput
  }

  export type StoryUncheckedCreateWithoutOwnerInput = {
    id?: string
    name?: string
    summary?: string | null
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverArtFileId?: string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    defaultProtagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutStoryInput
    books?: BookUncheckedCreateNestedManyWithoutStoryInput
    files?: FileUncheckedCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagUncheckedCreateNestedManyWithoutStoryInput
    characters?: CharacterUncheckedCreateNestedManyWithoutStoryInput
    locations?: LocationUncheckedCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointUncheckedCreateNestedManyWithoutStoryInput
    items?: ItemUncheckedCreateNestedManyWithoutStoryInput
  }

  export type StoryCreateOrConnectWithoutOwnerInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutOwnerInput, StoryUncheckedCreateWithoutOwnerInput>
  }

  export type StoryCreateManyOwnerInputEnvelope = {
    data: StoryCreateManyOwnerInput | StoryCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type BookShelfStoryCreateWithoutOwnerInput = {
    name?: string
    kind: $Enums.SavedType
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutBookShelfStoriesInput
  }

  export type BookShelfStoryUncheckedCreateWithoutOwnerInput = {
    id?: number
    name?: string
    storyId: string
    kind: $Enums.SavedType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookShelfStoryCreateOrConnectWithoutOwnerInput = {
    where: BookShelfStoryWhereUniqueInput
    create: XOR<BookShelfStoryCreateWithoutOwnerInput, BookShelfStoryUncheckedCreateWithoutOwnerInput>
  }

  export type BookShelfStoryCreateManyOwnerInputEnvelope = {
    data: BookShelfStoryCreateManyOwnerInput | BookShelfStoryCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type AccessKeyCreateWithoutOwnerInput = {
    key: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastUsedAt?: Date | string | null
  }

  export type AccessKeyUncheckedCreateWithoutOwnerInput = {
    id?: number
    key: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastUsedAt?: Date | string | null
  }

  export type AccessKeyCreateOrConnectWithoutOwnerInput = {
    where: AccessKeyWhereUniqueInput
    create: XOR<AccessKeyCreateWithoutOwnerInput, AccessKeyUncheckedCreateWithoutOwnerInput>
  }

  export type AccessKeyCreateManyOwnerInputEnvelope = {
    data: AccessKeyCreateManyOwnerInput | AccessKeyCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ParagraphCommentCreateWithoutOwnerInput = {
    body: string
    type?: $Enums.ParagraphCommentType
    createdAt?: Date | string
    updatedAt?: Date | string
    paragraphRevision: ParagraphRevisionCreateNestedOneWithoutParagraphCommentInput
  }

  export type ParagraphCommentUncheckedCreateWithoutOwnerInput = {
    id?: number
    paragraphRevisionId: string
    body: string
    type?: $Enums.ParagraphCommentType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParagraphCommentCreateOrConnectWithoutOwnerInput = {
    where: ParagraphCommentWhereUniqueInput
    create: XOR<ParagraphCommentCreateWithoutOwnerInput, ParagraphCommentUncheckedCreateWithoutOwnerInput>
  }

  export type ParagraphCommentCreateManyOwnerInputEnvelope = {
    data: ParagraphCommentCreateManyOwnerInput | ParagraphCommentCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutOwnerInput = {
    id?: string
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    story?: StoryCreateNestedOneWithoutFilesInput
    storyCoverArt?: StoryCreateNestedManyWithoutCoverArtFileInput
    bookCoverArt?: BookCreateNestedManyWithoutCoverArtFileInput
    bookSpineArt?: BookCreateNestedManyWithoutSpineArtFileInput
    characterPicture?: CharacterCreateNestedManyWithoutPictureFileInput
    locationPicture?: LocationCreateNestedManyWithoutPictureFileInput
  }

  export type FileUncheckedCreateWithoutOwnerInput = {
    id?: string
    storyId?: string | null
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    storyCoverArt?: StoryUncheckedCreateNestedManyWithoutCoverArtFileInput
    bookCoverArt?: BookUncheckedCreateNestedManyWithoutCoverArtFileInput
    bookSpineArt?: BookUncheckedCreateNestedManyWithoutSpineArtFileInput
    characterPicture?: CharacterUncheckedCreateNestedManyWithoutPictureFileInput
    locationPicture?: LocationUncheckedCreateNestedManyWithoutPictureFileInput
  }

  export type FileCreateOrConnectWithoutOwnerInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutOwnerInput, FileUncheckedCreateWithoutOwnerInput>
  }

  export type FileCreateManyOwnerInputEnvelope = {
    data: FileCreateManyOwnerInput | FileCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutOwnerInput = {
    id?: string
    validUntil: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutOwnerInput = {
    id?: string
    validUntil: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutOwnerInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutOwnerInput, SessionUncheckedCreateWithoutOwnerInput>
  }

  export type SessionCreateManyOwnerInputEnvelope = {
    data: SessionCreateManyOwnerInput | SessionCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type StoryReadStatusCreateWithoutUserInput = {
    id?: string
    lastChapterReadAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutStoryReadStatusesInput
    lastChapter?: ChapterCreateNestedOneWithoutStoryReadStatusInput
  }

  export type StoryReadStatusUncheckedCreateWithoutUserInput = {
    id?: string
    storyId: string
    lastChapterId?: string | null
    lastChapterReadAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryReadStatusCreateOrConnectWithoutUserInput = {
    where: StoryReadStatusWhereUniqueInput
    create: XOR<StoryReadStatusCreateWithoutUserInput, StoryReadStatusUncheckedCreateWithoutUserInput>
  }

  export type StoryReadStatusCreateManyUserInputEnvelope = {
    data: StoryReadStatusCreateManyUserInput | StoryReadStatusCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StoryUpsertWithWhereUniqueWithoutOwnerInput = {
    where: StoryWhereUniqueInput
    update: XOR<StoryUpdateWithoutOwnerInput, StoryUncheckedUpdateWithoutOwnerInput>
    create: XOR<StoryCreateWithoutOwnerInput, StoryUncheckedCreateWithoutOwnerInput>
  }

  export type StoryUpdateWithWhereUniqueWithoutOwnerInput = {
    where: StoryWhereUniqueInput
    data: XOR<StoryUpdateWithoutOwnerInput, StoryUncheckedUpdateWithoutOwnerInput>
  }

  export type StoryUpdateManyWithWhereWithoutOwnerInput = {
    where: StoryScalarWhereInput
    data: XOR<StoryUpdateManyMutationInput, StoryUncheckedUpdateManyWithoutOwnerInput>
  }

  export type StoryScalarWhereInput = {
    AND?: StoryScalarWhereInput | StoryScalarWhereInput[]
    OR?: StoryScalarWhereInput[]
    NOT?: StoryScalarWhereInput | StoryScalarWhereInput[]
    id?: StringFilter<"Story"> | string
    name?: StringFilter<"Story"> | string
    summary?: StringNullableFilter<"Story"> | string | null
    ownerId?: IntFilter<"Story"> | number
    royalRoadId?: IntNullableFilter<"Story"> | number | null
    published?: BoolFilter<"Story"> | boolean
    status?: EnumStoryStatusFilter<"Story"> | $Enums.StoryStatus
    type?: EnumStoryTypeFilter<"Story"> | $Enums.StoryType
    wordsPerWeek?: IntNullableFilter<"Story"> | number | null
    spellingLevel?: IntNullableFilter<"Story"> | number | null
    chapters?: IntNullableFilter<"Story"> | number | null
    firstChapterReleasedAt?: DateTimeNullableFilter<"Story"> | Date | string | null
    lastChapterReleasedAt?: DateTimeNullableFilter<"Story"> | Date | string | null
    coverArtFileId?: StringNullableFilter<"Story"> | string | null
    coverColor?: StringFilter<"Story"> | string
    coverTextColor?: StringFilter<"Story"> | string
    coverFontFamily?: StringFilter<"Story"> | string
    defaultPerspective?: EnumPerspectiveNullableFilter<"Story"> | $Enums.Perspective | null
    defaultProtagonistId?: StringNullableFilter<"Story"> | string | null
    createdAt?: DateTimeFilter<"Story"> | Date | string
    updatedAt?: DateTimeFilter<"Story"> | Date | string
    sortOrder?: IntFilter<"Story"> | number
    pages?: IntNullableFilter<"Story"> | number | null
  }

  export type BookShelfStoryUpsertWithWhereUniqueWithoutOwnerInput = {
    where: BookShelfStoryWhereUniqueInput
    update: XOR<BookShelfStoryUpdateWithoutOwnerInput, BookShelfStoryUncheckedUpdateWithoutOwnerInput>
    create: XOR<BookShelfStoryCreateWithoutOwnerInput, BookShelfStoryUncheckedCreateWithoutOwnerInput>
  }

  export type BookShelfStoryUpdateWithWhereUniqueWithoutOwnerInput = {
    where: BookShelfStoryWhereUniqueInput
    data: XOR<BookShelfStoryUpdateWithoutOwnerInput, BookShelfStoryUncheckedUpdateWithoutOwnerInput>
  }

  export type BookShelfStoryUpdateManyWithWhereWithoutOwnerInput = {
    where: BookShelfStoryScalarWhereInput
    data: XOR<BookShelfStoryUpdateManyMutationInput, BookShelfStoryUncheckedUpdateManyWithoutOwnerInput>
  }

  export type BookShelfStoryScalarWhereInput = {
    AND?: BookShelfStoryScalarWhereInput | BookShelfStoryScalarWhereInput[]
    OR?: BookShelfStoryScalarWhereInput[]
    NOT?: BookShelfStoryScalarWhereInput | BookShelfStoryScalarWhereInput[]
    id?: IntFilter<"BookShelfStory"> | number
    name?: StringFilter<"BookShelfStory"> | string
    ownerId?: IntFilter<"BookShelfStory"> | number
    storyId?: StringFilter<"BookShelfStory"> | string
    kind?: EnumSavedTypeFilter<"BookShelfStory"> | $Enums.SavedType
    createdAt?: DateTimeFilter<"BookShelfStory"> | Date | string
    updatedAt?: DateTimeFilter<"BookShelfStory"> | Date | string
  }

  export type AccessKeyUpsertWithWhereUniqueWithoutOwnerInput = {
    where: AccessKeyWhereUniqueInput
    update: XOR<AccessKeyUpdateWithoutOwnerInput, AccessKeyUncheckedUpdateWithoutOwnerInput>
    create: XOR<AccessKeyCreateWithoutOwnerInput, AccessKeyUncheckedCreateWithoutOwnerInput>
  }

  export type AccessKeyUpdateWithWhereUniqueWithoutOwnerInput = {
    where: AccessKeyWhereUniqueInput
    data: XOR<AccessKeyUpdateWithoutOwnerInput, AccessKeyUncheckedUpdateWithoutOwnerInput>
  }

  export type AccessKeyUpdateManyWithWhereWithoutOwnerInput = {
    where: AccessKeyScalarWhereInput
    data: XOR<AccessKeyUpdateManyMutationInput, AccessKeyUncheckedUpdateManyWithoutOwnerInput>
  }

  export type AccessKeyScalarWhereInput = {
    AND?: AccessKeyScalarWhereInput | AccessKeyScalarWhereInput[]
    OR?: AccessKeyScalarWhereInput[]
    NOT?: AccessKeyScalarWhereInput | AccessKeyScalarWhereInput[]
    id?: IntFilter<"AccessKey"> | number
    key?: StringFilter<"AccessKey"> | string
    description?: StringNullableFilter<"AccessKey"> | string | null
    ownerId?: IntFilter<"AccessKey"> | number
    createdAt?: DateTimeFilter<"AccessKey"> | Date | string
    updatedAt?: DateTimeFilter<"AccessKey"> | Date | string
    lastUsedAt?: DateTimeNullableFilter<"AccessKey"> | Date | string | null
  }

  export type ParagraphCommentUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ParagraphCommentWhereUniqueInput
    update: XOR<ParagraphCommentUpdateWithoutOwnerInput, ParagraphCommentUncheckedUpdateWithoutOwnerInput>
    create: XOR<ParagraphCommentCreateWithoutOwnerInput, ParagraphCommentUncheckedCreateWithoutOwnerInput>
  }

  export type ParagraphCommentUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ParagraphCommentWhereUniqueInput
    data: XOR<ParagraphCommentUpdateWithoutOwnerInput, ParagraphCommentUncheckedUpdateWithoutOwnerInput>
  }

  export type ParagraphCommentUpdateManyWithWhereWithoutOwnerInput = {
    where: ParagraphCommentScalarWhereInput
    data: XOR<ParagraphCommentUpdateManyMutationInput, ParagraphCommentUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ParagraphCommentScalarWhereInput = {
    AND?: ParagraphCommentScalarWhereInput | ParagraphCommentScalarWhereInput[]
    OR?: ParagraphCommentScalarWhereInput[]
    NOT?: ParagraphCommentScalarWhereInput | ParagraphCommentScalarWhereInput[]
    id?: IntFilter<"ParagraphComment"> | number
    paragraphRevisionId?: StringFilter<"ParagraphComment"> | string
    ownerId?: IntFilter<"ParagraphComment"> | number
    body?: StringFilter<"ParagraphComment"> | string
    type?: EnumParagraphCommentTypeFilter<"ParagraphComment"> | $Enums.ParagraphCommentType
    createdAt?: DateTimeFilter<"ParagraphComment"> | Date | string
    updatedAt?: DateTimeFilter<"ParagraphComment"> | Date | string
  }

  export type FileUpsertWithWhereUniqueWithoutOwnerInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutOwnerInput, FileUncheckedUpdateWithoutOwnerInput>
    create: XOR<FileCreateWithoutOwnerInput, FileUncheckedCreateWithoutOwnerInput>
  }

  export type FileUpdateWithWhereUniqueWithoutOwnerInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutOwnerInput, FileUncheckedUpdateWithoutOwnerInput>
  }

  export type FileUpdateManyWithWhereWithoutOwnerInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutOwnerInput>
  }

  export type FileScalarWhereInput = {
    AND?: FileScalarWhereInput | FileScalarWhereInput[]
    OR?: FileScalarWhereInput[]
    NOT?: FileScalarWhereInput | FileScalarWhereInput[]
    id?: StringFilter<"File"> | string
    ownerId?: IntFilter<"File"> | number
    storyId?: StringNullableFilter<"File"> | string | null
    localPath?: StringNullableFilter<"File"> | string | null
    path?: StringFilter<"File"> | string
    sha256?: StringFilter<"File"> | string
    width?: IntNullableFilter<"File"> | number | null
    height?: IntNullableFilter<"File"> | number | null
    bytes?: IntNullableFilter<"File"> | number | null
    mimeType?: StringFilter<"File"> | string
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
  }

  export type SessionUpsertWithWhereUniqueWithoutOwnerInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutOwnerInput, SessionUncheckedUpdateWithoutOwnerInput>
    create: XOR<SessionCreateWithoutOwnerInput, SessionUncheckedCreateWithoutOwnerInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutOwnerInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutOwnerInput, SessionUncheckedUpdateWithoutOwnerInput>
  }

  export type SessionUpdateManyWithWhereWithoutOwnerInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutOwnerInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    ownerId?: IntFilter<"Session"> | number
    validUntil?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type StoryReadStatusUpsertWithWhereUniqueWithoutUserInput = {
    where: StoryReadStatusWhereUniqueInput
    update: XOR<StoryReadStatusUpdateWithoutUserInput, StoryReadStatusUncheckedUpdateWithoutUserInput>
    create: XOR<StoryReadStatusCreateWithoutUserInput, StoryReadStatusUncheckedCreateWithoutUserInput>
  }

  export type StoryReadStatusUpdateWithWhereUniqueWithoutUserInput = {
    where: StoryReadStatusWhereUniqueInput
    data: XOR<StoryReadStatusUpdateWithoutUserInput, StoryReadStatusUncheckedUpdateWithoutUserInput>
  }

  export type StoryReadStatusUpdateManyWithWhereWithoutUserInput = {
    where: StoryReadStatusScalarWhereInput
    data: XOR<StoryReadStatusUpdateManyMutationInput, StoryReadStatusUncheckedUpdateManyWithoutUserInput>
  }

  export type StoryReadStatusScalarWhereInput = {
    AND?: StoryReadStatusScalarWhereInput | StoryReadStatusScalarWhereInput[]
    OR?: StoryReadStatusScalarWhereInput[]
    NOT?: StoryReadStatusScalarWhereInput | StoryReadStatusScalarWhereInput[]
    id?: StringFilter<"StoryReadStatus"> | string
    storyId?: StringFilter<"StoryReadStatus"> | string
    userId?: IntFilter<"StoryReadStatus"> | number
    lastChapterId?: StringNullableFilter<"StoryReadStatus"> | string | null
    lastChapterReadAt?: DateTimeNullableFilter<"StoryReadStatus"> | Date | string | null
    createdAt?: DateTimeFilter<"StoryReadStatus"> | Date | string
    updatedAt?: DateTimeFilter<"StoryReadStatus"> | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    ownedStories?: StoryCreateNestedManyWithoutOwnerInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutOwnerInput
    accessKeys?: AccessKeyCreateNestedManyWithoutOwnerInput
    paragraphComments?: ParagraphCommentCreateNestedManyWithoutOwnerInput
    files?: FileCreateNestedManyWithoutOwnerInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    ownedStories?: StoryUncheckedCreateNestedManyWithoutOwnerInput
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutOwnerInput
    accessKeys?: AccessKeyUncheckedCreateNestedManyWithoutOwnerInput
    paragraphComments?: ParagraphCommentUncheckedCreateNestedManyWithoutOwnerInput
    files?: FileUncheckedCreateNestedManyWithoutOwnerInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedStories?: StoryUpdateManyWithoutOwnerNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutOwnerNestedInput
    accessKeys?: AccessKeyUpdateManyWithoutOwnerNestedInput
    paragraphComments?: ParagraphCommentUpdateManyWithoutOwnerNestedInput
    files?: FileUpdateManyWithoutOwnerNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedStories?: StoryUncheckedUpdateManyWithoutOwnerNestedInput
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutOwnerNestedInput
    accessKeys?: AccessKeyUncheckedUpdateManyWithoutOwnerNestedInput
    paragraphComments?: ParagraphCommentUncheckedUpdateManyWithoutOwnerNestedInput
    files?: FileUncheckedUpdateManyWithoutOwnerNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAccessKeysInput = {
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    ownedStories?: StoryCreateNestedManyWithoutOwnerInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutOwnerInput
    paragraphComments?: ParagraphCommentCreateNestedManyWithoutOwnerInput
    files?: FileCreateNestedManyWithoutOwnerInput
    sessions?: SessionCreateNestedManyWithoutOwnerInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccessKeysInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    ownedStories?: StoryUncheckedCreateNestedManyWithoutOwnerInput
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutOwnerInput
    paragraphComments?: ParagraphCommentUncheckedCreateNestedManyWithoutOwnerInput
    files?: FileUncheckedCreateNestedManyWithoutOwnerInput
    sessions?: SessionUncheckedCreateNestedManyWithoutOwnerInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccessKeysInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccessKeysInput, UserUncheckedCreateWithoutAccessKeysInput>
  }

  export type UserUpsertWithoutAccessKeysInput = {
    update: XOR<UserUpdateWithoutAccessKeysInput, UserUncheckedUpdateWithoutAccessKeysInput>
    create: XOR<UserCreateWithoutAccessKeysInput, UserUncheckedCreateWithoutAccessKeysInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccessKeysInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccessKeysInput, UserUncheckedUpdateWithoutAccessKeysInput>
  }

  export type UserUpdateWithoutAccessKeysInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedStories?: StoryUpdateManyWithoutOwnerNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutOwnerNestedInput
    paragraphComments?: ParagraphCommentUpdateManyWithoutOwnerNestedInput
    files?: FileUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUpdateManyWithoutOwnerNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccessKeysInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedStories?: StoryUncheckedUpdateManyWithoutOwnerNestedInput
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutOwnerNestedInput
    paragraphComments?: ParagraphCommentUncheckedUpdateManyWithoutOwnerNestedInput
    files?: FileUncheckedUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutOwnerNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutBookShelfStoriesInput = {
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    ownedStories?: StoryCreateNestedManyWithoutOwnerInput
    accessKeys?: AccessKeyCreateNestedManyWithoutOwnerInput
    paragraphComments?: ParagraphCommentCreateNestedManyWithoutOwnerInput
    files?: FileCreateNestedManyWithoutOwnerInput
    sessions?: SessionCreateNestedManyWithoutOwnerInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBookShelfStoriesInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    ownedStories?: StoryUncheckedCreateNestedManyWithoutOwnerInput
    accessKeys?: AccessKeyUncheckedCreateNestedManyWithoutOwnerInput
    paragraphComments?: ParagraphCommentUncheckedCreateNestedManyWithoutOwnerInput
    files?: FileUncheckedCreateNestedManyWithoutOwnerInput
    sessions?: SessionUncheckedCreateNestedManyWithoutOwnerInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBookShelfStoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookShelfStoriesInput, UserUncheckedCreateWithoutBookShelfStoriesInput>
  }

  export type StoryCreateWithoutBookShelfStoriesInput = {
    id?: string
    name?: string
    summary?: string | null
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    owner: UserCreateNestedOneWithoutOwnedStoriesInput
    coverArtFile?: FileCreateNestedOneWithoutStoryCoverArtInput
    defaultProtagonist?: CharacterCreateNestedOneWithoutDefaultProtagonistForStoryInput
    books?: BookCreateNestedManyWithoutStoryInput
    files?: FileCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagCreateNestedManyWithoutStoryInput
    characters?: CharacterCreateNestedManyWithoutStoryInput
    locations?: LocationCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointCreateNestedManyWithoutStoryInput
    items?: ItemCreateNestedManyWithoutStoryInput
  }

  export type StoryUncheckedCreateWithoutBookShelfStoriesInput = {
    id?: string
    name?: string
    summary?: string | null
    ownerId: number
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverArtFileId?: string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    defaultProtagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    books?: BookUncheckedCreateNestedManyWithoutStoryInput
    files?: FileUncheckedCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagUncheckedCreateNestedManyWithoutStoryInput
    characters?: CharacterUncheckedCreateNestedManyWithoutStoryInput
    locations?: LocationUncheckedCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointUncheckedCreateNestedManyWithoutStoryInput
    items?: ItemUncheckedCreateNestedManyWithoutStoryInput
  }

  export type StoryCreateOrConnectWithoutBookShelfStoriesInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutBookShelfStoriesInput, StoryUncheckedCreateWithoutBookShelfStoriesInput>
  }

  export type UserUpsertWithoutBookShelfStoriesInput = {
    update: XOR<UserUpdateWithoutBookShelfStoriesInput, UserUncheckedUpdateWithoutBookShelfStoriesInput>
    create: XOR<UserCreateWithoutBookShelfStoriesInput, UserUncheckedCreateWithoutBookShelfStoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBookShelfStoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBookShelfStoriesInput, UserUncheckedUpdateWithoutBookShelfStoriesInput>
  }

  export type UserUpdateWithoutBookShelfStoriesInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedStories?: StoryUpdateManyWithoutOwnerNestedInput
    accessKeys?: AccessKeyUpdateManyWithoutOwnerNestedInput
    paragraphComments?: ParagraphCommentUpdateManyWithoutOwnerNestedInput
    files?: FileUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUpdateManyWithoutOwnerNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBookShelfStoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedStories?: StoryUncheckedUpdateManyWithoutOwnerNestedInput
    accessKeys?: AccessKeyUncheckedUpdateManyWithoutOwnerNestedInput
    paragraphComments?: ParagraphCommentUncheckedUpdateManyWithoutOwnerNestedInput
    files?: FileUncheckedUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutOwnerNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StoryUpsertWithoutBookShelfStoriesInput = {
    update: XOR<StoryUpdateWithoutBookShelfStoriesInput, StoryUncheckedUpdateWithoutBookShelfStoriesInput>
    create: XOR<StoryCreateWithoutBookShelfStoriesInput, StoryUncheckedCreateWithoutBookShelfStoriesInput>
    where?: StoryWhereInput
  }

  export type StoryUpdateToOneWithWhereWithoutBookShelfStoriesInput = {
    where?: StoryWhereInput
    data: XOR<StoryUpdateWithoutBookShelfStoriesInput, StoryUncheckedUpdateWithoutBookShelfStoriesInput>
  }

  export type StoryUpdateWithoutBookShelfStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: UserUpdateOneRequiredWithoutOwnedStoriesNestedInput
    coverArtFile?: FileUpdateOneWithoutStoryCoverArtNestedInput
    defaultProtagonist?: CharacterUpdateOneWithoutDefaultProtagonistForStoryNestedInput
    books?: BookUpdateManyWithoutStoryNestedInput
    files?: FileUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUpdateManyWithoutStoryNestedInput
    characters?: CharacterUpdateManyWithoutStoryNestedInput
    locations?: LocationUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUpdateManyWithoutStoryNestedInput
    items?: ItemUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateWithoutBookShelfStoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    defaultProtagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    books?: BookUncheckedUpdateManyWithoutStoryNestedInput
    files?: FileUncheckedUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUncheckedUpdateManyWithoutStoryNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutStoryNestedInput
    locations?: LocationUncheckedUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUncheckedUpdateManyWithoutStoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutStoryNestedInput
  }

  export type UserCreateWithoutOwnedStoriesInput = {
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutOwnerInput
    accessKeys?: AccessKeyCreateNestedManyWithoutOwnerInput
    paragraphComments?: ParagraphCommentCreateNestedManyWithoutOwnerInput
    files?: FileCreateNestedManyWithoutOwnerInput
    sessions?: SessionCreateNestedManyWithoutOwnerInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOwnedStoriesInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutOwnerInput
    accessKeys?: AccessKeyUncheckedCreateNestedManyWithoutOwnerInput
    paragraphComments?: ParagraphCommentUncheckedCreateNestedManyWithoutOwnerInput
    files?: FileUncheckedCreateNestedManyWithoutOwnerInput
    sessions?: SessionUncheckedCreateNestedManyWithoutOwnerInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOwnedStoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedStoriesInput, UserUncheckedCreateWithoutOwnedStoriesInput>
  }

  export type BookShelfStoryCreateWithoutStoryInput = {
    name?: string
    kind: $Enums.SavedType
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutBookShelfStoriesInput
  }

  export type BookShelfStoryUncheckedCreateWithoutStoryInput = {
    id?: number
    name?: string
    ownerId: number
    kind: $Enums.SavedType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookShelfStoryCreateOrConnectWithoutStoryInput = {
    where: BookShelfStoryWhereUniqueInput
    create: XOR<BookShelfStoryCreateWithoutStoryInput, BookShelfStoryUncheckedCreateWithoutStoryInput>
  }

  export type BookShelfStoryCreateManyStoryInputEnvelope = {
    data: BookShelfStoryCreateManyStoryInput | BookShelfStoryCreateManyStoryInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutStoryCoverArtInput = {
    id?: string
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutFilesInput
    story?: StoryCreateNestedOneWithoutFilesInput
    bookCoverArt?: BookCreateNestedManyWithoutCoverArtFileInput
    bookSpineArt?: BookCreateNestedManyWithoutSpineArtFileInput
    characterPicture?: CharacterCreateNestedManyWithoutPictureFileInput
    locationPicture?: LocationCreateNestedManyWithoutPictureFileInput
  }

  export type FileUncheckedCreateWithoutStoryCoverArtInput = {
    id?: string
    ownerId: number
    storyId?: string | null
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookCoverArt?: BookUncheckedCreateNestedManyWithoutCoverArtFileInput
    bookSpineArt?: BookUncheckedCreateNestedManyWithoutSpineArtFileInput
    characterPicture?: CharacterUncheckedCreateNestedManyWithoutPictureFileInput
    locationPicture?: LocationUncheckedCreateNestedManyWithoutPictureFileInput
  }

  export type FileCreateOrConnectWithoutStoryCoverArtInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutStoryCoverArtInput, FileUncheckedCreateWithoutStoryCoverArtInput>
  }

  export type CharacterCreateWithoutDefaultProtagonistForStoryInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutCharactersInput
    pictureFile?: FileCreateNestedOneWithoutCharacterPictureInput
    laterVersionOf?: CharacterCreateNestedOneWithoutPreviousVersionInput
    previousVersion?: CharacterCreateNestedManyWithoutLaterVersionOfInput
    sceneProtagonistIn?: SceneCreateNestedManyWithoutProtagonistInput
    participatingInScenes?: SceneCharacterCreateNestedManyWithoutCharacterInput
    referredInScenes?: SceneReferredCharacterCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutDefaultProtagonistForStoryInput = {
    id?: string
    storyId: string
    pictureFileId?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    laterVersionOfId?: string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    previousVersion?: CharacterUncheckedCreateNestedManyWithoutLaterVersionOfInput
    sceneProtagonistIn?: SceneUncheckedCreateNestedManyWithoutProtagonistInput
    participatingInScenes?: SceneCharacterUncheckedCreateNestedManyWithoutCharacterInput
    referredInScenes?: SceneReferredCharacterUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutDefaultProtagonistForStoryInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutDefaultProtagonistForStoryInput, CharacterUncheckedCreateWithoutDefaultProtagonistForStoryInput>
  }

  export type BookCreateWithoutStoryInput = {
    id?: string
    name?: string
    summary?: string | null
    pages?: number | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    coverArtFile?: FileCreateNestedOneWithoutBookCoverArtInput
    spineArtFile?: FileCreateNestedOneWithoutBookSpineArtInput
    arcs?: ArcCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutStoryInput = {
    id?: string
    name?: string
    summary?: string | null
    coverArtFileId?: string | null
    spineArtFileId?: string | null
    pages?: number | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    arcs?: ArcUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutStoryInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutStoryInput, BookUncheckedCreateWithoutStoryInput>
  }

  export type BookCreateManyStoryInputEnvelope = {
    data: BookCreateManyStoryInput | BookCreateManyStoryInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutStoryInput = {
    id?: string
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutFilesInput
    storyCoverArt?: StoryCreateNestedManyWithoutCoverArtFileInput
    bookCoverArt?: BookCreateNestedManyWithoutCoverArtFileInput
    bookSpineArt?: BookCreateNestedManyWithoutSpineArtFileInput
    characterPicture?: CharacterCreateNestedManyWithoutPictureFileInput
    locationPicture?: LocationCreateNestedManyWithoutPictureFileInput
  }

  export type FileUncheckedCreateWithoutStoryInput = {
    id?: string
    ownerId: number
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    storyCoverArt?: StoryUncheckedCreateNestedManyWithoutCoverArtFileInput
    bookCoverArt?: BookUncheckedCreateNestedManyWithoutCoverArtFileInput
    bookSpineArt?: BookUncheckedCreateNestedManyWithoutSpineArtFileInput
    characterPicture?: CharacterUncheckedCreateNestedManyWithoutPictureFileInput
    locationPicture?: LocationUncheckedCreateNestedManyWithoutPictureFileInput
  }

  export type FileCreateOrConnectWithoutStoryInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutStoryInput, FileUncheckedCreateWithoutStoryInput>
  }

  export type FileCreateManyStoryInputEnvelope = {
    data: FileCreateManyStoryInput | FileCreateManyStoryInput[]
    skipDuplicates?: boolean
  }

  export type StoryReadStatusCreateWithoutStoryInput = {
    id?: string
    lastChapterReadAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStoryReadStatusesInput
    lastChapter?: ChapterCreateNestedOneWithoutStoryReadStatusInput
  }

  export type StoryReadStatusUncheckedCreateWithoutStoryInput = {
    id?: string
    userId: number
    lastChapterId?: string | null
    lastChapterReadAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryReadStatusCreateOrConnectWithoutStoryInput = {
    where: StoryReadStatusWhereUniqueInput
    create: XOR<StoryReadStatusCreateWithoutStoryInput, StoryReadStatusUncheckedCreateWithoutStoryInput>
  }

  export type StoryReadStatusCreateManyStoryInputEnvelope = {
    data: StoryReadStatusCreateManyStoryInput | StoryReadStatusCreateManyStoryInput[]
    skipDuplicates?: boolean
  }

  export type StoryTagCreateWithoutStoryInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tag: TagCreateNestedOneWithoutStoryTagsInput
  }

  export type StoryTagUncheckedCreateWithoutStoryInput = {
    id?: string
    tagId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryTagCreateOrConnectWithoutStoryInput = {
    where: StoryTagWhereUniqueInput
    create: XOR<StoryTagCreateWithoutStoryInput, StoryTagUncheckedCreateWithoutStoryInput>
  }

  export type StoryTagCreateManyStoryInputEnvelope = {
    data: StoryTagCreateManyStoryInput | StoryTagCreateManyStoryInput[]
    skipDuplicates?: boolean
  }

  export type CharacterCreateWithoutStoryInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    pictureFile?: FileCreateNestedOneWithoutCharacterPictureInput
    laterVersionOf?: CharacterCreateNestedOneWithoutPreviousVersionInput
    previousVersion?: CharacterCreateNestedManyWithoutLaterVersionOfInput
    defaultProtagonistForStory?: StoryCreateNestedManyWithoutDefaultProtagonistInput
    sceneProtagonistIn?: SceneCreateNestedManyWithoutProtagonistInput
    participatingInScenes?: SceneCharacterCreateNestedManyWithoutCharacterInput
    referredInScenes?: SceneReferredCharacterCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutStoryInput = {
    id?: string
    pictureFileId?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    laterVersionOfId?: string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    previousVersion?: CharacterUncheckedCreateNestedManyWithoutLaterVersionOfInput
    defaultProtagonistForStory?: StoryUncheckedCreateNestedManyWithoutDefaultProtagonistInput
    sceneProtagonistIn?: SceneUncheckedCreateNestedManyWithoutProtagonistInput
    participatingInScenes?: SceneCharacterUncheckedCreateNestedManyWithoutCharacterInput
    referredInScenes?: SceneReferredCharacterUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutStoryInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutStoryInput, CharacterUncheckedCreateWithoutStoryInput>
  }

  export type CharacterCreateManyStoryInputEnvelope = {
    data: CharacterCreateManyStoryInput | CharacterCreateManyStoryInput[]
    skipDuplicates?: boolean
  }

  export type LocationCreateWithoutStoryInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    pictureFile?: FileCreateNestedOneWithoutLocationPictureInput
    scenes?: SceneCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutStoryInput = {
    id?: string
    name: string
    pictureFileId?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scenes?: SceneUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutStoryInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutStoryInput, LocationUncheckedCreateWithoutStoryInput>
  }

  export type LocationCreateManyStoryInputEnvelope = {
    data: LocationCreateManyStoryInput | LocationCreateManyStoryInput[]
    skipDuplicates?: boolean
  }

  export type PlotPointCreateWithoutStoryInput = {
    id?: string
    title: string
    summary?: string | null
    state?: $Enums.PlotPointState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlotPointUncheckedCreateWithoutStoryInput = {
    id?: string
    title: string
    summary?: string | null
    state?: $Enums.PlotPointState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlotPointCreateOrConnectWithoutStoryInput = {
    where: PlotPointWhereUniqueInput
    create: XOR<PlotPointCreateWithoutStoryInput, PlotPointUncheckedCreateWithoutStoryInput>
  }

  export type PlotPointCreateManyStoryInputEnvelope = {
    data: PlotPointCreateManyStoryInput | PlotPointCreateManyStoryInput[]
    skipDuplicates?: boolean
  }

  export type ItemCreateWithoutStoryInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemUncheckedCreateWithoutStoryInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemCreateOrConnectWithoutStoryInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutStoryInput, ItemUncheckedCreateWithoutStoryInput>
  }

  export type ItemCreateManyStoryInputEnvelope = {
    data: ItemCreateManyStoryInput | ItemCreateManyStoryInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOwnedStoriesInput = {
    update: XOR<UserUpdateWithoutOwnedStoriesInput, UserUncheckedUpdateWithoutOwnedStoriesInput>
    create: XOR<UserCreateWithoutOwnedStoriesInput, UserUncheckedCreateWithoutOwnedStoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedStoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedStoriesInput, UserUncheckedUpdateWithoutOwnedStoriesInput>
  }

  export type UserUpdateWithoutOwnedStoriesInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookShelfStories?: BookShelfStoryUpdateManyWithoutOwnerNestedInput
    accessKeys?: AccessKeyUpdateManyWithoutOwnerNestedInput
    paragraphComments?: ParagraphCommentUpdateManyWithoutOwnerNestedInput
    files?: FileUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUpdateManyWithoutOwnerNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedStoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutOwnerNestedInput
    accessKeys?: AccessKeyUncheckedUpdateManyWithoutOwnerNestedInput
    paragraphComments?: ParagraphCommentUncheckedUpdateManyWithoutOwnerNestedInput
    files?: FileUncheckedUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutOwnerNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BookShelfStoryUpsertWithWhereUniqueWithoutStoryInput = {
    where: BookShelfStoryWhereUniqueInput
    update: XOR<BookShelfStoryUpdateWithoutStoryInput, BookShelfStoryUncheckedUpdateWithoutStoryInput>
    create: XOR<BookShelfStoryCreateWithoutStoryInput, BookShelfStoryUncheckedCreateWithoutStoryInput>
  }

  export type BookShelfStoryUpdateWithWhereUniqueWithoutStoryInput = {
    where: BookShelfStoryWhereUniqueInput
    data: XOR<BookShelfStoryUpdateWithoutStoryInput, BookShelfStoryUncheckedUpdateWithoutStoryInput>
  }

  export type BookShelfStoryUpdateManyWithWhereWithoutStoryInput = {
    where: BookShelfStoryScalarWhereInput
    data: XOR<BookShelfStoryUpdateManyMutationInput, BookShelfStoryUncheckedUpdateManyWithoutStoryInput>
  }

  export type FileUpsertWithoutStoryCoverArtInput = {
    update: XOR<FileUpdateWithoutStoryCoverArtInput, FileUncheckedUpdateWithoutStoryCoverArtInput>
    create: XOR<FileCreateWithoutStoryCoverArtInput, FileUncheckedCreateWithoutStoryCoverArtInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutStoryCoverArtInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutStoryCoverArtInput, FileUncheckedUpdateWithoutStoryCoverArtInput>
  }

  export type FileUpdateWithoutStoryCoverArtInput = {
    id?: StringFieldUpdateOperationsInput | string
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutFilesNestedInput
    story?: StoryUpdateOneWithoutFilesNestedInput
    bookCoverArt?: BookUpdateManyWithoutCoverArtFileNestedInput
    bookSpineArt?: BookUpdateManyWithoutSpineArtFileNestedInput
    characterPicture?: CharacterUpdateManyWithoutPictureFileNestedInput
    locationPicture?: LocationUpdateManyWithoutPictureFileNestedInput
  }

  export type FileUncheckedUpdateWithoutStoryCoverArtInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    storyId?: NullableStringFieldUpdateOperationsInput | string | null
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookCoverArt?: BookUncheckedUpdateManyWithoutCoverArtFileNestedInput
    bookSpineArt?: BookUncheckedUpdateManyWithoutSpineArtFileNestedInput
    characterPicture?: CharacterUncheckedUpdateManyWithoutPictureFileNestedInput
    locationPicture?: LocationUncheckedUpdateManyWithoutPictureFileNestedInput
  }

  export type CharacterUpsertWithoutDefaultProtagonistForStoryInput = {
    update: XOR<CharacterUpdateWithoutDefaultProtagonistForStoryInput, CharacterUncheckedUpdateWithoutDefaultProtagonistForStoryInput>
    create: XOR<CharacterCreateWithoutDefaultProtagonistForStoryInput, CharacterUncheckedCreateWithoutDefaultProtagonistForStoryInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutDefaultProtagonistForStoryInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutDefaultProtagonistForStoryInput, CharacterUncheckedUpdateWithoutDefaultProtagonistForStoryInput>
  }

  export type CharacterUpdateWithoutDefaultProtagonistForStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutCharactersNestedInput
    pictureFile?: FileUpdateOneWithoutCharacterPictureNestedInput
    laterVersionOf?: CharacterUpdateOneWithoutPreviousVersionNestedInput
    previousVersion?: CharacterUpdateManyWithoutLaterVersionOfNestedInput
    sceneProtagonistIn?: SceneUpdateManyWithoutProtagonistNestedInput
    participatingInScenes?: SceneCharacterUpdateManyWithoutCharacterNestedInput
    referredInScenes?: SceneReferredCharacterUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutDefaultProtagonistForStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    laterVersionOfId?: NullableStringFieldUpdateOperationsInput | string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousVersion?: CharacterUncheckedUpdateManyWithoutLaterVersionOfNestedInput
    sceneProtagonistIn?: SceneUncheckedUpdateManyWithoutProtagonistNestedInput
    participatingInScenes?: SceneCharacterUncheckedUpdateManyWithoutCharacterNestedInput
    referredInScenes?: SceneReferredCharacterUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type BookUpsertWithWhereUniqueWithoutStoryInput = {
    where: BookWhereUniqueInput
    update: XOR<BookUpdateWithoutStoryInput, BookUncheckedUpdateWithoutStoryInput>
    create: XOR<BookCreateWithoutStoryInput, BookUncheckedCreateWithoutStoryInput>
  }

  export type BookUpdateWithWhereUniqueWithoutStoryInput = {
    where: BookWhereUniqueInput
    data: XOR<BookUpdateWithoutStoryInput, BookUncheckedUpdateWithoutStoryInput>
  }

  export type BookUpdateManyWithWhereWithoutStoryInput = {
    where: BookScalarWhereInput
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyWithoutStoryInput>
  }

  export type BookScalarWhereInput = {
    AND?: BookScalarWhereInput | BookScalarWhereInput[]
    OR?: BookScalarWhereInput[]
    NOT?: BookScalarWhereInput | BookScalarWhereInput[]
    id?: StringFilter<"Book"> | string
    name?: StringFilter<"Book"> | string
    summary?: StringNullableFilter<"Book"> | string | null
    storyId?: StringFilter<"Book"> | string
    coverArtFileId?: StringNullableFilter<"Book"> | string | null
    spineArtFileId?: StringNullableFilter<"Book"> | string | null
    pages?: IntNullableFilter<"Book"> | number | null
    sortOrder?: IntFilter<"Book"> | number
    nodeType?: StringFilter<"Book"> | string
    createdAt?: DateTimeFilter<"Book"> | Date | string
    updatedAt?: DateTimeFilter<"Book"> | Date | string
  }

  export type FileUpsertWithWhereUniqueWithoutStoryInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutStoryInput, FileUncheckedUpdateWithoutStoryInput>
    create: XOR<FileCreateWithoutStoryInput, FileUncheckedCreateWithoutStoryInput>
  }

  export type FileUpdateWithWhereUniqueWithoutStoryInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutStoryInput, FileUncheckedUpdateWithoutStoryInput>
  }

  export type FileUpdateManyWithWhereWithoutStoryInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutStoryInput>
  }

  export type StoryReadStatusUpsertWithWhereUniqueWithoutStoryInput = {
    where: StoryReadStatusWhereUniqueInput
    update: XOR<StoryReadStatusUpdateWithoutStoryInput, StoryReadStatusUncheckedUpdateWithoutStoryInput>
    create: XOR<StoryReadStatusCreateWithoutStoryInput, StoryReadStatusUncheckedCreateWithoutStoryInput>
  }

  export type StoryReadStatusUpdateWithWhereUniqueWithoutStoryInput = {
    where: StoryReadStatusWhereUniqueInput
    data: XOR<StoryReadStatusUpdateWithoutStoryInput, StoryReadStatusUncheckedUpdateWithoutStoryInput>
  }

  export type StoryReadStatusUpdateManyWithWhereWithoutStoryInput = {
    where: StoryReadStatusScalarWhereInput
    data: XOR<StoryReadStatusUpdateManyMutationInput, StoryReadStatusUncheckedUpdateManyWithoutStoryInput>
  }

  export type StoryTagUpsertWithWhereUniqueWithoutStoryInput = {
    where: StoryTagWhereUniqueInput
    update: XOR<StoryTagUpdateWithoutStoryInput, StoryTagUncheckedUpdateWithoutStoryInput>
    create: XOR<StoryTagCreateWithoutStoryInput, StoryTagUncheckedCreateWithoutStoryInput>
  }

  export type StoryTagUpdateWithWhereUniqueWithoutStoryInput = {
    where: StoryTagWhereUniqueInput
    data: XOR<StoryTagUpdateWithoutStoryInput, StoryTagUncheckedUpdateWithoutStoryInput>
  }

  export type StoryTagUpdateManyWithWhereWithoutStoryInput = {
    where: StoryTagScalarWhereInput
    data: XOR<StoryTagUpdateManyMutationInput, StoryTagUncheckedUpdateManyWithoutStoryInput>
  }

  export type StoryTagScalarWhereInput = {
    AND?: StoryTagScalarWhereInput | StoryTagScalarWhereInput[]
    OR?: StoryTagScalarWhereInput[]
    NOT?: StoryTagScalarWhereInput | StoryTagScalarWhereInput[]
    id?: StringFilter<"StoryTag"> | string
    storyId?: StringFilter<"StoryTag"> | string
    tagId?: StringFilter<"StoryTag"> | string
    createdAt?: DateTimeFilter<"StoryTag"> | Date | string
    updatedAt?: DateTimeFilter<"StoryTag"> | Date | string
  }

  export type CharacterUpsertWithWhereUniqueWithoutStoryInput = {
    where: CharacterWhereUniqueInput
    update: XOR<CharacterUpdateWithoutStoryInput, CharacterUncheckedUpdateWithoutStoryInput>
    create: XOR<CharacterCreateWithoutStoryInput, CharacterUncheckedCreateWithoutStoryInput>
  }

  export type CharacterUpdateWithWhereUniqueWithoutStoryInput = {
    where: CharacterWhereUniqueInput
    data: XOR<CharacterUpdateWithoutStoryInput, CharacterUncheckedUpdateWithoutStoryInput>
  }

  export type CharacterUpdateManyWithWhereWithoutStoryInput = {
    where: CharacterScalarWhereInput
    data: XOR<CharacterUpdateManyMutationInput, CharacterUncheckedUpdateManyWithoutStoryInput>
  }

  export type CharacterScalarWhereInput = {
    AND?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
    OR?: CharacterScalarWhereInput[]
    NOT?: CharacterScalarWhereInput | CharacterScalarWhereInput[]
    id?: StringFilter<"Character"> | string
    storyId?: StringFilter<"Character"> | string
    pictureFileId?: StringNullableFilter<"Character"> | string | null
    firstName?: StringFilter<"Character"> | string
    middleName?: StringNullableFilter<"Character"> | string | null
    lastName?: StringNullableFilter<"Character"> | string | null
    nickname?: StringNullableFilter<"Character"> | string | null
    summary?: StringNullableFilter<"Character"> | string | null
    background?: StringNullableFilter<"Character"> | string | null
    personality?: StringNullableFilter<"Character"> | string | null
    personalityQuirks?: StringNullableFilter<"Character"> | string | null
    likes?: StringNullableFilter<"Character"> | string | null
    dislikes?: StringNullableFilter<"Character"> | string | null
    age?: StringNullableFilter<"Character"> | string | null
    gender?: StringNullableFilter<"Character"> | string | null
    sexualOrientation?: StringNullableFilter<"Character"> | string | null
    height?: IntNullableFilter<"Character"> | number | null
    hairColor?: StringNullableFilter<"Character"> | string | null
    eyeColor?: StringNullableFilter<"Character"> | string | null
    distinguishingFeatures?: StringNullableFilter<"Character"> | string | null
    writingStyle?: StringNullableFilter<"Character"> | string | null
    isMainCharacter?: BoolFilter<"Character"> | boolean
    laterVersionOfId?: StringNullableFilter<"Character"> | string | null
    significantActions?: JsonNullableFilter<"Character">
    createdAt?: DateTimeFilter<"Character"> | Date | string
    updatedAt?: DateTimeFilter<"Character"> | Date | string
  }

  export type LocationUpsertWithWhereUniqueWithoutStoryInput = {
    where: LocationWhereUniqueInput
    update: XOR<LocationUpdateWithoutStoryInput, LocationUncheckedUpdateWithoutStoryInput>
    create: XOR<LocationCreateWithoutStoryInput, LocationUncheckedCreateWithoutStoryInput>
  }

  export type LocationUpdateWithWhereUniqueWithoutStoryInput = {
    where: LocationWhereUniqueInput
    data: XOR<LocationUpdateWithoutStoryInput, LocationUncheckedUpdateWithoutStoryInput>
  }

  export type LocationUpdateManyWithWhereWithoutStoryInput = {
    where: LocationScalarWhereInput
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyWithoutStoryInput>
  }

  export type LocationScalarWhereInput = {
    AND?: LocationScalarWhereInput | LocationScalarWhereInput[]
    OR?: LocationScalarWhereInput[]
    NOT?: LocationScalarWhereInput | LocationScalarWhereInput[]
    id?: StringFilter<"Location"> | string
    storyId?: StringFilter<"Location"> | string
    name?: StringFilter<"Location"> | string
    pictureFileId?: StringNullableFilter<"Location"> | string | null
    description?: StringNullableFilter<"Location"> | string | null
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
  }

  export type PlotPointUpsertWithWhereUniqueWithoutStoryInput = {
    where: PlotPointWhereUniqueInput
    update: XOR<PlotPointUpdateWithoutStoryInput, PlotPointUncheckedUpdateWithoutStoryInput>
    create: XOR<PlotPointCreateWithoutStoryInput, PlotPointUncheckedCreateWithoutStoryInput>
  }

  export type PlotPointUpdateWithWhereUniqueWithoutStoryInput = {
    where: PlotPointWhereUniqueInput
    data: XOR<PlotPointUpdateWithoutStoryInput, PlotPointUncheckedUpdateWithoutStoryInput>
  }

  export type PlotPointUpdateManyWithWhereWithoutStoryInput = {
    where: PlotPointScalarWhereInput
    data: XOR<PlotPointUpdateManyMutationInput, PlotPointUncheckedUpdateManyWithoutStoryInput>
  }

  export type PlotPointScalarWhereInput = {
    AND?: PlotPointScalarWhereInput | PlotPointScalarWhereInput[]
    OR?: PlotPointScalarWhereInput[]
    NOT?: PlotPointScalarWhereInput | PlotPointScalarWhereInput[]
    id?: StringFilter<"PlotPoint"> | string
    storyId?: StringFilter<"PlotPoint"> | string
    title?: StringFilter<"PlotPoint"> | string
    summary?: StringNullableFilter<"PlotPoint"> | string | null
    state?: EnumPlotPointStateFilter<"PlotPoint"> | $Enums.PlotPointState
    createdAt?: DateTimeFilter<"PlotPoint"> | Date | string
    updatedAt?: DateTimeFilter<"PlotPoint"> | Date | string
  }

  export type ItemUpsertWithWhereUniqueWithoutStoryInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutStoryInput, ItemUncheckedUpdateWithoutStoryInput>
    create: XOR<ItemCreateWithoutStoryInput, ItemUncheckedCreateWithoutStoryInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutStoryInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutStoryInput, ItemUncheckedUpdateWithoutStoryInput>
  }

  export type ItemUpdateManyWithWhereWithoutStoryInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutStoryInput>
  }

  export type ItemScalarWhereInput = {
    AND?: ItemScalarWhereInput | ItemScalarWhereInput[]
    OR?: ItemScalarWhereInput[]
    NOT?: ItemScalarWhereInput | ItemScalarWhereInput[]
    id?: StringFilter<"Item"> | string
    storyId?: StringFilter<"Item"> | string
    name?: StringFilter<"Item"> | string
    createdAt?: DateTimeFilter<"Item"> | Date | string
    updatedAt?: DateTimeFilter<"Item"> | Date | string
  }

  export type StoryTagCreateWithoutTagInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutStoryTagsInput
  }

  export type StoryTagUncheckedCreateWithoutTagInput = {
    id?: string
    storyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryTagCreateOrConnectWithoutTagInput = {
    where: StoryTagWhereUniqueInput
    create: XOR<StoryTagCreateWithoutTagInput, StoryTagUncheckedCreateWithoutTagInput>
  }

  export type StoryTagCreateManyTagInputEnvelope = {
    data: StoryTagCreateManyTagInput | StoryTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type StoryTagUpsertWithWhereUniqueWithoutTagInput = {
    where: StoryTagWhereUniqueInput
    update: XOR<StoryTagUpdateWithoutTagInput, StoryTagUncheckedUpdateWithoutTagInput>
    create: XOR<StoryTagCreateWithoutTagInput, StoryTagUncheckedCreateWithoutTagInput>
  }

  export type StoryTagUpdateWithWhereUniqueWithoutTagInput = {
    where: StoryTagWhereUniqueInput
    data: XOR<StoryTagUpdateWithoutTagInput, StoryTagUncheckedUpdateWithoutTagInput>
  }

  export type StoryTagUpdateManyWithWhereWithoutTagInput = {
    where: StoryTagScalarWhereInput
    data: XOR<StoryTagUpdateManyMutationInput, StoryTagUncheckedUpdateManyWithoutTagInput>
  }

  export type StoryCreateWithoutStoryTagsInput = {
    id?: string
    name?: string
    summary?: string | null
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    owner: UserCreateNestedOneWithoutOwnedStoriesInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutStoryInput
    coverArtFile?: FileCreateNestedOneWithoutStoryCoverArtInput
    defaultProtagonist?: CharacterCreateNestedOneWithoutDefaultProtagonistForStoryInput
    books?: BookCreateNestedManyWithoutStoryInput
    files?: FileCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutStoryInput
    characters?: CharacterCreateNestedManyWithoutStoryInput
    locations?: LocationCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointCreateNestedManyWithoutStoryInput
    items?: ItemCreateNestedManyWithoutStoryInput
  }

  export type StoryUncheckedCreateWithoutStoryTagsInput = {
    id?: string
    name?: string
    summary?: string | null
    ownerId: number
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverArtFileId?: string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    defaultProtagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutStoryInput
    books?: BookUncheckedCreateNestedManyWithoutStoryInput
    files?: FileUncheckedCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutStoryInput
    characters?: CharacterUncheckedCreateNestedManyWithoutStoryInput
    locations?: LocationUncheckedCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointUncheckedCreateNestedManyWithoutStoryInput
    items?: ItemUncheckedCreateNestedManyWithoutStoryInput
  }

  export type StoryCreateOrConnectWithoutStoryTagsInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutStoryTagsInput, StoryUncheckedCreateWithoutStoryTagsInput>
  }

  export type TagCreateWithoutStoryTagsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagUncheckedCreateWithoutStoryTagsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagCreateOrConnectWithoutStoryTagsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutStoryTagsInput, TagUncheckedCreateWithoutStoryTagsInput>
  }

  export type StoryUpsertWithoutStoryTagsInput = {
    update: XOR<StoryUpdateWithoutStoryTagsInput, StoryUncheckedUpdateWithoutStoryTagsInput>
    create: XOR<StoryCreateWithoutStoryTagsInput, StoryUncheckedCreateWithoutStoryTagsInput>
    where?: StoryWhereInput
  }

  export type StoryUpdateToOneWithWhereWithoutStoryTagsInput = {
    where?: StoryWhereInput
    data: XOR<StoryUpdateWithoutStoryTagsInput, StoryUncheckedUpdateWithoutStoryTagsInput>
  }

  export type StoryUpdateWithoutStoryTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: UserUpdateOneRequiredWithoutOwnedStoriesNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutStoryNestedInput
    coverArtFile?: FileUpdateOneWithoutStoryCoverArtNestedInput
    defaultProtagonist?: CharacterUpdateOneWithoutDefaultProtagonistForStoryNestedInput
    books?: BookUpdateManyWithoutStoryNestedInput
    files?: FileUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutStoryNestedInput
    characters?: CharacterUpdateManyWithoutStoryNestedInput
    locations?: LocationUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUpdateManyWithoutStoryNestedInput
    items?: ItemUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateWithoutStoryTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    defaultProtagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutStoryNestedInput
    books?: BookUncheckedUpdateManyWithoutStoryNestedInput
    files?: FileUncheckedUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutStoryNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutStoryNestedInput
    locations?: LocationUncheckedUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUncheckedUpdateManyWithoutStoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutStoryNestedInput
  }

  export type TagUpsertWithoutStoryTagsInput = {
    update: XOR<TagUpdateWithoutStoryTagsInput, TagUncheckedUpdateWithoutStoryTagsInput>
    create: XOR<TagCreateWithoutStoryTagsInput, TagUncheckedCreateWithoutStoryTagsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutStoryTagsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutStoryTagsInput, TagUncheckedUpdateWithoutStoryTagsInput>
  }

  export type TagUpdateWithoutStoryTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateWithoutStoryTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryCreateWithoutStoryReadStatusesInput = {
    id?: string
    name?: string
    summary?: string | null
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    owner: UserCreateNestedOneWithoutOwnedStoriesInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutStoryInput
    coverArtFile?: FileCreateNestedOneWithoutStoryCoverArtInput
    defaultProtagonist?: CharacterCreateNestedOneWithoutDefaultProtagonistForStoryInput
    books?: BookCreateNestedManyWithoutStoryInput
    files?: FileCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagCreateNestedManyWithoutStoryInput
    characters?: CharacterCreateNestedManyWithoutStoryInput
    locations?: LocationCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointCreateNestedManyWithoutStoryInput
    items?: ItemCreateNestedManyWithoutStoryInput
  }

  export type StoryUncheckedCreateWithoutStoryReadStatusesInput = {
    id?: string
    name?: string
    summary?: string | null
    ownerId: number
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverArtFileId?: string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    defaultProtagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutStoryInput
    books?: BookUncheckedCreateNestedManyWithoutStoryInput
    files?: FileUncheckedCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagUncheckedCreateNestedManyWithoutStoryInput
    characters?: CharacterUncheckedCreateNestedManyWithoutStoryInput
    locations?: LocationUncheckedCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointUncheckedCreateNestedManyWithoutStoryInput
    items?: ItemUncheckedCreateNestedManyWithoutStoryInput
  }

  export type StoryCreateOrConnectWithoutStoryReadStatusesInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutStoryReadStatusesInput, StoryUncheckedCreateWithoutStoryReadStatusesInput>
  }

  export type UserCreateWithoutStoryReadStatusesInput = {
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    ownedStories?: StoryCreateNestedManyWithoutOwnerInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutOwnerInput
    accessKeys?: AccessKeyCreateNestedManyWithoutOwnerInput
    paragraphComments?: ParagraphCommentCreateNestedManyWithoutOwnerInput
    files?: FileCreateNestedManyWithoutOwnerInput
    sessions?: SessionCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutStoryReadStatusesInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    ownedStories?: StoryUncheckedCreateNestedManyWithoutOwnerInput
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutOwnerInput
    accessKeys?: AccessKeyUncheckedCreateNestedManyWithoutOwnerInput
    paragraphComments?: ParagraphCommentUncheckedCreateNestedManyWithoutOwnerInput
    files?: FileUncheckedCreateNestedManyWithoutOwnerInput
    sessions?: SessionUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutStoryReadStatusesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStoryReadStatusesInput, UserUncheckedCreateWithoutStoryReadStatusesInput>
  }

  export type ChapterCreateWithoutStoryReadStatusInput = {
    id?: string
    name?: string
    summary?: string | null
    publishedOn?: Date | string | null
    sortOrder: number
    royalRoadId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nodeType?: string
    arc: ArcCreateNestedOneWithoutChaptersInput
    scenes?: SceneCreateNestedManyWithoutChapterInput
    publishingStatus?: ChapterPublishingCreateNestedManyWithoutChapterInput
  }

  export type ChapterUncheckedCreateWithoutStoryReadStatusInput = {
    id?: string
    name?: string
    summary?: string | null
    arcId: string
    publishedOn?: Date | string | null
    sortOrder: number
    royalRoadId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nodeType?: string
    scenes?: SceneUncheckedCreateNestedManyWithoutChapterInput
    publishingStatus?: ChapterPublishingUncheckedCreateNestedManyWithoutChapterInput
  }

  export type ChapterCreateOrConnectWithoutStoryReadStatusInput = {
    where: ChapterWhereUniqueInput
    create: XOR<ChapterCreateWithoutStoryReadStatusInput, ChapterUncheckedCreateWithoutStoryReadStatusInput>
  }

  export type StoryUpsertWithoutStoryReadStatusesInput = {
    update: XOR<StoryUpdateWithoutStoryReadStatusesInput, StoryUncheckedUpdateWithoutStoryReadStatusesInput>
    create: XOR<StoryCreateWithoutStoryReadStatusesInput, StoryUncheckedCreateWithoutStoryReadStatusesInput>
    where?: StoryWhereInput
  }

  export type StoryUpdateToOneWithWhereWithoutStoryReadStatusesInput = {
    where?: StoryWhereInput
    data: XOR<StoryUpdateWithoutStoryReadStatusesInput, StoryUncheckedUpdateWithoutStoryReadStatusesInput>
  }

  export type StoryUpdateWithoutStoryReadStatusesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: UserUpdateOneRequiredWithoutOwnedStoriesNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutStoryNestedInput
    coverArtFile?: FileUpdateOneWithoutStoryCoverArtNestedInput
    defaultProtagonist?: CharacterUpdateOneWithoutDefaultProtagonistForStoryNestedInput
    books?: BookUpdateManyWithoutStoryNestedInput
    files?: FileUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUpdateManyWithoutStoryNestedInput
    characters?: CharacterUpdateManyWithoutStoryNestedInput
    locations?: LocationUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUpdateManyWithoutStoryNestedInput
    items?: ItemUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateWithoutStoryReadStatusesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    defaultProtagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutStoryNestedInput
    books?: BookUncheckedUpdateManyWithoutStoryNestedInput
    files?: FileUncheckedUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUncheckedUpdateManyWithoutStoryNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutStoryNestedInput
    locations?: LocationUncheckedUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUncheckedUpdateManyWithoutStoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutStoryNestedInput
  }

  export type UserUpsertWithoutStoryReadStatusesInput = {
    update: XOR<UserUpdateWithoutStoryReadStatusesInput, UserUncheckedUpdateWithoutStoryReadStatusesInput>
    create: XOR<UserCreateWithoutStoryReadStatusesInput, UserUncheckedCreateWithoutStoryReadStatusesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStoryReadStatusesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStoryReadStatusesInput, UserUncheckedUpdateWithoutStoryReadStatusesInput>
  }

  export type UserUpdateWithoutStoryReadStatusesInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedStories?: StoryUpdateManyWithoutOwnerNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutOwnerNestedInput
    accessKeys?: AccessKeyUpdateManyWithoutOwnerNestedInput
    paragraphComments?: ParagraphCommentUpdateManyWithoutOwnerNestedInput
    files?: FileUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutStoryReadStatusesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedStories?: StoryUncheckedUpdateManyWithoutOwnerNestedInput
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutOwnerNestedInput
    accessKeys?: AccessKeyUncheckedUpdateManyWithoutOwnerNestedInput
    paragraphComments?: ParagraphCommentUncheckedUpdateManyWithoutOwnerNestedInput
    files?: FileUncheckedUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type ChapterUpsertWithoutStoryReadStatusInput = {
    update: XOR<ChapterUpdateWithoutStoryReadStatusInput, ChapterUncheckedUpdateWithoutStoryReadStatusInput>
    create: XOR<ChapterCreateWithoutStoryReadStatusInput, ChapterUncheckedCreateWithoutStoryReadStatusInput>
    where?: ChapterWhereInput
  }

  export type ChapterUpdateToOneWithWhereWithoutStoryReadStatusInput = {
    where?: ChapterWhereInput
    data: XOR<ChapterUpdateWithoutStoryReadStatusInput, ChapterUncheckedUpdateWithoutStoryReadStatusInput>
  }

  export type ChapterUpdateWithoutStoryReadStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    publishedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodeType?: StringFieldUpdateOperationsInput | string
    arc?: ArcUpdateOneRequiredWithoutChaptersNestedInput
    scenes?: SceneUpdateManyWithoutChapterNestedInput
    publishingStatus?: ChapterPublishingUpdateManyWithoutChapterNestedInput
  }

  export type ChapterUncheckedUpdateWithoutStoryReadStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    arcId?: StringFieldUpdateOperationsInput | string
    publishedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodeType?: StringFieldUpdateOperationsInput | string
    scenes?: SceneUncheckedUpdateManyWithoutChapterNestedInput
    publishingStatus?: ChapterPublishingUncheckedUpdateManyWithoutChapterNestedInput
  }

  export type StoryCreateWithoutBooksInput = {
    id?: string
    name?: string
    summary?: string | null
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    owner: UserCreateNestedOneWithoutOwnedStoriesInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutStoryInput
    coverArtFile?: FileCreateNestedOneWithoutStoryCoverArtInput
    defaultProtagonist?: CharacterCreateNestedOneWithoutDefaultProtagonistForStoryInput
    files?: FileCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagCreateNestedManyWithoutStoryInput
    characters?: CharacterCreateNestedManyWithoutStoryInput
    locations?: LocationCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointCreateNestedManyWithoutStoryInput
    items?: ItemCreateNestedManyWithoutStoryInput
  }

  export type StoryUncheckedCreateWithoutBooksInput = {
    id?: string
    name?: string
    summary?: string | null
    ownerId: number
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverArtFileId?: string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    defaultProtagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutStoryInput
    files?: FileUncheckedCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagUncheckedCreateNestedManyWithoutStoryInput
    characters?: CharacterUncheckedCreateNestedManyWithoutStoryInput
    locations?: LocationUncheckedCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointUncheckedCreateNestedManyWithoutStoryInput
    items?: ItemUncheckedCreateNestedManyWithoutStoryInput
  }

  export type StoryCreateOrConnectWithoutBooksInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutBooksInput, StoryUncheckedCreateWithoutBooksInput>
  }

  export type FileCreateWithoutBookCoverArtInput = {
    id?: string
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutFilesInput
    story?: StoryCreateNestedOneWithoutFilesInput
    storyCoverArt?: StoryCreateNestedManyWithoutCoverArtFileInput
    bookSpineArt?: BookCreateNestedManyWithoutSpineArtFileInput
    characterPicture?: CharacterCreateNestedManyWithoutPictureFileInput
    locationPicture?: LocationCreateNestedManyWithoutPictureFileInput
  }

  export type FileUncheckedCreateWithoutBookCoverArtInput = {
    id?: string
    ownerId: number
    storyId?: string | null
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    storyCoverArt?: StoryUncheckedCreateNestedManyWithoutCoverArtFileInput
    bookSpineArt?: BookUncheckedCreateNestedManyWithoutSpineArtFileInput
    characterPicture?: CharacterUncheckedCreateNestedManyWithoutPictureFileInput
    locationPicture?: LocationUncheckedCreateNestedManyWithoutPictureFileInput
  }

  export type FileCreateOrConnectWithoutBookCoverArtInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutBookCoverArtInput, FileUncheckedCreateWithoutBookCoverArtInput>
  }

  export type FileCreateWithoutBookSpineArtInput = {
    id?: string
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutFilesInput
    story?: StoryCreateNestedOneWithoutFilesInput
    storyCoverArt?: StoryCreateNestedManyWithoutCoverArtFileInput
    bookCoverArt?: BookCreateNestedManyWithoutCoverArtFileInput
    characterPicture?: CharacterCreateNestedManyWithoutPictureFileInput
    locationPicture?: LocationCreateNestedManyWithoutPictureFileInput
  }

  export type FileUncheckedCreateWithoutBookSpineArtInput = {
    id?: string
    ownerId: number
    storyId?: string | null
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    storyCoverArt?: StoryUncheckedCreateNestedManyWithoutCoverArtFileInput
    bookCoverArt?: BookUncheckedCreateNestedManyWithoutCoverArtFileInput
    characterPicture?: CharacterUncheckedCreateNestedManyWithoutPictureFileInput
    locationPicture?: LocationUncheckedCreateNestedManyWithoutPictureFileInput
  }

  export type FileCreateOrConnectWithoutBookSpineArtInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutBookSpineArtInput, FileUncheckedCreateWithoutBookSpineArtInput>
  }

  export type ArcCreateWithoutBookInput = {
    id?: string
    name?: string
    summary?: string | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chapters?: ChapterCreateNestedManyWithoutArcInput
  }

  export type ArcUncheckedCreateWithoutBookInput = {
    id?: string
    name?: string
    summary?: string | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chapters?: ChapterUncheckedCreateNestedManyWithoutArcInput
  }

  export type ArcCreateOrConnectWithoutBookInput = {
    where: ArcWhereUniqueInput
    create: XOR<ArcCreateWithoutBookInput, ArcUncheckedCreateWithoutBookInput>
  }

  export type ArcCreateManyBookInputEnvelope = {
    data: ArcCreateManyBookInput | ArcCreateManyBookInput[]
    skipDuplicates?: boolean
  }

  export type StoryUpsertWithoutBooksInput = {
    update: XOR<StoryUpdateWithoutBooksInput, StoryUncheckedUpdateWithoutBooksInput>
    create: XOR<StoryCreateWithoutBooksInput, StoryUncheckedCreateWithoutBooksInput>
    where?: StoryWhereInput
  }

  export type StoryUpdateToOneWithWhereWithoutBooksInput = {
    where?: StoryWhereInput
    data: XOR<StoryUpdateWithoutBooksInput, StoryUncheckedUpdateWithoutBooksInput>
  }

  export type StoryUpdateWithoutBooksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: UserUpdateOneRequiredWithoutOwnedStoriesNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutStoryNestedInput
    coverArtFile?: FileUpdateOneWithoutStoryCoverArtNestedInput
    defaultProtagonist?: CharacterUpdateOneWithoutDefaultProtagonistForStoryNestedInput
    files?: FileUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUpdateManyWithoutStoryNestedInput
    characters?: CharacterUpdateManyWithoutStoryNestedInput
    locations?: LocationUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUpdateManyWithoutStoryNestedInput
    items?: ItemUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateWithoutBooksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    defaultProtagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutStoryNestedInput
    files?: FileUncheckedUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUncheckedUpdateManyWithoutStoryNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutStoryNestedInput
    locations?: LocationUncheckedUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUncheckedUpdateManyWithoutStoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutStoryNestedInput
  }

  export type FileUpsertWithoutBookCoverArtInput = {
    update: XOR<FileUpdateWithoutBookCoverArtInput, FileUncheckedUpdateWithoutBookCoverArtInput>
    create: XOR<FileCreateWithoutBookCoverArtInput, FileUncheckedCreateWithoutBookCoverArtInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutBookCoverArtInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutBookCoverArtInput, FileUncheckedUpdateWithoutBookCoverArtInput>
  }

  export type FileUpdateWithoutBookCoverArtInput = {
    id?: StringFieldUpdateOperationsInput | string
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutFilesNestedInput
    story?: StoryUpdateOneWithoutFilesNestedInput
    storyCoverArt?: StoryUpdateManyWithoutCoverArtFileNestedInput
    bookSpineArt?: BookUpdateManyWithoutSpineArtFileNestedInput
    characterPicture?: CharacterUpdateManyWithoutPictureFileNestedInput
    locationPicture?: LocationUpdateManyWithoutPictureFileNestedInput
  }

  export type FileUncheckedUpdateWithoutBookCoverArtInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    storyId?: NullableStringFieldUpdateOperationsInput | string | null
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storyCoverArt?: StoryUncheckedUpdateManyWithoutCoverArtFileNestedInput
    bookSpineArt?: BookUncheckedUpdateManyWithoutSpineArtFileNestedInput
    characterPicture?: CharacterUncheckedUpdateManyWithoutPictureFileNestedInput
    locationPicture?: LocationUncheckedUpdateManyWithoutPictureFileNestedInput
  }

  export type FileUpsertWithoutBookSpineArtInput = {
    update: XOR<FileUpdateWithoutBookSpineArtInput, FileUncheckedUpdateWithoutBookSpineArtInput>
    create: XOR<FileCreateWithoutBookSpineArtInput, FileUncheckedCreateWithoutBookSpineArtInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutBookSpineArtInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutBookSpineArtInput, FileUncheckedUpdateWithoutBookSpineArtInput>
  }

  export type FileUpdateWithoutBookSpineArtInput = {
    id?: StringFieldUpdateOperationsInput | string
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutFilesNestedInput
    story?: StoryUpdateOneWithoutFilesNestedInput
    storyCoverArt?: StoryUpdateManyWithoutCoverArtFileNestedInput
    bookCoverArt?: BookUpdateManyWithoutCoverArtFileNestedInput
    characterPicture?: CharacterUpdateManyWithoutPictureFileNestedInput
    locationPicture?: LocationUpdateManyWithoutPictureFileNestedInput
  }

  export type FileUncheckedUpdateWithoutBookSpineArtInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    storyId?: NullableStringFieldUpdateOperationsInput | string | null
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storyCoverArt?: StoryUncheckedUpdateManyWithoutCoverArtFileNestedInput
    bookCoverArt?: BookUncheckedUpdateManyWithoutCoverArtFileNestedInput
    characterPicture?: CharacterUncheckedUpdateManyWithoutPictureFileNestedInput
    locationPicture?: LocationUncheckedUpdateManyWithoutPictureFileNestedInput
  }

  export type ArcUpsertWithWhereUniqueWithoutBookInput = {
    where: ArcWhereUniqueInput
    update: XOR<ArcUpdateWithoutBookInput, ArcUncheckedUpdateWithoutBookInput>
    create: XOR<ArcCreateWithoutBookInput, ArcUncheckedCreateWithoutBookInput>
  }

  export type ArcUpdateWithWhereUniqueWithoutBookInput = {
    where: ArcWhereUniqueInput
    data: XOR<ArcUpdateWithoutBookInput, ArcUncheckedUpdateWithoutBookInput>
  }

  export type ArcUpdateManyWithWhereWithoutBookInput = {
    where: ArcScalarWhereInput
    data: XOR<ArcUpdateManyMutationInput, ArcUncheckedUpdateManyWithoutBookInput>
  }

  export type ArcScalarWhereInput = {
    AND?: ArcScalarWhereInput | ArcScalarWhereInput[]
    OR?: ArcScalarWhereInput[]
    NOT?: ArcScalarWhereInput | ArcScalarWhereInput[]
    id?: StringFilter<"Arc"> | string
    name?: StringFilter<"Arc"> | string
    summary?: StringNullableFilter<"Arc"> | string | null
    bookId?: StringFilter<"Arc"> | string
    sortOrder?: IntFilter<"Arc"> | number
    nodeType?: StringFilter<"Arc"> | string
    createdAt?: DateTimeFilter<"Arc"> | Date | string
    updatedAt?: DateTimeFilter<"Arc"> | Date | string
  }

  export type BookCreateWithoutArcsInput = {
    id?: string
    name?: string
    summary?: string | null
    pages?: number | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutBooksInput
    coverArtFile?: FileCreateNestedOneWithoutBookCoverArtInput
    spineArtFile?: FileCreateNestedOneWithoutBookSpineArtInput
  }

  export type BookUncheckedCreateWithoutArcsInput = {
    id?: string
    name?: string
    summary?: string | null
    storyId: string
    coverArtFileId?: string | null
    spineArtFileId?: string | null
    pages?: number | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookCreateOrConnectWithoutArcsInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutArcsInput, BookUncheckedCreateWithoutArcsInput>
  }

  export type ChapterCreateWithoutArcInput = {
    id?: string
    name?: string
    summary?: string | null
    publishedOn?: Date | string | null
    sortOrder: number
    royalRoadId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nodeType?: string
    scenes?: SceneCreateNestedManyWithoutChapterInput
    StoryReadStatus?: StoryReadStatusCreateNestedManyWithoutLastChapterInput
    publishingStatus?: ChapterPublishingCreateNestedManyWithoutChapterInput
  }

  export type ChapterUncheckedCreateWithoutArcInput = {
    id?: string
    name?: string
    summary?: string | null
    publishedOn?: Date | string | null
    sortOrder: number
    royalRoadId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nodeType?: string
    scenes?: SceneUncheckedCreateNestedManyWithoutChapterInput
    StoryReadStatus?: StoryReadStatusUncheckedCreateNestedManyWithoutLastChapterInput
    publishingStatus?: ChapterPublishingUncheckedCreateNestedManyWithoutChapterInput
  }

  export type ChapterCreateOrConnectWithoutArcInput = {
    where: ChapterWhereUniqueInput
    create: XOR<ChapterCreateWithoutArcInput, ChapterUncheckedCreateWithoutArcInput>
  }

  export type ChapterCreateManyArcInputEnvelope = {
    data: ChapterCreateManyArcInput | ChapterCreateManyArcInput[]
    skipDuplicates?: boolean
  }

  export type BookUpsertWithoutArcsInput = {
    update: XOR<BookUpdateWithoutArcsInput, BookUncheckedUpdateWithoutArcsInput>
    create: XOR<BookCreateWithoutArcsInput, BookUncheckedCreateWithoutArcsInput>
    where?: BookWhereInput
  }

  export type BookUpdateToOneWithWhereWithoutArcsInput = {
    where?: BookWhereInput
    data: XOR<BookUpdateWithoutArcsInput, BookUncheckedUpdateWithoutArcsInput>
  }

  export type BookUpdateWithoutArcsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutBooksNestedInput
    coverArtFile?: FileUpdateOneWithoutBookCoverArtNestedInput
    spineArtFile?: FileUpdateOneWithoutBookSpineArtNestedInput
  }

  export type BookUncheckedUpdateWithoutArcsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    storyId?: StringFieldUpdateOperationsInput | string
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    spineArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterUpsertWithWhereUniqueWithoutArcInput = {
    where: ChapterWhereUniqueInput
    update: XOR<ChapterUpdateWithoutArcInput, ChapterUncheckedUpdateWithoutArcInput>
    create: XOR<ChapterCreateWithoutArcInput, ChapterUncheckedCreateWithoutArcInput>
  }

  export type ChapterUpdateWithWhereUniqueWithoutArcInput = {
    where: ChapterWhereUniqueInput
    data: XOR<ChapterUpdateWithoutArcInput, ChapterUncheckedUpdateWithoutArcInput>
  }

  export type ChapterUpdateManyWithWhereWithoutArcInput = {
    where: ChapterScalarWhereInput
    data: XOR<ChapterUpdateManyMutationInput, ChapterUncheckedUpdateManyWithoutArcInput>
  }

  export type ChapterScalarWhereInput = {
    AND?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
    OR?: ChapterScalarWhereInput[]
    NOT?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
    id?: StringFilter<"Chapter"> | string
    name?: StringFilter<"Chapter"> | string
    summary?: StringNullableFilter<"Chapter"> | string | null
    arcId?: StringFilter<"Chapter"> | string
    publishedOn?: DateTimeNullableFilter<"Chapter"> | Date | string | null
    sortOrder?: IntFilter<"Chapter"> | number
    royalRoadId?: IntNullableFilter<"Chapter"> | number | null
    createdAt?: DateTimeFilter<"Chapter"> | Date | string
    updatedAt?: DateTimeFilter<"Chapter"> | Date | string
    nodeType?: StringFilter<"Chapter"> | string
  }

  export type ArcCreateWithoutChaptersInput = {
    id?: string
    name?: string
    summary?: string | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    book: BookCreateNestedOneWithoutArcsInput
  }

  export type ArcUncheckedCreateWithoutChaptersInput = {
    id?: string
    name?: string
    summary?: string | null
    bookId: string
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArcCreateOrConnectWithoutChaptersInput = {
    where: ArcWhereUniqueInput
    create: XOR<ArcCreateWithoutChaptersInput, ArcUncheckedCreateWithoutChaptersInput>
  }

  export type SceneCreateWithoutChapterInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    protagonist?: CharacterCreateNestedOneWithoutSceneProtagonistInInput
    location?: LocationCreateNestedOneWithoutScenesInput
    paragraphs?: ParagraphCreateNestedManyWithoutSceneInput
    participatingCharacters?: SceneCharacterCreateNestedManyWithoutSceneInput
    referredCharacters?: SceneReferredCharacterCreateNestedManyWithoutSceneInput
  }

  export type SceneUncheckedCreateWithoutChapterInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    protagonistId?: string | null
    locationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paragraphs?: ParagraphUncheckedCreateNestedManyWithoutSceneInput
    participatingCharacters?: SceneCharacterUncheckedCreateNestedManyWithoutSceneInput
    referredCharacters?: SceneReferredCharacterUncheckedCreateNestedManyWithoutSceneInput
  }

  export type SceneCreateOrConnectWithoutChapterInput = {
    where: SceneWhereUniqueInput
    create: XOR<SceneCreateWithoutChapterInput, SceneUncheckedCreateWithoutChapterInput>
  }

  export type SceneCreateManyChapterInputEnvelope = {
    data: SceneCreateManyChapterInput | SceneCreateManyChapterInput[]
    skipDuplicates?: boolean
  }

  export type StoryReadStatusCreateWithoutLastChapterInput = {
    id?: string
    lastChapterReadAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutStoryReadStatusesInput
    user: UserCreateNestedOneWithoutStoryReadStatusesInput
  }

  export type StoryReadStatusUncheckedCreateWithoutLastChapterInput = {
    id?: string
    storyId: string
    userId: number
    lastChapterReadAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryReadStatusCreateOrConnectWithoutLastChapterInput = {
    where: StoryReadStatusWhereUniqueInput
    create: XOR<StoryReadStatusCreateWithoutLastChapterInput, StoryReadStatusUncheckedCreateWithoutLastChapterInput>
  }

  export type StoryReadStatusCreateManyLastChapterInputEnvelope = {
    data: StoryReadStatusCreateManyLastChapterInput | StoryReadStatusCreateManyLastChapterInput[]
    skipDuplicates?: boolean
  }

  export type ChapterPublishingCreateWithoutChapterInput = {
    id?: string
    platform: $Enums.PublishingPlatform
    status?: $Enums.PublishingStatus
    platformId?: string | null
    publishedAt?: Date | string | null
    lastAttempt?: Date | string | null
    errorMessage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChapterPublishingUncheckedCreateWithoutChapterInput = {
    id?: string
    platform: $Enums.PublishingPlatform
    status?: $Enums.PublishingStatus
    platformId?: string | null
    publishedAt?: Date | string | null
    lastAttempt?: Date | string | null
    errorMessage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChapterPublishingCreateOrConnectWithoutChapterInput = {
    where: ChapterPublishingWhereUniqueInput
    create: XOR<ChapterPublishingCreateWithoutChapterInput, ChapterPublishingUncheckedCreateWithoutChapterInput>
  }

  export type ChapterPublishingCreateManyChapterInputEnvelope = {
    data: ChapterPublishingCreateManyChapterInput | ChapterPublishingCreateManyChapterInput[]
    skipDuplicates?: boolean
  }

  export type ArcUpsertWithoutChaptersInput = {
    update: XOR<ArcUpdateWithoutChaptersInput, ArcUncheckedUpdateWithoutChaptersInput>
    create: XOR<ArcCreateWithoutChaptersInput, ArcUncheckedCreateWithoutChaptersInput>
    where?: ArcWhereInput
  }

  export type ArcUpdateToOneWithWhereWithoutChaptersInput = {
    where?: ArcWhereInput
    data: XOR<ArcUpdateWithoutChaptersInput, ArcUncheckedUpdateWithoutChaptersInput>
  }

  export type ArcUpdateWithoutChaptersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    book?: BookUpdateOneRequiredWithoutArcsNestedInput
  }

  export type ArcUncheckedUpdateWithoutChaptersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    bookId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneUpsertWithWhereUniqueWithoutChapterInput = {
    where: SceneWhereUniqueInput
    update: XOR<SceneUpdateWithoutChapterInput, SceneUncheckedUpdateWithoutChapterInput>
    create: XOR<SceneCreateWithoutChapterInput, SceneUncheckedCreateWithoutChapterInput>
  }

  export type SceneUpdateWithWhereUniqueWithoutChapterInput = {
    where: SceneWhereUniqueInput
    data: XOR<SceneUpdateWithoutChapterInput, SceneUncheckedUpdateWithoutChapterInput>
  }

  export type SceneUpdateManyWithWhereWithoutChapterInput = {
    where: SceneScalarWhereInput
    data: XOR<SceneUpdateManyMutationInput, SceneUncheckedUpdateManyWithoutChapterInput>
  }

  export type SceneScalarWhereInput = {
    AND?: SceneScalarWhereInput | SceneScalarWhereInput[]
    OR?: SceneScalarWhereInput[]
    NOT?: SceneScalarWhereInput | SceneScalarWhereInput[]
    id?: StringFilter<"Scene"> | string
    name?: StringFilter<"Scene"> | string
    summary?: StringNullableFilter<"Scene"> | string | null
    body?: StringFilter<"Scene"> | string
    chapterId?: StringFilter<"Scene"> | string
    sortOrder?: IntFilter<"Scene"> | number
    nodeType?: StringFilter<"Scene"> | string
    perspective?: EnumPerspectiveNullableFilter<"Scene"> | $Enums.Perspective | null
    protagonistId?: StringNullableFilter<"Scene"> | string | null
    locationId?: StringNullableFilter<"Scene"> | string | null
    createdAt?: DateTimeFilter<"Scene"> | Date | string
    updatedAt?: DateTimeFilter<"Scene"> | Date | string
  }

  export type StoryReadStatusUpsertWithWhereUniqueWithoutLastChapterInput = {
    where: StoryReadStatusWhereUniqueInput
    update: XOR<StoryReadStatusUpdateWithoutLastChapterInput, StoryReadStatusUncheckedUpdateWithoutLastChapterInput>
    create: XOR<StoryReadStatusCreateWithoutLastChapterInput, StoryReadStatusUncheckedCreateWithoutLastChapterInput>
  }

  export type StoryReadStatusUpdateWithWhereUniqueWithoutLastChapterInput = {
    where: StoryReadStatusWhereUniqueInput
    data: XOR<StoryReadStatusUpdateWithoutLastChapterInput, StoryReadStatusUncheckedUpdateWithoutLastChapterInput>
  }

  export type StoryReadStatusUpdateManyWithWhereWithoutLastChapterInput = {
    where: StoryReadStatusScalarWhereInput
    data: XOR<StoryReadStatusUpdateManyMutationInput, StoryReadStatusUncheckedUpdateManyWithoutLastChapterInput>
  }

  export type ChapterPublishingUpsertWithWhereUniqueWithoutChapterInput = {
    where: ChapterPublishingWhereUniqueInput
    update: XOR<ChapterPublishingUpdateWithoutChapterInput, ChapterPublishingUncheckedUpdateWithoutChapterInput>
    create: XOR<ChapterPublishingCreateWithoutChapterInput, ChapterPublishingUncheckedCreateWithoutChapterInput>
  }

  export type ChapterPublishingUpdateWithWhereUniqueWithoutChapterInput = {
    where: ChapterPublishingWhereUniqueInput
    data: XOR<ChapterPublishingUpdateWithoutChapterInput, ChapterPublishingUncheckedUpdateWithoutChapterInput>
  }

  export type ChapterPublishingUpdateManyWithWhereWithoutChapterInput = {
    where: ChapterPublishingScalarWhereInput
    data: XOR<ChapterPublishingUpdateManyMutationInput, ChapterPublishingUncheckedUpdateManyWithoutChapterInput>
  }

  export type ChapterPublishingScalarWhereInput = {
    AND?: ChapterPublishingScalarWhereInput | ChapterPublishingScalarWhereInput[]
    OR?: ChapterPublishingScalarWhereInput[]
    NOT?: ChapterPublishingScalarWhereInput | ChapterPublishingScalarWhereInput[]
    id?: StringFilter<"ChapterPublishing"> | string
    chapterId?: StringFilter<"ChapterPublishing"> | string
    platform?: EnumPublishingPlatformFilter<"ChapterPublishing"> | $Enums.PublishingPlatform
    status?: EnumPublishingStatusFilter<"ChapterPublishing"> | $Enums.PublishingStatus
    platformId?: StringNullableFilter<"ChapterPublishing"> | string | null
    publishedAt?: DateTimeNullableFilter<"ChapterPublishing"> | Date | string | null
    lastAttempt?: DateTimeNullableFilter<"ChapterPublishing"> | Date | string | null
    errorMessage?: StringNullableFilter<"ChapterPublishing"> | string | null
    createdAt?: DateTimeFilter<"ChapterPublishing"> | Date | string
    updatedAt?: DateTimeFilter<"ChapterPublishing"> | Date | string
  }

  export type ChapterCreateWithoutScenesInput = {
    id?: string
    name?: string
    summary?: string | null
    publishedOn?: Date | string | null
    sortOrder: number
    royalRoadId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nodeType?: string
    arc: ArcCreateNestedOneWithoutChaptersInput
    StoryReadStatus?: StoryReadStatusCreateNestedManyWithoutLastChapterInput
    publishingStatus?: ChapterPublishingCreateNestedManyWithoutChapterInput
  }

  export type ChapterUncheckedCreateWithoutScenesInput = {
    id?: string
    name?: string
    summary?: string | null
    arcId: string
    publishedOn?: Date | string | null
    sortOrder: number
    royalRoadId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nodeType?: string
    StoryReadStatus?: StoryReadStatusUncheckedCreateNestedManyWithoutLastChapterInput
    publishingStatus?: ChapterPublishingUncheckedCreateNestedManyWithoutChapterInput
  }

  export type ChapterCreateOrConnectWithoutScenesInput = {
    where: ChapterWhereUniqueInput
    create: XOR<ChapterCreateWithoutScenesInput, ChapterUncheckedCreateWithoutScenesInput>
  }

  export type CharacterCreateWithoutSceneProtagonistInInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutCharactersInput
    pictureFile?: FileCreateNestedOneWithoutCharacterPictureInput
    laterVersionOf?: CharacterCreateNestedOneWithoutPreviousVersionInput
    previousVersion?: CharacterCreateNestedManyWithoutLaterVersionOfInput
    defaultProtagonistForStory?: StoryCreateNestedManyWithoutDefaultProtagonistInput
    participatingInScenes?: SceneCharacterCreateNestedManyWithoutCharacterInput
    referredInScenes?: SceneReferredCharacterCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutSceneProtagonistInInput = {
    id?: string
    storyId: string
    pictureFileId?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    laterVersionOfId?: string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    previousVersion?: CharacterUncheckedCreateNestedManyWithoutLaterVersionOfInput
    defaultProtagonistForStory?: StoryUncheckedCreateNestedManyWithoutDefaultProtagonistInput
    participatingInScenes?: SceneCharacterUncheckedCreateNestedManyWithoutCharacterInput
    referredInScenes?: SceneReferredCharacterUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutSceneProtagonistInInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutSceneProtagonistInInput, CharacterUncheckedCreateWithoutSceneProtagonistInInput>
  }

  export type LocationCreateWithoutScenesInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutLocationsInput
    pictureFile?: FileCreateNestedOneWithoutLocationPictureInput
  }

  export type LocationUncheckedCreateWithoutScenesInput = {
    id?: string
    storyId: string
    name: string
    pictureFileId?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationCreateOrConnectWithoutScenesInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutScenesInput, LocationUncheckedCreateWithoutScenesInput>
  }

  export type ParagraphCreateWithoutSceneInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder: number
    paragraphRevisions?: ParagraphRevisionCreateNestedManyWithoutParagraphInput
  }

  export type ParagraphUncheckedCreateWithoutSceneInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder: number
    paragraphRevisions?: ParagraphRevisionUncheckedCreateNestedManyWithoutParagraphInput
  }

  export type ParagraphCreateOrConnectWithoutSceneInput = {
    where: ParagraphWhereUniqueInput
    create: XOR<ParagraphCreateWithoutSceneInput, ParagraphUncheckedCreateWithoutSceneInput>
  }

  export type ParagraphCreateManySceneInputEnvelope = {
    data: ParagraphCreateManySceneInput | ParagraphCreateManySceneInput[]
    skipDuplicates?: boolean
  }

  export type SceneCharacterCreateWithoutSceneInput = {
    assignedAt?: Date | string
    character: CharacterCreateNestedOneWithoutParticipatingInScenesInput
  }

  export type SceneCharacterUncheckedCreateWithoutSceneInput = {
    characterId: string
    assignedAt?: Date | string
  }

  export type SceneCharacterCreateOrConnectWithoutSceneInput = {
    where: SceneCharacterWhereUniqueInput
    create: XOR<SceneCharacterCreateWithoutSceneInput, SceneCharacterUncheckedCreateWithoutSceneInput>
  }

  export type SceneCharacterCreateManySceneInputEnvelope = {
    data: SceneCharacterCreateManySceneInput | SceneCharacterCreateManySceneInput[]
    skipDuplicates?: boolean
  }

  export type SceneReferredCharacterCreateWithoutSceneInput = {
    assignedAt?: Date | string
    character: CharacterCreateNestedOneWithoutReferredInScenesInput
  }

  export type SceneReferredCharacterUncheckedCreateWithoutSceneInput = {
    characterId: string
    assignedAt?: Date | string
  }

  export type SceneReferredCharacterCreateOrConnectWithoutSceneInput = {
    where: SceneReferredCharacterWhereUniqueInput
    create: XOR<SceneReferredCharacterCreateWithoutSceneInput, SceneReferredCharacterUncheckedCreateWithoutSceneInput>
  }

  export type SceneReferredCharacterCreateManySceneInputEnvelope = {
    data: SceneReferredCharacterCreateManySceneInput | SceneReferredCharacterCreateManySceneInput[]
    skipDuplicates?: boolean
  }

  export type ChapterUpsertWithoutScenesInput = {
    update: XOR<ChapterUpdateWithoutScenesInput, ChapterUncheckedUpdateWithoutScenesInput>
    create: XOR<ChapterCreateWithoutScenesInput, ChapterUncheckedCreateWithoutScenesInput>
    where?: ChapterWhereInput
  }

  export type ChapterUpdateToOneWithWhereWithoutScenesInput = {
    where?: ChapterWhereInput
    data: XOR<ChapterUpdateWithoutScenesInput, ChapterUncheckedUpdateWithoutScenesInput>
  }

  export type ChapterUpdateWithoutScenesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    publishedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodeType?: StringFieldUpdateOperationsInput | string
    arc?: ArcUpdateOneRequiredWithoutChaptersNestedInput
    StoryReadStatus?: StoryReadStatusUpdateManyWithoutLastChapterNestedInput
    publishingStatus?: ChapterPublishingUpdateManyWithoutChapterNestedInput
  }

  export type ChapterUncheckedUpdateWithoutScenesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    arcId?: StringFieldUpdateOperationsInput | string
    publishedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodeType?: StringFieldUpdateOperationsInput | string
    StoryReadStatus?: StoryReadStatusUncheckedUpdateManyWithoutLastChapterNestedInput
    publishingStatus?: ChapterPublishingUncheckedUpdateManyWithoutChapterNestedInput
  }

  export type CharacterUpsertWithoutSceneProtagonistInInput = {
    update: XOR<CharacterUpdateWithoutSceneProtagonistInInput, CharacterUncheckedUpdateWithoutSceneProtagonistInInput>
    create: XOR<CharacterCreateWithoutSceneProtagonistInInput, CharacterUncheckedCreateWithoutSceneProtagonistInInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutSceneProtagonistInInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutSceneProtagonistInInput, CharacterUncheckedUpdateWithoutSceneProtagonistInInput>
  }

  export type CharacterUpdateWithoutSceneProtagonistInInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutCharactersNestedInput
    pictureFile?: FileUpdateOneWithoutCharacterPictureNestedInput
    laterVersionOf?: CharacterUpdateOneWithoutPreviousVersionNestedInput
    previousVersion?: CharacterUpdateManyWithoutLaterVersionOfNestedInput
    defaultProtagonistForStory?: StoryUpdateManyWithoutDefaultProtagonistNestedInput
    participatingInScenes?: SceneCharacterUpdateManyWithoutCharacterNestedInput
    referredInScenes?: SceneReferredCharacterUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutSceneProtagonistInInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    laterVersionOfId?: NullableStringFieldUpdateOperationsInput | string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousVersion?: CharacterUncheckedUpdateManyWithoutLaterVersionOfNestedInput
    defaultProtagonistForStory?: StoryUncheckedUpdateManyWithoutDefaultProtagonistNestedInput
    participatingInScenes?: SceneCharacterUncheckedUpdateManyWithoutCharacterNestedInput
    referredInScenes?: SceneReferredCharacterUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type LocationUpsertWithoutScenesInput = {
    update: XOR<LocationUpdateWithoutScenesInput, LocationUncheckedUpdateWithoutScenesInput>
    create: XOR<LocationCreateWithoutScenesInput, LocationUncheckedCreateWithoutScenesInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutScenesInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutScenesInput, LocationUncheckedUpdateWithoutScenesInput>
  }

  export type LocationUpdateWithoutScenesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutLocationsNestedInput
    pictureFile?: FileUpdateOneWithoutLocationPictureNestedInput
  }

  export type LocationUncheckedUpdateWithoutScenesInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParagraphUpsertWithWhereUniqueWithoutSceneInput = {
    where: ParagraphWhereUniqueInput
    update: XOR<ParagraphUpdateWithoutSceneInput, ParagraphUncheckedUpdateWithoutSceneInput>
    create: XOR<ParagraphCreateWithoutSceneInput, ParagraphUncheckedCreateWithoutSceneInput>
  }

  export type ParagraphUpdateWithWhereUniqueWithoutSceneInput = {
    where: ParagraphWhereUniqueInput
    data: XOR<ParagraphUpdateWithoutSceneInput, ParagraphUncheckedUpdateWithoutSceneInput>
  }

  export type ParagraphUpdateManyWithWhereWithoutSceneInput = {
    where: ParagraphScalarWhereInput
    data: XOR<ParagraphUpdateManyMutationInput, ParagraphUncheckedUpdateManyWithoutSceneInput>
  }

  export type ParagraphScalarWhereInput = {
    AND?: ParagraphScalarWhereInput | ParagraphScalarWhereInput[]
    OR?: ParagraphScalarWhereInput[]
    NOT?: ParagraphScalarWhereInput | ParagraphScalarWhereInput[]
    id?: StringFilter<"Paragraph"> | string
    sceneId?: StringFilter<"Paragraph"> | string
    createdAt?: DateTimeFilter<"Paragraph"> | Date | string
    updatedAt?: DateTimeFilter<"Paragraph"> | Date | string
    sortOrder?: IntFilter<"Paragraph"> | number
  }

  export type SceneCharacterUpsertWithWhereUniqueWithoutSceneInput = {
    where: SceneCharacterWhereUniqueInput
    update: XOR<SceneCharacterUpdateWithoutSceneInput, SceneCharacterUncheckedUpdateWithoutSceneInput>
    create: XOR<SceneCharacterCreateWithoutSceneInput, SceneCharacterUncheckedCreateWithoutSceneInput>
  }

  export type SceneCharacterUpdateWithWhereUniqueWithoutSceneInput = {
    where: SceneCharacterWhereUniqueInput
    data: XOR<SceneCharacterUpdateWithoutSceneInput, SceneCharacterUncheckedUpdateWithoutSceneInput>
  }

  export type SceneCharacterUpdateManyWithWhereWithoutSceneInput = {
    where: SceneCharacterScalarWhereInput
    data: XOR<SceneCharacterUpdateManyMutationInput, SceneCharacterUncheckedUpdateManyWithoutSceneInput>
  }

  export type SceneCharacterScalarWhereInput = {
    AND?: SceneCharacterScalarWhereInput | SceneCharacterScalarWhereInput[]
    OR?: SceneCharacterScalarWhereInput[]
    NOT?: SceneCharacterScalarWhereInput | SceneCharacterScalarWhereInput[]
    sceneId?: StringFilter<"SceneCharacter"> | string
    characterId?: StringFilter<"SceneCharacter"> | string
    assignedAt?: DateTimeFilter<"SceneCharacter"> | Date | string
  }

  export type SceneReferredCharacterUpsertWithWhereUniqueWithoutSceneInput = {
    where: SceneReferredCharacterWhereUniqueInput
    update: XOR<SceneReferredCharacterUpdateWithoutSceneInput, SceneReferredCharacterUncheckedUpdateWithoutSceneInput>
    create: XOR<SceneReferredCharacterCreateWithoutSceneInput, SceneReferredCharacterUncheckedCreateWithoutSceneInput>
  }

  export type SceneReferredCharacterUpdateWithWhereUniqueWithoutSceneInput = {
    where: SceneReferredCharacterWhereUniqueInput
    data: XOR<SceneReferredCharacterUpdateWithoutSceneInput, SceneReferredCharacterUncheckedUpdateWithoutSceneInput>
  }

  export type SceneReferredCharacterUpdateManyWithWhereWithoutSceneInput = {
    where: SceneReferredCharacterScalarWhereInput
    data: XOR<SceneReferredCharacterUpdateManyMutationInput, SceneReferredCharacterUncheckedUpdateManyWithoutSceneInput>
  }

  export type SceneReferredCharacterScalarWhereInput = {
    AND?: SceneReferredCharacterScalarWhereInput | SceneReferredCharacterScalarWhereInput[]
    OR?: SceneReferredCharacterScalarWhereInput[]
    NOT?: SceneReferredCharacterScalarWhereInput | SceneReferredCharacterScalarWhereInput[]
    sceneId?: StringFilter<"SceneReferredCharacter"> | string
    characterId?: StringFilter<"SceneReferredCharacter"> | string
    assignedAt?: DateTimeFilter<"SceneReferredCharacter"> | Date | string
  }

  export type SceneCreateWithoutParagraphsInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chapter: ChapterCreateNestedOneWithoutScenesInput
    protagonist?: CharacterCreateNestedOneWithoutSceneProtagonistInInput
    location?: LocationCreateNestedOneWithoutScenesInput
    participatingCharacters?: SceneCharacterCreateNestedManyWithoutSceneInput
    referredCharacters?: SceneReferredCharacterCreateNestedManyWithoutSceneInput
  }

  export type SceneUncheckedCreateWithoutParagraphsInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    chapterId: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    protagonistId?: string | null
    locationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participatingCharacters?: SceneCharacterUncheckedCreateNestedManyWithoutSceneInput
    referredCharacters?: SceneReferredCharacterUncheckedCreateNestedManyWithoutSceneInput
  }

  export type SceneCreateOrConnectWithoutParagraphsInput = {
    where: SceneWhereUniqueInput
    create: XOR<SceneCreateWithoutParagraphsInput, SceneUncheckedCreateWithoutParagraphsInput>
  }

  export type ParagraphRevisionCreateWithoutParagraphInput = {
    id?: string
    body: string
    contentSchema?: string | null
    version?: number
    state?: $Enums.ParagraphState | null
    aiCharacters?: number | null
    humanCharacters?: number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    paragraphComment?: ParagraphCommentCreateNestedManyWithoutParagraphRevisionInput
  }

  export type ParagraphRevisionUncheckedCreateWithoutParagraphInput = {
    id?: string
    body: string
    contentSchema?: string | null
    version?: number
    state?: $Enums.ParagraphState | null
    aiCharacters?: number | null
    humanCharacters?: number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    paragraphComment?: ParagraphCommentUncheckedCreateNestedManyWithoutParagraphRevisionInput
  }

  export type ParagraphRevisionCreateOrConnectWithoutParagraphInput = {
    where: ParagraphRevisionWhereUniqueInput
    create: XOR<ParagraphRevisionCreateWithoutParagraphInput, ParagraphRevisionUncheckedCreateWithoutParagraphInput>
  }

  export type ParagraphRevisionCreateManyParagraphInputEnvelope = {
    data: ParagraphRevisionCreateManyParagraphInput | ParagraphRevisionCreateManyParagraphInput[]
    skipDuplicates?: boolean
  }

  export type SceneUpsertWithoutParagraphsInput = {
    update: XOR<SceneUpdateWithoutParagraphsInput, SceneUncheckedUpdateWithoutParagraphsInput>
    create: XOR<SceneCreateWithoutParagraphsInput, SceneUncheckedCreateWithoutParagraphsInput>
    where?: SceneWhereInput
  }

  export type SceneUpdateToOneWithWhereWithoutParagraphsInput = {
    where?: SceneWhereInput
    data: XOR<SceneUpdateWithoutParagraphsInput, SceneUncheckedUpdateWithoutParagraphsInput>
  }

  export type SceneUpdateWithoutParagraphsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapter?: ChapterUpdateOneRequiredWithoutScenesNestedInput
    protagonist?: CharacterUpdateOneWithoutSceneProtagonistInNestedInput
    location?: LocationUpdateOneWithoutScenesNestedInput
    participatingCharacters?: SceneCharacterUpdateManyWithoutSceneNestedInput
    referredCharacters?: SceneReferredCharacterUpdateManyWithoutSceneNestedInput
  }

  export type SceneUncheckedUpdateWithoutParagraphsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    chapterId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    protagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participatingCharacters?: SceneCharacterUncheckedUpdateManyWithoutSceneNestedInput
    referredCharacters?: SceneReferredCharacterUncheckedUpdateManyWithoutSceneNestedInput
  }

  export type ParagraphRevisionUpsertWithWhereUniqueWithoutParagraphInput = {
    where: ParagraphRevisionWhereUniqueInput
    update: XOR<ParagraphRevisionUpdateWithoutParagraphInput, ParagraphRevisionUncheckedUpdateWithoutParagraphInput>
    create: XOR<ParagraphRevisionCreateWithoutParagraphInput, ParagraphRevisionUncheckedCreateWithoutParagraphInput>
  }

  export type ParagraphRevisionUpdateWithWhereUniqueWithoutParagraphInput = {
    where: ParagraphRevisionWhereUniqueInput
    data: XOR<ParagraphRevisionUpdateWithoutParagraphInput, ParagraphRevisionUncheckedUpdateWithoutParagraphInput>
  }

  export type ParagraphRevisionUpdateManyWithWhereWithoutParagraphInput = {
    where: ParagraphRevisionScalarWhereInput
    data: XOR<ParagraphRevisionUpdateManyMutationInput, ParagraphRevisionUncheckedUpdateManyWithoutParagraphInput>
  }

  export type ParagraphRevisionScalarWhereInput = {
    AND?: ParagraphRevisionScalarWhereInput | ParagraphRevisionScalarWhereInput[]
    OR?: ParagraphRevisionScalarWhereInput[]
    NOT?: ParagraphRevisionScalarWhereInput | ParagraphRevisionScalarWhereInput[]
    id?: StringFilter<"ParagraphRevision"> | string
    paragraphId?: StringFilter<"ParagraphRevision"> | string
    body?: StringFilter<"ParagraphRevision"> | string
    contentSchema?: StringNullableFilter<"ParagraphRevision"> | string | null
    version?: IntFilter<"ParagraphRevision"> | number
    state?: EnumParagraphStateNullableFilter<"ParagraphRevision"> | $Enums.ParagraphState | null
    aiCharacters?: IntNullableFilter<"ParagraphRevision"> | number | null
    humanCharacters?: IntNullableFilter<"ParagraphRevision"> | number | null
    plotPointActions?: JsonNullableFilter<"ParagraphRevision">
    inventoryActions?: JsonNullableFilter<"ParagraphRevision">
    createdAt?: DateTimeFilter<"ParagraphRevision"> | Date | string
  }

  export type ParagraphCreateWithoutParagraphRevisionsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder: number
    scene: SceneCreateNestedOneWithoutParagraphsInput
  }

  export type ParagraphUncheckedCreateWithoutParagraphRevisionsInput = {
    id?: string
    sceneId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder: number
  }

  export type ParagraphCreateOrConnectWithoutParagraphRevisionsInput = {
    where: ParagraphWhereUniqueInput
    create: XOR<ParagraphCreateWithoutParagraphRevisionsInput, ParagraphUncheckedCreateWithoutParagraphRevisionsInput>
  }

  export type ParagraphCommentCreateWithoutParagraphRevisionInput = {
    body: string
    type?: $Enums.ParagraphCommentType
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutParagraphCommentsInput
  }

  export type ParagraphCommentUncheckedCreateWithoutParagraphRevisionInput = {
    id?: number
    ownerId: number
    body: string
    type?: $Enums.ParagraphCommentType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParagraphCommentCreateOrConnectWithoutParagraphRevisionInput = {
    where: ParagraphCommentWhereUniqueInput
    create: XOR<ParagraphCommentCreateWithoutParagraphRevisionInput, ParagraphCommentUncheckedCreateWithoutParagraphRevisionInput>
  }

  export type ParagraphCommentCreateManyParagraphRevisionInputEnvelope = {
    data: ParagraphCommentCreateManyParagraphRevisionInput | ParagraphCommentCreateManyParagraphRevisionInput[]
    skipDuplicates?: boolean
  }

  export type ParagraphUpsertWithoutParagraphRevisionsInput = {
    update: XOR<ParagraphUpdateWithoutParagraphRevisionsInput, ParagraphUncheckedUpdateWithoutParagraphRevisionsInput>
    create: XOR<ParagraphCreateWithoutParagraphRevisionsInput, ParagraphUncheckedCreateWithoutParagraphRevisionsInput>
    where?: ParagraphWhereInput
  }

  export type ParagraphUpdateToOneWithWhereWithoutParagraphRevisionsInput = {
    where?: ParagraphWhereInput
    data: XOR<ParagraphUpdateWithoutParagraphRevisionsInput, ParagraphUncheckedUpdateWithoutParagraphRevisionsInput>
  }

  export type ParagraphUpdateWithoutParagraphRevisionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    scene?: SceneUpdateOneRequiredWithoutParagraphsNestedInput
  }

  export type ParagraphUncheckedUpdateWithoutParagraphRevisionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    sceneId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
  }

  export type ParagraphCommentUpsertWithWhereUniqueWithoutParagraphRevisionInput = {
    where: ParagraphCommentWhereUniqueInput
    update: XOR<ParagraphCommentUpdateWithoutParagraphRevisionInput, ParagraphCommentUncheckedUpdateWithoutParagraphRevisionInput>
    create: XOR<ParagraphCommentCreateWithoutParagraphRevisionInput, ParagraphCommentUncheckedCreateWithoutParagraphRevisionInput>
  }

  export type ParagraphCommentUpdateWithWhereUniqueWithoutParagraphRevisionInput = {
    where: ParagraphCommentWhereUniqueInput
    data: XOR<ParagraphCommentUpdateWithoutParagraphRevisionInput, ParagraphCommentUncheckedUpdateWithoutParagraphRevisionInput>
  }

  export type ParagraphCommentUpdateManyWithWhereWithoutParagraphRevisionInput = {
    where: ParagraphCommentScalarWhereInput
    data: XOR<ParagraphCommentUpdateManyMutationInput, ParagraphCommentUncheckedUpdateManyWithoutParagraphRevisionInput>
  }

  export type ParagraphRevisionCreateWithoutParagraphCommentInput = {
    id?: string
    body: string
    contentSchema?: string | null
    version?: number
    state?: $Enums.ParagraphState | null
    aiCharacters?: number | null
    humanCharacters?: number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    paragraph: ParagraphCreateNestedOneWithoutParagraphRevisionsInput
  }

  export type ParagraphRevisionUncheckedCreateWithoutParagraphCommentInput = {
    id?: string
    paragraphId: string
    body: string
    contentSchema?: string | null
    version?: number
    state?: $Enums.ParagraphState | null
    aiCharacters?: number | null
    humanCharacters?: number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ParagraphRevisionCreateOrConnectWithoutParagraphCommentInput = {
    where: ParagraphRevisionWhereUniqueInput
    create: XOR<ParagraphRevisionCreateWithoutParagraphCommentInput, ParagraphRevisionUncheckedCreateWithoutParagraphCommentInput>
  }

  export type UserCreateWithoutParagraphCommentsInput = {
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    ownedStories?: StoryCreateNestedManyWithoutOwnerInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutOwnerInput
    accessKeys?: AccessKeyCreateNestedManyWithoutOwnerInput
    files?: FileCreateNestedManyWithoutOwnerInput
    sessions?: SessionCreateNestedManyWithoutOwnerInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutParagraphCommentsInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    ownedStories?: StoryUncheckedCreateNestedManyWithoutOwnerInput
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutOwnerInput
    accessKeys?: AccessKeyUncheckedCreateNestedManyWithoutOwnerInput
    files?: FileUncheckedCreateNestedManyWithoutOwnerInput
    sessions?: SessionUncheckedCreateNestedManyWithoutOwnerInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutParagraphCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutParagraphCommentsInput, UserUncheckedCreateWithoutParagraphCommentsInput>
  }

  export type ParagraphRevisionUpsertWithoutParagraphCommentInput = {
    update: XOR<ParagraphRevisionUpdateWithoutParagraphCommentInput, ParagraphRevisionUncheckedUpdateWithoutParagraphCommentInput>
    create: XOR<ParagraphRevisionCreateWithoutParagraphCommentInput, ParagraphRevisionUncheckedCreateWithoutParagraphCommentInput>
    where?: ParagraphRevisionWhereInput
  }

  export type ParagraphRevisionUpdateToOneWithWhereWithoutParagraphCommentInput = {
    where?: ParagraphRevisionWhereInput
    data: XOR<ParagraphRevisionUpdateWithoutParagraphCommentInput, ParagraphRevisionUncheckedUpdateWithoutParagraphCommentInput>
  }

  export type ParagraphRevisionUpdateWithoutParagraphCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    contentSchema?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    state?: NullableEnumParagraphStateFieldUpdateOperationsInput | $Enums.ParagraphState | null
    aiCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    humanCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paragraph?: ParagraphUpdateOneRequiredWithoutParagraphRevisionsNestedInput
  }

  export type ParagraphRevisionUncheckedUpdateWithoutParagraphCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    paragraphId?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    contentSchema?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    state?: NullableEnumParagraphStateFieldUpdateOperationsInput | $Enums.ParagraphState | null
    aiCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    humanCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutParagraphCommentsInput = {
    update: XOR<UserUpdateWithoutParagraphCommentsInput, UserUncheckedUpdateWithoutParagraphCommentsInput>
    create: XOR<UserCreateWithoutParagraphCommentsInput, UserUncheckedCreateWithoutParagraphCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutParagraphCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutParagraphCommentsInput, UserUncheckedUpdateWithoutParagraphCommentsInput>
  }

  export type UserUpdateWithoutParagraphCommentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedStories?: StoryUpdateManyWithoutOwnerNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutOwnerNestedInput
    accessKeys?: AccessKeyUpdateManyWithoutOwnerNestedInput
    files?: FileUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUpdateManyWithoutOwnerNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutParagraphCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedStories?: StoryUncheckedUpdateManyWithoutOwnerNestedInput
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutOwnerNestedInput
    accessKeys?: AccessKeyUncheckedUpdateManyWithoutOwnerNestedInput
    files?: FileUncheckedUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutOwnerNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutFilesInput = {
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    ownedStories?: StoryCreateNestedManyWithoutOwnerInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutOwnerInput
    accessKeys?: AccessKeyCreateNestedManyWithoutOwnerInput
    paragraphComments?: ParagraphCommentCreateNestedManyWithoutOwnerInput
    sessions?: SessionCreateNestedManyWithoutOwnerInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFilesInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    avatarUrl?: string | null
    createdAt?: Date | string
    ownedStories?: StoryUncheckedCreateNestedManyWithoutOwnerInput
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutOwnerInput
    accessKeys?: AccessKeyUncheckedCreateNestedManyWithoutOwnerInput
    paragraphComments?: ParagraphCommentUncheckedCreateNestedManyWithoutOwnerInput
    sessions?: SessionUncheckedCreateNestedManyWithoutOwnerInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
  }

  export type StoryCreateWithoutFilesInput = {
    id?: string
    name?: string
    summary?: string | null
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    owner: UserCreateNestedOneWithoutOwnedStoriesInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutStoryInput
    coverArtFile?: FileCreateNestedOneWithoutStoryCoverArtInput
    defaultProtagonist?: CharacterCreateNestedOneWithoutDefaultProtagonistForStoryInput
    books?: BookCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagCreateNestedManyWithoutStoryInput
    characters?: CharacterCreateNestedManyWithoutStoryInput
    locations?: LocationCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointCreateNestedManyWithoutStoryInput
    items?: ItemCreateNestedManyWithoutStoryInput
  }

  export type StoryUncheckedCreateWithoutFilesInput = {
    id?: string
    name?: string
    summary?: string | null
    ownerId: number
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverArtFileId?: string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    defaultProtagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutStoryInput
    books?: BookUncheckedCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagUncheckedCreateNestedManyWithoutStoryInput
    characters?: CharacterUncheckedCreateNestedManyWithoutStoryInput
    locations?: LocationUncheckedCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointUncheckedCreateNestedManyWithoutStoryInput
    items?: ItemUncheckedCreateNestedManyWithoutStoryInput
  }

  export type StoryCreateOrConnectWithoutFilesInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutFilesInput, StoryUncheckedCreateWithoutFilesInput>
  }

  export type StoryCreateWithoutCoverArtFileInput = {
    id?: string
    name?: string
    summary?: string | null
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    owner: UserCreateNestedOneWithoutOwnedStoriesInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutStoryInput
    defaultProtagonist?: CharacterCreateNestedOneWithoutDefaultProtagonistForStoryInput
    books?: BookCreateNestedManyWithoutStoryInput
    files?: FileCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagCreateNestedManyWithoutStoryInput
    characters?: CharacterCreateNestedManyWithoutStoryInput
    locations?: LocationCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointCreateNestedManyWithoutStoryInput
    items?: ItemCreateNestedManyWithoutStoryInput
  }

  export type StoryUncheckedCreateWithoutCoverArtFileInput = {
    id?: string
    name?: string
    summary?: string | null
    ownerId: number
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    defaultProtagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutStoryInput
    books?: BookUncheckedCreateNestedManyWithoutStoryInput
    files?: FileUncheckedCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagUncheckedCreateNestedManyWithoutStoryInput
    characters?: CharacterUncheckedCreateNestedManyWithoutStoryInput
    locations?: LocationUncheckedCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointUncheckedCreateNestedManyWithoutStoryInput
    items?: ItemUncheckedCreateNestedManyWithoutStoryInput
  }

  export type StoryCreateOrConnectWithoutCoverArtFileInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutCoverArtFileInput, StoryUncheckedCreateWithoutCoverArtFileInput>
  }

  export type StoryCreateManyCoverArtFileInputEnvelope = {
    data: StoryCreateManyCoverArtFileInput | StoryCreateManyCoverArtFileInput[]
    skipDuplicates?: boolean
  }

  export type BookCreateWithoutCoverArtFileInput = {
    id?: string
    name?: string
    summary?: string | null
    pages?: number | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutBooksInput
    spineArtFile?: FileCreateNestedOneWithoutBookSpineArtInput
    arcs?: ArcCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutCoverArtFileInput = {
    id?: string
    name?: string
    summary?: string | null
    storyId: string
    spineArtFileId?: string | null
    pages?: number | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    arcs?: ArcUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutCoverArtFileInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutCoverArtFileInput, BookUncheckedCreateWithoutCoverArtFileInput>
  }

  export type BookCreateManyCoverArtFileInputEnvelope = {
    data: BookCreateManyCoverArtFileInput | BookCreateManyCoverArtFileInput[]
    skipDuplicates?: boolean
  }

  export type BookCreateWithoutSpineArtFileInput = {
    id?: string
    name?: string
    summary?: string | null
    pages?: number | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutBooksInput
    coverArtFile?: FileCreateNestedOneWithoutBookCoverArtInput
    arcs?: ArcCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutSpineArtFileInput = {
    id?: string
    name?: string
    summary?: string | null
    storyId: string
    coverArtFileId?: string | null
    pages?: number | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    arcs?: ArcUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutSpineArtFileInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutSpineArtFileInput, BookUncheckedCreateWithoutSpineArtFileInput>
  }

  export type BookCreateManySpineArtFileInputEnvelope = {
    data: BookCreateManySpineArtFileInput | BookCreateManySpineArtFileInput[]
    skipDuplicates?: boolean
  }

  export type CharacterCreateWithoutPictureFileInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutCharactersInput
    laterVersionOf?: CharacterCreateNestedOneWithoutPreviousVersionInput
    previousVersion?: CharacterCreateNestedManyWithoutLaterVersionOfInput
    defaultProtagonistForStory?: StoryCreateNestedManyWithoutDefaultProtagonistInput
    sceneProtagonistIn?: SceneCreateNestedManyWithoutProtagonistInput
    participatingInScenes?: SceneCharacterCreateNestedManyWithoutCharacterInput
    referredInScenes?: SceneReferredCharacterCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutPictureFileInput = {
    id?: string
    storyId: string
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    laterVersionOfId?: string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    previousVersion?: CharacterUncheckedCreateNestedManyWithoutLaterVersionOfInput
    defaultProtagonistForStory?: StoryUncheckedCreateNestedManyWithoutDefaultProtagonistInput
    sceneProtagonistIn?: SceneUncheckedCreateNestedManyWithoutProtagonistInput
    participatingInScenes?: SceneCharacterUncheckedCreateNestedManyWithoutCharacterInput
    referredInScenes?: SceneReferredCharacterUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutPictureFileInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutPictureFileInput, CharacterUncheckedCreateWithoutPictureFileInput>
  }

  export type CharacterCreateManyPictureFileInputEnvelope = {
    data: CharacterCreateManyPictureFileInput | CharacterCreateManyPictureFileInput[]
    skipDuplicates?: boolean
  }

  export type LocationCreateWithoutPictureFileInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutLocationsInput
    scenes?: SceneCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutPictureFileInput = {
    id?: string
    storyId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scenes?: SceneUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutPictureFileInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutPictureFileInput, LocationUncheckedCreateWithoutPictureFileInput>
  }

  export type LocationCreateManyPictureFileInputEnvelope = {
    data: LocationCreateManyPictureFileInput | LocationCreateManyPictureFileInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutFilesInput = {
    update: XOR<UserUpdateWithoutFilesInput, UserUncheckedUpdateWithoutFilesInput>
    create: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFilesInput, UserUncheckedUpdateWithoutFilesInput>
  }

  export type UserUpdateWithoutFilesInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedStories?: StoryUpdateManyWithoutOwnerNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutOwnerNestedInput
    accessKeys?: AccessKeyUpdateManyWithoutOwnerNestedInput
    paragraphComments?: ParagraphCommentUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUpdateManyWithoutOwnerNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownedStories?: StoryUncheckedUpdateManyWithoutOwnerNestedInput
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutOwnerNestedInput
    accessKeys?: AccessKeyUncheckedUpdateManyWithoutOwnerNestedInput
    paragraphComments?: ParagraphCommentUncheckedUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutOwnerNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StoryUpsertWithoutFilesInput = {
    update: XOR<StoryUpdateWithoutFilesInput, StoryUncheckedUpdateWithoutFilesInput>
    create: XOR<StoryCreateWithoutFilesInput, StoryUncheckedCreateWithoutFilesInput>
    where?: StoryWhereInput
  }

  export type StoryUpdateToOneWithWhereWithoutFilesInput = {
    where?: StoryWhereInput
    data: XOR<StoryUpdateWithoutFilesInput, StoryUncheckedUpdateWithoutFilesInput>
  }

  export type StoryUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: UserUpdateOneRequiredWithoutOwnedStoriesNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutStoryNestedInput
    coverArtFile?: FileUpdateOneWithoutStoryCoverArtNestedInput
    defaultProtagonist?: CharacterUpdateOneWithoutDefaultProtagonistForStoryNestedInput
    books?: BookUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUpdateManyWithoutStoryNestedInput
    characters?: CharacterUpdateManyWithoutStoryNestedInput
    locations?: LocationUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUpdateManyWithoutStoryNestedInput
    items?: ItemUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    defaultProtagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutStoryNestedInput
    books?: BookUncheckedUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUncheckedUpdateManyWithoutStoryNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutStoryNestedInput
    locations?: LocationUncheckedUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUncheckedUpdateManyWithoutStoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutStoryNestedInput
  }

  export type StoryUpsertWithWhereUniqueWithoutCoverArtFileInput = {
    where: StoryWhereUniqueInput
    update: XOR<StoryUpdateWithoutCoverArtFileInput, StoryUncheckedUpdateWithoutCoverArtFileInput>
    create: XOR<StoryCreateWithoutCoverArtFileInput, StoryUncheckedCreateWithoutCoverArtFileInput>
  }

  export type StoryUpdateWithWhereUniqueWithoutCoverArtFileInput = {
    where: StoryWhereUniqueInput
    data: XOR<StoryUpdateWithoutCoverArtFileInput, StoryUncheckedUpdateWithoutCoverArtFileInput>
  }

  export type StoryUpdateManyWithWhereWithoutCoverArtFileInput = {
    where: StoryScalarWhereInput
    data: XOR<StoryUpdateManyMutationInput, StoryUncheckedUpdateManyWithoutCoverArtFileInput>
  }

  export type BookUpsertWithWhereUniqueWithoutCoverArtFileInput = {
    where: BookWhereUniqueInput
    update: XOR<BookUpdateWithoutCoverArtFileInput, BookUncheckedUpdateWithoutCoverArtFileInput>
    create: XOR<BookCreateWithoutCoverArtFileInput, BookUncheckedCreateWithoutCoverArtFileInput>
  }

  export type BookUpdateWithWhereUniqueWithoutCoverArtFileInput = {
    where: BookWhereUniqueInput
    data: XOR<BookUpdateWithoutCoverArtFileInput, BookUncheckedUpdateWithoutCoverArtFileInput>
  }

  export type BookUpdateManyWithWhereWithoutCoverArtFileInput = {
    where: BookScalarWhereInput
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyWithoutCoverArtFileInput>
  }

  export type BookUpsertWithWhereUniqueWithoutSpineArtFileInput = {
    where: BookWhereUniqueInput
    update: XOR<BookUpdateWithoutSpineArtFileInput, BookUncheckedUpdateWithoutSpineArtFileInput>
    create: XOR<BookCreateWithoutSpineArtFileInput, BookUncheckedCreateWithoutSpineArtFileInput>
  }

  export type BookUpdateWithWhereUniqueWithoutSpineArtFileInput = {
    where: BookWhereUniqueInput
    data: XOR<BookUpdateWithoutSpineArtFileInput, BookUncheckedUpdateWithoutSpineArtFileInput>
  }

  export type BookUpdateManyWithWhereWithoutSpineArtFileInput = {
    where: BookScalarWhereInput
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyWithoutSpineArtFileInput>
  }

  export type CharacterUpsertWithWhereUniqueWithoutPictureFileInput = {
    where: CharacterWhereUniqueInput
    update: XOR<CharacterUpdateWithoutPictureFileInput, CharacterUncheckedUpdateWithoutPictureFileInput>
    create: XOR<CharacterCreateWithoutPictureFileInput, CharacterUncheckedCreateWithoutPictureFileInput>
  }

  export type CharacterUpdateWithWhereUniqueWithoutPictureFileInput = {
    where: CharacterWhereUniqueInput
    data: XOR<CharacterUpdateWithoutPictureFileInput, CharacterUncheckedUpdateWithoutPictureFileInput>
  }

  export type CharacterUpdateManyWithWhereWithoutPictureFileInput = {
    where: CharacterScalarWhereInput
    data: XOR<CharacterUpdateManyMutationInput, CharacterUncheckedUpdateManyWithoutPictureFileInput>
  }

  export type LocationUpsertWithWhereUniqueWithoutPictureFileInput = {
    where: LocationWhereUniqueInput
    update: XOR<LocationUpdateWithoutPictureFileInput, LocationUncheckedUpdateWithoutPictureFileInput>
    create: XOR<LocationCreateWithoutPictureFileInput, LocationUncheckedCreateWithoutPictureFileInput>
  }

  export type LocationUpdateWithWhereUniqueWithoutPictureFileInput = {
    where: LocationWhereUniqueInput
    data: XOR<LocationUpdateWithoutPictureFileInput, LocationUncheckedUpdateWithoutPictureFileInput>
  }

  export type LocationUpdateManyWithWhereWithoutPictureFileInput = {
    where: LocationScalarWhereInput
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyWithoutPictureFileInput>
  }

  export type ChapterCreateWithoutPublishingStatusInput = {
    id?: string
    name?: string
    summary?: string | null
    publishedOn?: Date | string | null
    sortOrder: number
    royalRoadId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nodeType?: string
    arc: ArcCreateNestedOneWithoutChaptersInput
    scenes?: SceneCreateNestedManyWithoutChapterInput
    StoryReadStatus?: StoryReadStatusCreateNestedManyWithoutLastChapterInput
  }

  export type ChapterUncheckedCreateWithoutPublishingStatusInput = {
    id?: string
    name?: string
    summary?: string | null
    arcId: string
    publishedOn?: Date | string | null
    sortOrder: number
    royalRoadId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nodeType?: string
    scenes?: SceneUncheckedCreateNestedManyWithoutChapterInput
    StoryReadStatus?: StoryReadStatusUncheckedCreateNestedManyWithoutLastChapterInput
  }

  export type ChapterCreateOrConnectWithoutPublishingStatusInput = {
    where: ChapterWhereUniqueInput
    create: XOR<ChapterCreateWithoutPublishingStatusInput, ChapterUncheckedCreateWithoutPublishingStatusInput>
  }

  export type ChapterUpsertWithoutPublishingStatusInput = {
    update: XOR<ChapterUpdateWithoutPublishingStatusInput, ChapterUncheckedUpdateWithoutPublishingStatusInput>
    create: XOR<ChapterCreateWithoutPublishingStatusInput, ChapterUncheckedCreateWithoutPublishingStatusInput>
    where?: ChapterWhereInput
  }

  export type ChapterUpdateToOneWithWhereWithoutPublishingStatusInput = {
    where?: ChapterWhereInput
    data: XOR<ChapterUpdateWithoutPublishingStatusInput, ChapterUncheckedUpdateWithoutPublishingStatusInput>
  }

  export type ChapterUpdateWithoutPublishingStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    publishedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodeType?: StringFieldUpdateOperationsInput | string
    arc?: ArcUpdateOneRequiredWithoutChaptersNestedInput
    scenes?: SceneUpdateManyWithoutChapterNestedInput
    StoryReadStatus?: StoryReadStatusUpdateManyWithoutLastChapterNestedInput
  }

  export type ChapterUncheckedUpdateWithoutPublishingStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    arcId?: StringFieldUpdateOperationsInput | string
    publishedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodeType?: StringFieldUpdateOperationsInput | string
    scenes?: SceneUncheckedUpdateManyWithoutChapterNestedInput
    StoryReadStatus?: StoryReadStatusUncheckedUpdateManyWithoutLastChapterNestedInput
  }

  export type StoryCreateWithoutCharactersInput = {
    id?: string
    name?: string
    summary?: string | null
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    owner: UserCreateNestedOneWithoutOwnedStoriesInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutStoryInput
    coverArtFile?: FileCreateNestedOneWithoutStoryCoverArtInput
    defaultProtagonist?: CharacterCreateNestedOneWithoutDefaultProtagonistForStoryInput
    books?: BookCreateNestedManyWithoutStoryInput
    files?: FileCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagCreateNestedManyWithoutStoryInput
    locations?: LocationCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointCreateNestedManyWithoutStoryInput
    items?: ItemCreateNestedManyWithoutStoryInput
  }

  export type StoryUncheckedCreateWithoutCharactersInput = {
    id?: string
    name?: string
    summary?: string | null
    ownerId: number
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverArtFileId?: string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    defaultProtagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutStoryInput
    books?: BookUncheckedCreateNestedManyWithoutStoryInput
    files?: FileUncheckedCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagUncheckedCreateNestedManyWithoutStoryInput
    locations?: LocationUncheckedCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointUncheckedCreateNestedManyWithoutStoryInput
    items?: ItemUncheckedCreateNestedManyWithoutStoryInput
  }

  export type StoryCreateOrConnectWithoutCharactersInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutCharactersInput, StoryUncheckedCreateWithoutCharactersInput>
  }

  export type FileCreateWithoutCharacterPictureInput = {
    id?: string
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutFilesInput
    story?: StoryCreateNestedOneWithoutFilesInput
    storyCoverArt?: StoryCreateNestedManyWithoutCoverArtFileInput
    bookCoverArt?: BookCreateNestedManyWithoutCoverArtFileInput
    bookSpineArt?: BookCreateNestedManyWithoutSpineArtFileInput
    locationPicture?: LocationCreateNestedManyWithoutPictureFileInput
  }

  export type FileUncheckedCreateWithoutCharacterPictureInput = {
    id?: string
    ownerId: number
    storyId?: string | null
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    storyCoverArt?: StoryUncheckedCreateNestedManyWithoutCoverArtFileInput
    bookCoverArt?: BookUncheckedCreateNestedManyWithoutCoverArtFileInput
    bookSpineArt?: BookUncheckedCreateNestedManyWithoutSpineArtFileInput
    locationPicture?: LocationUncheckedCreateNestedManyWithoutPictureFileInput
  }

  export type FileCreateOrConnectWithoutCharacterPictureInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutCharacterPictureInput, FileUncheckedCreateWithoutCharacterPictureInput>
  }

  export type CharacterCreateWithoutPreviousVersionInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutCharactersInput
    pictureFile?: FileCreateNestedOneWithoutCharacterPictureInput
    laterVersionOf?: CharacterCreateNestedOneWithoutPreviousVersionInput
    defaultProtagonistForStory?: StoryCreateNestedManyWithoutDefaultProtagonistInput
    sceneProtagonistIn?: SceneCreateNestedManyWithoutProtagonistInput
    participatingInScenes?: SceneCharacterCreateNestedManyWithoutCharacterInput
    referredInScenes?: SceneReferredCharacterCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutPreviousVersionInput = {
    id?: string
    storyId: string
    pictureFileId?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    laterVersionOfId?: string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    defaultProtagonistForStory?: StoryUncheckedCreateNestedManyWithoutDefaultProtagonistInput
    sceneProtagonistIn?: SceneUncheckedCreateNestedManyWithoutProtagonistInput
    participatingInScenes?: SceneCharacterUncheckedCreateNestedManyWithoutCharacterInput
    referredInScenes?: SceneReferredCharacterUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutPreviousVersionInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutPreviousVersionInput, CharacterUncheckedCreateWithoutPreviousVersionInput>
  }

  export type CharacterCreateWithoutLaterVersionOfInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutCharactersInput
    pictureFile?: FileCreateNestedOneWithoutCharacterPictureInput
    previousVersion?: CharacterCreateNestedManyWithoutLaterVersionOfInput
    defaultProtagonistForStory?: StoryCreateNestedManyWithoutDefaultProtagonistInput
    sceneProtagonistIn?: SceneCreateNestedManyWithoutProtagonistInput
    participatingInScenes?: SceneCharacterCreateNestedManyWithoutCharacterInput
    referredInScenes?: SceneReferredCharacterCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutLaterVersionOfInput = {
    id?: string
    storyId: string
    pictureFileId?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    previousVersion?: CharacterUncheckedCreateNestedManyWithoutLaterVersionOfInput
    defaultProtagonistForStory?: StoryUncheckedCreateNestedManyWithoutDefaultProtagonistInput
    sceneProtagonistIn?: SceneUncheckedCreateNestedManyWithoutProtagonistInput
    participatingInScenes?: SceneCharacterUncheckedCreateNestedManyWithoutCharacterInput
    referredInScenes?: SceneReferredCharacterUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutLaterVersionOfInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutLaterVersionOfInput, CharacterUncheckedCreateWithoutLaterVersionOfInput>
  }

  export type CharacterCreateManyLaterVersionOfInputEnvelope = {
    data: CharacterCreateManyLaterVersionOfInput | CharacterCreateManyLaterVersionOfInput[]
    skipDuplicates?: boolean
  }

  export type StoryCreateWithoutDefaultProtagonistInput = {
    id?: string
    name?: string
    summary?: string | null
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    owner: UserCreateNestedOneWithoutOwnedStoriesInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutStoryInput
    coverArtFile?: FileCreateNestedOneWithoutStoryCoverArtInput
    books?: BookCreateNestedManyWithoutStoryInput
    files?: FileCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagCreateNestedManyWithoutStoryInput
    characters?: CharacterCreateNestedManyWithoutStoryInput
    locations?: LocationCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointCreateNestedManyWithoutStoryInput
    items?: ItemCreateNestedManyWithoutStoryInput
  }

  export type StoryUncheckedCreateWithoutDefaultProtagonistInput = {
    id?: string
    name?: string
    summary?: string | null
    ownerId: number
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverArtFileId?: string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutStoryInput
    books?: BookUncheckedCreateNestedManyWithoutStoryInput
    files?: FileUncheckedCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagUncheckedCreateNestedManyWithoutStoryInput
    characters?: CharacterUncheckedCreateNestedManyWithoutStoryInput
    locations?: LocationUncheckedCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointUncheckedCreateNestedManyWithoutStoryInput
    items?: ItemUncheckedCreateNestedManyWithoutStoryInput
  }

  export type StoryCreateOrConnectWithoutDefaultProtagonistInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutDefaultProtagonistInput, StoryUncheckedCreateWithoutDefaultProtagonistInput>
  }

  export type StoryCreateManyDefaultProtagonistInputEnvelope = {
    data: StoryCreateManyDefaultProtagonistInput | StoryCreateManyDefaultProtagonistInput[]
    skipDuplicates?: boolean
  }

  export type SceneCreateWithoutProtagonistInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chapter: ChapterCreateNestedOneWithoutScenesInput
    location?: LocationCreateNestedOneWithoutScenesInput
    paragraphs?: ParagraphCreateNestedManyWithoutSceneInput
    participatingCharacters?: SceneCharacterCreateNestedManyWithoutSceneInput
    referredCharacters?: SceneReferredCharacterCreateNestedManyWithoutSceneInput
  }

  export type SceneUncheckedCreateWithoutProtagonistInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    chapterId: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    locationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paragraphs?: ParagraphUncheckedCreateNestedManyWithoutSceneInput
    participatingCharacters?: SceneCharacterUncheckedCreateNestedManyWithoutSceneInput
    referredCharacters?: SceneReferredCharacterUncheckedCreateNestedManyWithoutSceneInput
  }

  export type SceneCreateOrConnectWithoutProtagonistInput = {
    where: SceneWhereUniqueInput
    create: XOR<SceneCreateWithoutProtagonistInput, SceneUncheckedCreateWithoutProtagonistInput>
  }

  export type SceneCreateManyProtagonistInputEnvelope = {
    data: SceneCreateManyProtagonistInput | SceneCreateManyProtagonistInput[]
    skipDuplicates?: boolean
  }

  export type SceneCharacterCreateWithoutCharacterInput = {
    assignedAt?: Date | string
    scene: SceneCreateNestedOneWithoutParticipatingCharactersInput
  }

  export type SceneCharacterUncheckedCreateWithoutCharacterInput = {
    sceneId: string
    assignedAt?: Date | string
  }

  export type SceneCharacterCreateOrConnectWithoutCharacterInput = {
    where: SceneCharacterWhereUniqueInput
    create: XOR<SceneCharacterCreateWithoutCharacterInput, SceneCharacterUncheckedCreateWithoutCharacterInput>
  }

  export type SceneCharacterCreateManyCharacterInputEnvelope = {
    data: SceneCharacterCreateManyCharacterInput | SceneCharacterCreateManyCharacterInput[]
    skipDuplicates?: boolean
  }

  export type SceneReferredCharacterCreateWithoutCharacterInput = {
    assignedAt?: Date | string
    scene: SceneCreateNestedOneWithoutReferredCharactersInput
  }

  export type SceneReferredCharacterUncheckedCreateWithoutCharacterInput = {
    sceneId: string
    assignedAt?: Date | string
  }

  export type SceneReferredCharacterCreateOrConnectWithoutCharacterInput = {
    where: SceneReferredCharacterWhereUniqueInput
    create: XOR<SceneReferredCharacterCreateWithoutCharacterInput, SceneReferredCharacterUncheckedCreateWithoutCharacterInput>
  }

  export type SceneReferredCharacterCreateManyCharacterInputEnvelope = {
    data: SceneReferredCharacterCreateManyCharacterInput | SceneReferredCharacterCreateManyCharacterInput[]
    skipDuplicates?: boolean
  }

  export type StoryUpsertWithoutCharactersInput = {
    update: XOR<StoryUpdateWithoutCharactersInput, StoryUncheckedUpdateWithoutCharactersInput>
    create: XOR<StoryCreateWithoutCharactersInput, StoryUncheckedCreateWithoutCharactersInput>
    where?: StoryWhereInput
  }

  export type StoryUpdateToOneWithWhereWithoutCharactersInput = {
    where?: StoryWhereInput
    data: XOR<StoryUpdateWithoutCharactersInput, StoryUncheckedUpdateWithoutCharactersInput>
  }

  export type StoryUpdateWithoutCharactersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: UserUpdateOneRequiredWithoutOwnedStoriesNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutStoryNestedInput
    coverArtFile?: FileUpdateOneWithoutStoryCoverArtNestedInput
    defaultProtagonist?: CharacterUpdateOneWithoutDefaultProtagonistForStoryNestedInput
    books?: BookUpdateManyWithoutStoryNestedInput
    files?: FileUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUpdateManyWithoutStoryNestedInput
    locations?: LocationUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUpdateManyWithoutStoryNestedInput
    items?: ItemUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateWithoutCharactersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    defaultProtagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutStoryNestedInput
    books?: BookUncheckedUpdateManyWithoutStoryNestedInput
    files?: FileUncheckedUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUncheckedUpdateManyWithoutStoryNestedInput
    locations?: LocationUncheckedUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUncheckedUpdateManyWithoutStoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutStoryNestedInput
  }

  export type FileUpsertWithoutCharacterPictureInput = {
    update: XOR<FileUpdateWithoutCharacterPictureInput, FileUncheckedUpdateWithoutCharacterPictureInput>
    create: XOR<FileCreateWithoutCharacterPictureInput, FileUncheckedCreateWithoutCharacterPictureInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutCharacterPictureInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutCharacterPictureInput, FileUncheckedUpdateWithoutCharacterPictureInput>
  }

  export type FileUpdateWithoutCharacterPictureInput = {
    id?: StringFieldUpdateOperationsInput | string
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutFilesNestedInput
    story?: StoryUpdateOneWithoutFilesNestedInput
    storyCoverArt?: StoryUpdateManyWithoutCoverArtFileNestedInput
    bookCoverArt?: BookUpdateManyWithoutCoverArtFileNestedInput
    bookSpineArt?: BookUpdateManyWithoutSpineArtFileNestedInput
    locationPicture?: LocationUpdateManyWithoutPictureFileNestedInput
  }

  export type FileUncheckedUpdateWithoutCharacterPictureInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    storyId?: NullableStringFieldUpdateOperationsInput | string | null
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storyCoverArt?: StoryUncheckedUpdateManyWithoutCoverArtFileNestedInput
    bookCoverArt?: BookUncheckedUpdateManyWithoutCoverArtFileNestedInput
    bookSpineArt?: BookUncheckedUpdateManyWithoutSpineArtFileNestedInput
    locationPicture?: LocationUncheckedUpdateManyWithoutPictureFileNestedInput
  }

  export type CharacterUpsertWithoutPreviousVersionInput = {
    update: XOR<CharacterUpdateWithoutPreviousVersionInput, CharacterUncheckedUpdateWithoutPreviousVersionInput>
    create: XOR<CharacterCreateWithoutPreviousVersionInput, CharacterUncheckedCreateWithoutPreviousVersionInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutPreviousVersionInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutPreviousVersionInput, CharacterUncheckedUpdateWithoutPreviousVersionInput>
  }

  export type CharacterUpdateWithoutPreviousVersionInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutCharactersNestedInput
    pictureFile?: FileUpdateOneWithoutCharacterPictureNestedInput
    laterVersionOf?: CharacterUpdateOneWithoutPreviousVersionNestedInput
    defaultProtagonistForStory?: StoryUpdateManyWithoutDefaultProtagonistNestedInput
    sceneProtagonistIn?: SceneUpdateManyWithoutProtagonistNestedInput
    participatingInScenes?: SceneCharacterUpdateManyWithoutCharacterNestedInput
    referredInScenes?: SceneReferredCharacterUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutPreviousVersionInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    laterVersionOfId?: NullableStringFieldUpdateOperationsInput | string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    defaultProtagonistForStory?: StoryUncheckedUpdateManyWithoutDefaultProtagonistNestedInput
    sceneProtagonistIn?: SceneUncheckedUpdateManyWithoutProtagonistNestedInput
    participatingInScenes?: SceneCharacterUncheckedUpdateManyWithoutCharacterNestedInput
    referredInScenes?: SceneReferredCharacterUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUpsertWithWhereUniqueWithoutLaterVersionOfInput = {
    where: CharacterWhereUniqueInput
    update: XOR<CharacterUpdateWithoutLaterVersionOfInput, CharacterUncheckedUpdateWithoutLaterVersionOfInput>
    create: XOR<CharacterCreateWithoutLaterVersionOfInput, CharacterUncheckedCreateWithoutLaterVersionOfInput>
  }

  export type CharacterUpdateWithWhereUniqueWithoutLaterVersionOfInput = {
    where: CharacterWhereUniqueInput
    data: XOR<CharacterUpdateWithoutLaterVersionOfInput, CharacterUncheckedUpdateWithoutLaterVersionOfInput>
  }

  export type CharacterUpdateManyWithWhereWithoutLaterVersionOfInput = {
    where: CharacterScalarWhereInput
    data: XOR<CharacterUpdateManyMutationInput, CharacterUncheckedUpdateManyWithoutLaterVersionOfInput>
  }

  export type StoryUpsertWithWhereUniqueWithoutDefaultProtagonistInput = {
    where: StoryWhereUniqueInput
    update: XOR<StoryUpdateWithoutDefaultProtagonistInput, StoryUncheckedUpdateWithoutDefaultProtagonistInput>
    create: XOR<StoryCreateWithoutDefaultProtagonistInput, StoryUncheckedCreateWithoutDefaultProtagonistInput>
  }

  export type StoryUpdateWithWhereUniqueWithoutDefaultProtagonistInput = {
    where: StoryWhereUniqueInput
    data: XOR<StoryUpdateWithoutDefaultProtagonistInput, StoryUncheckedUpdateWithoutDefaultProtagonistInput>
  }

  export type StoryUpdateManyWithWhereWithoutDefaultProtagonistInput = {
    where: StoryScalarWhereInput
    data: XOR<StoryUpdateManyMutationInput, StoryUncheckedUpdateManyWithoutDefaultProtagonistInput>
  }

  export type SceneUpsertWithWhereUniqueWithoutProtagonistInput = {
    where: SceneWhereUniqueInput
    update: XOR<SceneUpdateWithoutProtagonistInput, SceneUncheckedUpdateWithoutProtagonistInput>
    create: XOR<SceneCreateWithoutProtagonistInput, SceneUncheckedCreateWithoutProtagonistInput>
  }

  export type SceneUpdateWithWhereUniqueWithoutProtagonistInput = {
    where: SceneWhereUniqueInput
    data: XOR<SceneUpdateWithoutProtagonistInput, SceneUncheckedUpdateWithoutProtagonistInput>
  }

  export type SceneUpdateManyWithWhereWithoutProtagonistInput = {
    where: SceneScalarWhereInput
    data: XOR<SceneUpdateManyMutationInput, SceneUncheckedUpdateManyWithoutProtagonistInput>
  }

  export type SceneCharacterUpsertWithWhereUniqueWithoutCharacterInput = {
    where: SceneCharacterWhereUniqueInput
    update: XOR<SceneCharacterUpdateWithoutCharacterInput, SceneCharacterUncheckedUpdateWithoutCharacterInput>
    create: XOR<SceneCharacterCreateWithoutCharacterInput, SceneCharacterUncheckedCreateWithoutCharacterInput>
  }

  export type SceneCharacterUpdateWithWhereUniqueWithoutCharacterInput = {
    where: SceneCharacterWhereUniqueInput
    data: XOR<SceneCharacterUpdateWithoutCharacterInput, SceneCharacterUncheckedUpdateWithoutCharacterInput>
  }

  export type SceneCharacterUpdateManyWithWhereWithoutCharacterInput = {
    where: SceneCharacterScalarWhereInput
    data: XOR<SceneCharacterUpdateManyMutationInput, SceneCharacterUncheckedUpdateManyWithoutCharacterInput>
  }

  export type SceneReferredCharacterUpsertWithWhereUniqueWithoutCharacterInput = {
    where: SceneReferredCharacterWhereUniqueInput
    update: XOR<SceneReferredCharacterUpdateWithoutCharacterInput, SceneReferredCharacterUncheckedUpdateWithoutCharacterInput>
    create: XOR<SceneReferredCharacterCreateWithoutCharacterInput, SceneReferredCharacterUncheckedCreateWithoutCharacterInput>
  }

  export type SceneReferredCharacterUpdateWithWhereUniqueWithoutCharacterInput = {
    where: SceneReferredCharacterWhereUniqueInput
    data: XOR<SceneReferredCharacterUpdateWithoutCharacterInput, SceneReferredCharacterUncheckedUpdateWithoutCharacterInput>
  }

  export type SceneReferredCharacterUpdateManyWithWhereWithoutCharacterInput = {
    where: SceneReferredCharacterScalarWhereInput
    data: XOR<SceneReferredCharacterUpdateManyMutationInput, SceneReferredCharacterUncheckedUpdateManyWithoutCharacterInput>
  }

  export type StoryCreateWithoutLocationsInput = {
    id?: string
    name?: string
    summary?: string | null
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    owner: UserCreateNestedOneWithoutOwnedStoriesInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutStoryInput
    coverArtFile?: FileCreateNestedOneWithoutStoryCoverArtInput
    defaultProtagonist?: CharacterCreateNestedOneWithoutDefaultProtagonistForStoryInput
    books?: BookCreateNestedManyWithoutStoryInput
    files?: FileCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagCreateNestedManyWithoutStoryInput
    characters?: CharacterCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointCreateNestedManyWithoutStoryInput
    items?: ItemCreateNestedManyWithoutStoryInput
  }

  export type StoryUncheckedCreateWithoutLocationsInput = {
    id?: string
    name?: string
    summary?: string | null
    ownerId: number
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverArtFileId?: string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    defaultProtagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutStoryInput
    books?: BookUncheckedCreateNestedManyWithoutStoryInput
    files?: FileUncheckedCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagUncheckedCreateNestedManyWithoutStoryInput
    characters?: CharacterUncheckedCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointUncheckedCreateNestedManyWithoutStoryInput
    items?: ItemUncheckedCreateNestedManyWithoutStoryInput
  }

  export type StoryCreateOrConnectWithoutLocationsInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutLocationsInput, StoryUncheckedCreateWithoutLocationsInput>
  }

  export type FileCreateWithoutLocationPictureInput = {
    id?: string
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutFilesInput
    story?: StoryCreateNestedOneWithoutFilesInput
    storyCoverArt?: StoryCreateNestedManyWithoutCoverArtFileInput
    bookCoverArt?: BookCreateNestedManyWithoutCoverArtFileInput
    bookSpineArt?: BookCreateNestedManyWithoutSpineArtFileInput
    characterPicture?: CharacterCreateNestedManyWithoutPictureFileInput
  }

  export type FileUncheckedCreateWithoutLocationPictureInput = {
    id?: string
    ownerId: number
    storyId?: string | null
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
    storyCoverArt?: StoryUncheckedCreateNestedManyWithoutCoverArtFileInput
    bookCoverArt?: BookUncheckedCreateNestedManyWithoutCoverArtFileInput
    bookSpineArt?: BookUncheckedCreateNestedManyWithoutSpineArtFileInput
    characterPicture?: CharacterUncheckedCreateNestedManyWithoutPictureFileInput
  }

  export type FileCreateOrConnectWithoutLocationPictureInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutLocationPictureInput, FileUncheckedCreateWithoutLocationPictureInput>
  }

  export type SceneCreateWithoutLocationInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chapter: ChapterCreateNestedOneWithoutScenesInput
    protagonist?: CharacterCreateNestedOneWithoutSceneProtagonistInInput
    paragraphs?: ParagraphCreateNestedManyWithoutSceneInput
    participatingCharacters?: SceneCharacterCreateNestedManyWithoutSceneInput
    referredCharacters?: SceneReferredCharacterCreateNestedManyWithoutSceneInput
  }

  export type SceneUncheckedCreateWithoutLocationInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    chapterId: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    protagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paragraphs?: ParagraphUncheckedCreateNestedManyWithoutSceneInput
    participatingCharacters?: SceneCharacterUncheckedCreateNestedManyWithoutSceneInput
    referredCharacters?: SceneReferredCharacterUncheckedCreateNestedManyWithoutSceneInput
  }

  export type SceneCreateOrConnectWithoutLocationInput = {
    where: SceneWhereUniqueInput
    create: XOR<SceneCreateWithoutLocationInput, SceneUncheckedCreateWithoutLocationInput>
  }

  export type SceneCreateManyLocationInputEnvelope = {
    data: SceneCreateManyLocationInput | SceneCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type StoryUpsertWithoutLocationsInput = {
    update: XOR<StoryUpdateWithoutLocationsInput, StoryUncheckedUpdateWithoutLocationsInput>
    create: XOR<StoryCreateWithoutLocationsInput, StoryUncheckedCreateWithoutLocationsInput>
    where?: StoryWhereInput
  }

  export type StoryUpdateToOneWithWhereWithoutLocationsInput = {
    where?: StoryWhereInput
    data: XOR<StoryUpdateWithoutLocationsInput, StoryUncheckedUpdateWithoutLocationsInput>
  }

  export type StoryUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: UserUpdateOneRequiredWithoutOwnedStoriesNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutStoryNestedInput
    coverArtFile?: FileUpdateOneWithoutStoryCoverArtNestedInput
    defaultProtagonist?: CharacterUpdateOneWithoutDefaultProtagonistForStoryNestedInput
    books?: BookUpdateManyWithoutStoryNestedInput
    files?: FileUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUpdateManyWithoutStoryNestedInput
    characters?: CharacterUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUpdateManyWithoutStoryNestedInput
    items?: ItemUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    defaultProtagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutStoryNestedInput
    books?: BookUncheckedUpdateManyWithoutStoryNestedInput
    files?: FileUncheckedUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUncheckedUpdateManyWithoutStoryNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUncheckedUpdateManyWithoutStoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutStoryNestedInput
  }

  export type FileUpsertWithoutLocationPictureInput = {
    update: XOR<FileUpdateWithoutLocationPictureInput, FileUncheckedUpdateWithoutLocationPictureInput>
    create: XOR<FileCreateWithoutLocationPictureInput, FileUncheckedCreateWithoutLocationPictureInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutLocationPictureInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutLocationPictureInput, FileUncheckedUpdateWithoutLocationPictureInput>
  }

  export type FileUpdateWithoutLocationPictureInput = {
    id?: StringFieldUpdateOperationsInput | string
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutFilesNestedInput
    story?: StoryUpdateOneWithoutFilesNestedInput
    storyCoverArt?: StoryUpdateManyWithoutCoverArtFileNestedInput
    bookCoverArt?: BookUpdateManyWithoutCoverArtFileNestedInput
    bookSpineArt?: BookUpdateManyWithoutSpineArtFileNestedInput
    characterPicture?: CharacterUpdateManyWithoutPictureFileNestedInput
  }

  export type FileUncheckedUpdateWithoutLocationPictureInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    storyId?: NullableStringFieldUpdateOperationsInput | string | null
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storyCoverArt?: StoryUncheckedUpdateManyWithoutCoverArtFileNestedInput
    bookCoverArt?: BookUncheckedUpdateManyWithoutCoverArtFileNestedInput
    bookSpineArt?: BookUncheckedUpdateManyWithoutSpineArtFileNestedInput
    characterPicture?: CharacterUncheckedUpdateManyWithoutPictureFileNestedInput
  }

  export type SceneUpsertWithWhereUniqueWithoutLocationInput = {
    where: SceneWhereUniqueInput
    update: XOR<SceneUpdateWithoutLocationInput, SceneUncheckedUpdateWithoutLocationInput>
    create: XOR<SceneCreateWithoutLocationInput, SceneUncheckedCreateWithoutLocationInput>
  }

  export type SceneUpdateWithWhereUniqueWithoutLocationInput = {
    where: SceneWhereUniqueInput
    data: XOR<SceneUpdateWithoutLocationInput, SceneUncheckedUpdateWithoutLocationInput>
  }

  export type SceneUpdateManyWithWhereWithoutLocationInput = {
    where: SceneScalarWhereInput
    data: XOR<SceneUpdateManyMutationInput, SceneUncheckedUpdateManyWithoutLocationInput>
  }

  export type StoryCreateWithoutPlotPointsInput = {
    id?: string
    name?: string
    summary?: string | null
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    owner: UserCreateNestedOneWithoutOwnedStoriesInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutStoryInput
    coverArtFile?: FileCreateNestedOneWithoutStoryCoverArtInput
    defaultProtagonist?: CharacterCreateNestedOneWithoutDefaultProtagonistForStoryInput
    books?: BookCreateNestedManyWithoutStoryInput
    files?: FileCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagCreateNestedManyWithoutStoryInput
    characters?: CharacterCreateNestedManyWithoutStoryInput
    locations?: LocationCreateNestedManyWithoutStoryInput
    items?: ItemCreateNestedManyWithoutStoryInput
  }

  export type StoryUncheckedCreateWithoutPlotPointsInput = {
    id?: string
    name?: string
    summary?: string | null
    ownerId: number
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverArtFileId?: string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    defaultProtagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutStoryInput
    books?: BookUncheckedCreateNestedManyWithoutStoryInput
    files?: FileUncheckedCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagUncheckedCreateNestedManyWithoutStoryInput
    characters?: CharacterUncheckedCreateNestedManyWithoutStoryInput
    locations?: LocationUncheckedCreateNestedManyWithoutStoryInput
    items?: ItemUncheckedCreateNestedManyWithoutStoryInput
  }

  export type StoryCreateOrConnectWithoutPlotPointsInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutPlotPointsInput, StoryUncheckedCreateWithoutPlotPointsInput>
  }

  export type StoryUpsertWithoutPlotPointsInput = {
    update: XOR<StoryUpdateWithoutPlotPointsInput, StoryUncheckedUpdateWithoutPlotPointsInput>
    create: XOR<StoryCreateWithoutPlotPointsInput, StoryUncheckedCreateWithoutPlotPointsInput>
    where?: StoryWhereInput
  }

  export type StoryUpdateToOneWithWhereWithoutPlotPointsInput = {
    where?: StoryWhereInput
    data: XOR<StoryUpdateWithoutPlotPointsInput, StoryUncheckedUpdateWithoutPlotPointsInput>
  }

  export type StoryUpdateWithoutPlotPointsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: UserUpdateOneRequiredWithoutOwnedStoriesNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutStoryNestedInput
    coverArtFile?: FileUpdateOneWithoutStoryCoverArtNestedInput
    defaultProtagonist?: CharacterUpdateOneWithoutDefaultProtagonistForStoryNestedInput
    books?: BookUpdateManyWithoutStoryNestedInput
    files?: FileUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUpdateManyWithoutStoryNestedInput
    characters?: CharacterUpdateManyWithoutStoryNestedInput
    locations?: LocationUpdateManyWithoutStoryNestedInput
    items?: ItemUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateWithoutPlotPointsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    defaultProtagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutStoryNestedInput
    books?: BookUncheckedUpdateManyWithoutStoryNestedInput
    files?: FileUncheckedUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUncheckedUpdateManyWithoutStoryNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutStoryNestedInput
    locations?: LocationUncheckedUpdateManyWithoutStoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutStoryNestedInput
  }

  export type StoryCreateWithoutItemsInput = {
    id?: string
    name?: string
    summary?: string | null
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    owner: UserCreateNestedOneWithoutOwnedStoriesInput
    bookShelfStories?: BookShelfStoryCreateNestedManyWithoutStoryInput
    coverArtFile?: FileCreateNestedOneWithoutStoryCoverArtInput
    defaultProtagonist?: CharacterCreateNestedOneWithoutDefaultProtagonistForStoryInput
    books?: BookCreateNestedManyWithoutStoryInput
    files?: FileCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagCreateNestedManyWithoutStoryInput
    characters?: CharacterCreateNestedManyWithoutStoryInput
    locations?: LocationCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointCreateNestedManyWithoutStoryInput
  }

  export type StoryUncheckedCreateWithoutItemsInput = {
    id?: string
    name?: string
    summary?: string | null
    ownerId: number
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverArtFileId?: string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    defaultProtagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
    bookShelfStories?: BookShelfStoryUncheckedCreateNestedManyWithoutStoryInput
    books?: BookUncheckedCreateNestedManyWithoutStoryInput
    files?: FileUncheckedCreateNestedManyWithoutStoryInput
    storyReadStatuses?: StoryReadStatusUncheckedCreateNestedManyWithoutStoryInput
    storyTags?: StoryTagUncheckedCreateNestedManyWithoutStoryInput
    characters?: CharacterUncheckedCreateNestedManyWithoutStoryInput
    locations?: LocationUncheckedCreateNestedManyWithoutStoryInput
    plotPoints?: PlotPointUncheckedCreateNestedManyWithoutStoryInput
  }

  export type StoryCreateOrConnectWithoutItemsInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutItemsInput, StoryUncheckedCreateWithoutItemsInput>
  }

  export type StoryUpsertWithoutItemsInput = {
    update: XOR<StoryUpdateWithoutItemsInput, StoryUncheckedUpdateWithoutItemsInput>
    create: XOR<StoryCreateWithoutItemsInput, StoryUncheckedCreateWithoutItemsInput>
    where?: StoryWhereInput
  }

  export type StoryUpdateToOneWithWhereWithoutItemsInput = {
    where?: StoryWhereInput
    data: XOR<StoryUpdateWithoutItemsInput, StoryUncheckedUpdateWithoutItemsInput>
  }

  export type StoryUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: UserUpdateOneRequiredWithoutOwnedStoriesNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutStoryNestedInput
    coverArtFile?: FileUpdateOneWithoutStoryCoverArtNestedInput
    defaultProtagonist?: CharacterUpdateOneWithoutDefaultProtagonistForStoryNestedInput
    books?: BookUpdateManyWithoutStoryNestedInput
    files?: FileUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUpdateManyWithoutStoryNestedInput
    characters?: CharacterUpdateManyWithoutStoryNestedInput
    locations?: LocationUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    defaultProtagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutStoryNestedInput
    books?: BookUncheckedUpdateManyWithoutStoryNestedInput
    files?: FileUncheckedUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUncheckedUpdateManyWithoutStoryNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutStoryNestedInput
    locations?: LocationUncheckedUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUncheckedUpdateManyWithoutStoryNestedInput
  }

  export type SceneCreateWithoutParticipatingCharactersInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chapter: ChapterCreateNestedOneWithoutScenesInput
    protagonist?: CharacterCreateNestedOneWithoutSceneProtagonistInInput
    location?: LocationCreateNestedOneWithoutScenesInput
    paragraphs?: ParagraphCreateNestedManyWithoutSceneInput
    referredCharacters?: SceneReferredCharacterCreateNestedManyWithoutSceneInput
  }

  export type SceneUncheckedCreateWithoutParticipatingCharactersInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    chapterId: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    protagonistId?: string | null
    locationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paragraphs?: ParagraphUncheckedCreateNestedManyWithoutSceneInput
    referredCharacters?: SceneReferredCharacterUncheckedCreateNestedManyWithoutSceneInput
  }

  export type SceneCreateOrConnectWithoutParticipatingCharactersInput = {
    where: SceneWhereUniqueInput
    create: XOR<SceneCreateWithoutParticipatingCharactersInput, SceneUncheckedCreateWithoutParticipatingCharactersInput>
  }

  export type CharacterCreateWithoutParticipatingInScenesInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutCharactersInput
    pictureFile?: FileCreateNestedOneWithoutCharacterPictureInput
    laterVersionOf?: CharacterCreateNestedOneWithoutPreviousVersionInput
    previousVersion?: CharacterCreateNestedManyWithoutLaterVersionOfInput
    defaultProtagonistForStory?: StoryCreateNestedManyWithoutDefaultProtagonistInput
    sceneProtagonistIn?: SceneCreateNestedManyWithoutProtagonistInput
    referredInScenes?: SceneReferredCharacterCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutParticipatingInScenesInput = {
    id?: string
    storyId: string
    pictureFileId?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    laterVersionOfId?: string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    previousVersion?: CharacterUncheckedCreateNestedManyWithoutLaterVersionOfInput
    defaultProtagonistForStory?: StoryUncheckedCreateNestedManyWithoutDefaultProtagonistInput
    sceneProtagonistIn?: SceneUncheckedCreateNestedManyWithoutProtagonistInput
    referredInScenes?: SceneReferredCharacterUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutParticipatingInScenesInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutParticipatingInScenesInput, CharacterUncheckedCreateWithoutParticipatingInScenesInput>
  }

  export type SceneUpsertWithoutParticipatingCharactersInput = {
    update: XOR<SceneUpdateWithoutParticipatingCharactersInput, SceneUncheckedUpdateWithoutParticipatingCharactersInput>
    create: XOR<SceneCreateWithoutParticipatingCharactersInput, SceneUncheckedCreateWithoutParticipatingCharactersInput>
    where?: SceneWhereInput
  }

  export type SceneUpdateToOneWithWhereWithoutParticipatingCharactersInput = {
    where?: SceneWhereInput
    data: XOR<SceneUpdateWithoutParticipatingCharactersInput, SceneUncheckedUpdateWithoutParticipatingCharactersInput>
  }

  export type SceneUpdateWithoutParticipatingCharactersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapter?: ChapterUpdateOneRequiredWithoutScenesNestedInput
    protagonist?: CharacterUpdateOneWithoutSceneProtagonistInNestedInput
    location?: LocationUpdateOneWithoutScenesNestedInput
    paragraphs?: ParagraphUpdateManyWithoutSceneNestedInput
    referredCharacters?: SceneReferredCharacterUpdateManyWithoutSceneNestedInput
  }

  export type SceneUncheckedUpdateWithoutParticipatingCharactersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    chapterId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    protagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paragraphs?: ParagraphUncheckedUpdateManyWithoutSceneNestedInput
    referredCharacters?: SceneReferredCharacterUncheckedUpdateManyWithoutSceneNestedInput
  }

  export type CharacterUpsertWithoutParticipatingInScenesInput = {
    update: XOR<CharacterUpdateWithoutParticipatingInScenesInput, CharacterUncheckedUpdateWithoutParticipatingInScenesInput>
    create: XOR<CharacterCreateWithoutParticipatingInScenesInput, CharacterUncheckedCreateWithoutParticipatingInScenesInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutParticipatingInScenesInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutParticipatingInScenesInput, CharacterUncheckedUpdateWithoutParticipatingInScenesInput>
  }

  export type CharacterUpdateWithoutParticipatingInScenesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutCharactersNestedInput
    pictureFile?: FileUpdateOneWithoutCharacterPictureNestedInput
    laterVersionOf?: CharacterUpdateOneWithoutPreviousVersionNestedInput
    previousVersion?: CharacterUpdateManyWithoutLaterVersionOfNestedInput
    defaultProtagonistForStory?: StoryUpdateManyWithoutDefaultProtagonistNestedInput
    sceneProtagonistIn?: SceneUpdateManyWithoutProtagonistNestedInput
    referredInScenes?: SceneReferredCharacterUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutParticipatingInScenesInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    laterVersionOfId?: NullableStringFieldUpdateOperationsInput | string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousVersion?: CharacterUncheckedUpdateManyWithoutLaterVersionOfNestedInput
    defaultProtagonistForStory?: StoryUncheckedUpdateManyWithoutDefaultProtagonistNestedInput
    sceneProtagonistIn?: SceneUncheckedUpdateManyWithoutProtagonistNestedInput
    referredInScenes?: SceneReferredCharacterUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type SceneCreateWithoutReferredCharactersInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chapter: ChapterCreateNestedOneWithoutScenesInput
    protagonist?: CharacterCreateNestedOneWithoutSceneProtagonistInInput
    location?: LocationCreateNestedOneWithoutScenesInput
    paragraphs?: ParagraphCreateNestedManyWithoutSceneInput
    participatingCharacters?: SceneCharacterCreateNestedManyWithoutSceneInput
  }

  export type SceneUncheckedCreateWithoutReferredCharactersInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    chapterId: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    protagonistId?: string | null
    locationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paragraphs?: ParagraphUncheckedCreateNestedManyWithoutSceneInput
    participatingCharacters?: SceneCharacterUncheckedCreateNestedManyWithoutSceneInput
  }

  export type SceneCreateOrConnectWithoutReferredCharactersInput = {
    where: SceneWhereUniqueInput
    create: XOR<SceneCreateWithoutReferredCharactersInput, SceneUncheckedCreateWithoutReferredCharactersInput>
  }

  export type CharacterCreateWithoutReferredInScenesInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    story: StoryCreateNestedOneWithoutCharactersInput
    pictureFile?: FileCreateNestedOneWithoutCharacterPictureInput
    laterVersionOf?: CharacterCreateNestedOneWithoutPreviousVersionInput
    previousVersion?: CharacterCreateNestedManyWithoutLaterVersionOfInput
    defaultProtagonistForStory?: StoryCreateNestedManyWithoutDefaultProtagonistInput
    sceneProtagonistIn?: SceneCreateNestedManyWithoutProtagonistInput
    participatingInScenes?: SceneCharacterCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutReferredInScenesInput = {
    id?: string
    storyId: string
    pictureFileId?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    laterVersionOfId?: string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    previousVersion?: CharacterUncheckedCreateNestedManyWithoutLaterVersionOfInput
    defaultProtagonistForStory?: StoryUncheckedCreateNestedManyWithoutDefaultProtagonistInput
    sceneProtagonistIn?: SceneUncheckedCreateNestedManyWithoutProtagonistInput
    participatingInScenes?: SceneCharacterUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutReferredInScenesInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutReferredInScenesInput, CharacterUncheckedCreateWithoutReferredInScenesInput>
  }

  export type SceneUpsertWithoutReferredCharactersInput = {
    update: XOR<SceneUpdateWithoutReferredCharactersInput, SceneUncheckedUpdateWithoutReferredCharactersInput>
    create: XOR<SceneCreateWithoutReferredCharactersInput, SceneUncheckedCreateWithoutReferredCharactersInput>
    where?: SceneWhereInput
  }

  export type SceneUpdateToOneWithWhereWithoutReferredCharactersInput = {
    where?: SceneWhereInput
    data: XOR<SceneUpdateWithoutReferredCharactersInput, SceneUncheckedUpdateWithoutReferredCharactersInput>
  }

  export type SceneUpdateWithoutReferredCharactersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapter?: ChapterUpdateOneRequiredWithoutScenesNestedInput
    protagonist?: CharacterUpdateOneWithoutSceneProtagonistInNestedInput
    location?: LocationUpdateOneWithoutScenesNestedInput
    paragraphs?: ParagraphUpdateManyWithoutSceneNestedInput
    participatingCharacters?: SceneCharacterUpdateManyWithoutSceneNestedInput
  }

  export type SceneUncheckedUpdateWithoutReferredCharactersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    chapterId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    protagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paragraphs?: ParagraphUncheckedUpdateManyWithoutSceneNestedInput
    participatingCharacters?: SceneCharacterUncheckedUpdateManyWithoutSceneNestedInput
  }

  export type CharacterUpsertWithoutReferredInScenesInput = {
    update: XOR<CharacterUpdateWithoutReferredInScenesInput, CharacterUncheckedUpdateWithoutReferredInScenesInput>
    create: XOR<CharacterCreateWithoutReferredInScenesInput, CharacterUncheckedCreateWithoutReferredInScenesInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutReferredInScenesInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutReferredInScenesInput, CharacterUncheckedUpdateWithoutReferredInScenesInput>
  }

  export type CharacterUpdateWithoutReferredInScenesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutCharactersNestedInput
    pictureFile?: FileUpdateOneWithoutCharacterPictureNestedInput
    laterVersionOf?: CharacterUpdateOneWithoutPreviousVersionNestedInput
    previousVersion?: CharacterUpdateManyWithoutLaterVersionOfNestedInput
    defaultProtagonistForStory?: StoryUpdateManyWithoutDefaultProtagonistNestedInput
    sceneProtagonistIn?: SceneUpdateManyWithoutProtagonistNestedInput
    participatingInScenes?: SceneCharacterUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutReferredInScenesInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    laterVersionOfId?: NullableStringFieldUpdateOperationsInput | string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousVersion?: CharacterUncheckedUpdateManyWithoutLaterVersionOfNestedInput
    defaultProtagonistForStory?: StoryUncheckedUpdateManyWithoutDefaultProtagonistNestedInput
    sceneProtagonistIn?: SceneUncheckedUpdateManyWithoutProtagonistNestedInput
    participatingInScenes?: SceneCharacterUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type StoryCreateManyOwnerInput = {
    id?: string
    name?: string
    summary?: string | null
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverArtFileId?: string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    defaultProtagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
  }

  export type BookShelfStoryCreateManyOwnerInput = {
    id?: number
    name?: string
    storyId: string
    kind: $Enums.SavedType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccessKeyCreateManyOwnerInput = {
    id?: number
    key: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastUsedAt?: Date | string | null
  }

  export type ParagraphCommentCreateManyOwnerInput = {
    id?: number
    paragraphRevisionId: string
    body: string
    type?: $Enums.ParagraphCommentType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateManyOwnerInput = {
    id?: string
    storyId?: string | null
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateManyOwnerInput = {
    id?: string
    validUntil: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryReadStatusCreateManyUserInput = {
    id?: string
    storyId: string
    lastChapterId?: string | null
    lastChapterReadAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    bookShelfStories?: BookShelfStoryUpdateManyWithoutStoryNestedInput
    coverArtFile?: FileUpdateOneWithoutStoryCoverArtNestedInput
    defaultProtagonist?: CharacterUpdateOneWithoutDefaultProtagonistForStoryNestedInput
    books?: BookUpdateManyWithoutStoryNestedInput
    files?: FileUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUpdateManyWithoutStoryNestedInput
    characters?: CharacterUpdateManyWithoutStoryNestedInput
    locations?: LocationUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUpdateManyWithoutStoryNestedInput
    items?: ItemUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    defaultProtagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutStoryNestedInput
    books?: BookUncheckedUpdateManyWithoutStoryNestedInput
    files?: FileUncheckedUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUncheckedUpdateManyWithoutStoryNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutStoryNestedInput
    locations?: LocationUncheckedUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUncheckedUpdateManyWithoutStoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    defaultProtagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookShelfStoryUpdateWithoutOwnerInput = {
    name?: StringFieldUpdateOperationsInput | string
    kind?: EnumSavedTypeFieldUpdateOperationsInput | $Enums.SavedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutBookShelfStoriesNestedInput
  }

  export type BookShelfStoryUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    kind?: EnumSavedTypeFieldUpdateOperationsInput | $Enums.SavedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookShelfStoryUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    kind?: EnumSavedTypeFieldUpdateOperationsInput | $Enums.SavedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccessKeyUpdateWithoutOwnerInput = {
    key?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccessKeyUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccessKeyUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ParagraphCommentUpdateWithoutOwnerInput = {
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumParagraphCommentTypeFieldUpdateOperationsInput | $Enums.ParagraphCommentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paragraphRevision?: ParagraphRevisionUpdateOneRequiredWithoutParagraphCommentNestedInput
  }

  export type ParagraphCommentUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    paragraphRevisionId?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumParagraphCommentTypeFieldUpdateOperationsInput | $Enums.ParagraphCommentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParagraphCommentUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    paragraphRevisionId?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumParagraphCommentTypeFieldUpdateOperationsInput | $Enums.ParagraphCommentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneWithoutFilesNestedInput
    storyCoverArt?: StoryUpdateManyWithoutCoverArtFileNestedInput
    bookCoverArt?: BookUpdateManyWithoutCoverArtFileNestedInput
    bookSpineArt?: BookUpdateManyWithoutSpineArtFileNestedInput
    characterPicture?: CharacterUpdateManyWithoutPictureFileNestedInput
    locationPicture?: LocationUpdateManyWithoutPictureFileNestedInput
  }

  export type FileUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: NullableStringFieldUpdateOperationsInput | string | null
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storyCoverArt?: StoryUncheckedUpdateManyWithoutCoverArtFileNestedInput
    bookCoverArt?: BookUncheckedUpdateManyWithoutCoverArtFileNestedInput
    bookSpineArt?: BookUncheckedUpdateManyWithoutSpineArtFileNestedInput
    characterPicture?: CharacterUncheckedUpdateManyWithoutPictureFileNestedInput
    locationPicture?: LocationUncheckedUpdateManyWithoutPictureFileNestedInput
  }

  export type FileUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: NullableStringFieldUpdateOperationsInput | string | null
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    validUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryReadStatusUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastChapterReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutStoryReadStatusesNestedInput
    lastChapter?: ChapterUpdateOneWithoutStoryReadStatusNestedInput
  }

  export type StoryReadStatusUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    lastChapterId?: NullableStringFieldUpdateOperationsInput | string | null
    lastChapterReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryReadStatusUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    lastChapterId?: NullableStringFieldUpdateOperationsInput | string | null
    lastChapterReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookShelfStoryCreateManyStoryInput = {
    id?: number
    name?: string
    ownerId: number
    kind: $Enums.SavedType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookCreateManyStoryInput = {
    id?: string
    name?: string
    summary?: string | null
    coverArtFileId?: string | null
    spineArtFileId?: string | null
    pages?: number | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateManyStoryInput = {
    id?: string
    ownerId: number
    localPath?: string | null
    path: string
    sha256?: string
    width?: number | null
    height?: number | null
    bytes?: number | null
    mimeType: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryReadStatusCreateManyStoryInput = {
    id?: string
    userId: number
    lastChapterId?: string | null
    lastChapterReadAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryTagCreateManyStoryInput = {
    id?: string
    tagId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterCreateManyStoryInput = {
    id?: string
    pictureFileId?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    laterVersionOfId?: string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationCreateManyStoryInput = {
    id?: string
    name: string
    pictureFileId?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlotPointCreateManyStoryInput = {
    id?: string
    title: string
    summary?: string | null
    state?: $Enums.PlotPointState
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ItemCreateManyStoryInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookShelfStoryUpdateWithoutStoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    kind?: EnumSavedTypeFieldUpdateOperationsInput | $Enums.SavedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutBookShelfStoriesNestedInput
  }

  export type BookShelfStoryUncheckedUpdateWithoutStoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    kind?: EnumSavedTypeFieldUpdateOperationsInput | $Enums.SavedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookShelfStoryUncheckedUpdateManyWithoutStoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    kind?: EnumSavedTypeFieldUpdateOperationsInput | $Enums.SavedType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coverArtFile?: FileUpdateOneWithoutBookCoverArtNestedInput
    spineArtFile?: FileUpdateOneWithoutBookSpineArtNestedInput
    arcs?: ArcUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    spineArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    arcs?: ArcUncheckedUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateManyWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    spineArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutFilesNestedInput
    storyCoverArt?: StoryUpdateManyWithoutCoverArtFileNestedInput
    bookCoverArt?: BookUpdateManyWithoutCoverArtFileNestedInput
    bookSpineArt?: BookUpdateManyWithoutSpineArtFileNestedInput
    characterPicture?: CharacterUpdateManyWithoutPictureFileNestedInput
    locationPicture?: LocationUpdateManyWithoutPictureFileNestedInput
  }

  export type FileUncheckedUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storyCoverArt?: StoryUncheckedUpdateManyWithoutCoverArtFileNestedInput
    bookCoverArt?: BookUncheckedUpdateManyWithoutCoverArtFileNestedInput
    bookSpineArt?: BookUncheckedUpdateManyWithoutSpineArtFileNestedInput
    characterPicture?: CharacterUncheckedUpdateManyWithoutPictureFileNestedInput
    locationPicture?: LocationUncheckedUpdateManyWithoutPictureFileNestedInput
  }

  export type FileUncheckedUpdateManyWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    localPath?: NullableStringFieldUpdateOperationsInput | string | null
    path?: StringFieldUpdateOperationsInput | string
    sha256?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    bytes?: NullableIntFieldUpdateOperationsInput | number | null
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryReadStatusUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastChapterReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStoryReadStatusesNestedInput
    lastChapter?: ChapterUpdateOneWithoutStoryReadStatusNestedInput
  }

  export type StoryReadStatusUncheckedUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    lastChapterId?: NullableStringFieldUpdateOperationsInput | string | null
    lastChapterReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryReadStatusUncheckedUpdateManyWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    lastChapterId?: NullableStringFieldUpdateOperationsInput | string | null
    lastChapterReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryTagUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: TagUpdateOneRequiredWithoutStoryTagsNestedInput
  }

  export type StoryTagUncheckedUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryTagUncheckedUpdateManyWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pictureFile?: FileUpdateOneWithoutCharacterPictureNestedInput
    laterVersionOf?: CharacterUpdateOneWithoutPreviousVersionNestedInput
    previousVersion?: CharacterUpdateManyWithoutLaterVersionOfNestedInput
    defaultProtagonistForStory?: StoryUpdateManyWithoutDefaultProtagonistNestedInput
    sceneProtagonistIn?: SceneUpdateManyWithoutProtagonistNestedInput
    participatingInScenes?: SceneCharacterUpdateManyWithoutCharacterNestedInput
    referredInScenes?: SceneReferredCharacterUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    laterVersionOfId?: NullableStringFieldUpdateOperationsInput | string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousVersion?: CharacterUncheckedUpdateManyWithoutLaterVersionOfNestedInput
    defaultProtagonistForStory?: StoryUncheckedUpdateManyWithoutDefaultProtagonistNestedInput
    sceneProtagonistIn?: SceneUncheckedUpdateManyWithoutProtagonistNestedInput
    participatingInScenes?: SceneCharacterUncheckedUpdateManyWithoutCharacterNestedInput
    referredInScenes?: SceneReferredCharacterUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateManyWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    laterVersionOfId?: NullableStringFieldUpdateOperationsInput | string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pictureFile?: FileUpdateOneWithoutLocationPictureNestedInput
    scenes?: SceneUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scenes?: SceneUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateManyWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlotPointUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumPlotPointStateFieldUpdateOperationsInput | $Enums.PlotPointState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlotPointUncheckedUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumPlotPointStateFieldUpdateOperationsInput | $Enums.PlotPointState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlotPointUncheckedUpdateManyWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumPlotPointStateFieldUpdateOperationsInput | $Enums.PlotPointState
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemUncheckedUpdateWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemUncheckedUpdateManyWithoutStoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryTagCreateManyTagInput = {
    id?: string
    storyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryTagUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutStoryTagsNestedInput
  }

  export type StoryTagUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryTagUncheckedUpdateManyWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArcCreateManyBookInput = {
    id?: string
    name?: string
    summary?: string | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArcUpdateWithoutBookInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapters?: ChapterUpdateManyWithoutArcNestedInput
  }

  export type ArcUncheckedUpdateWithoutBookInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapters?: ChapterUncheckedUpdateManyWithoutArcNestedInput
  }

  export type ArcUncheckedUpdateManyWithoutBookInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterCreateManyArcInput = {
    id?: string
    name?: string
    summary?: string | null
    publishedOn?: Date | string | null
    sortOrder: number
    royalRoadId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nodeType?: string
  }

  export type ChapterUpdateWithoutArcInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    publishedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodeType?: StringFieldUpdateOperationsInput | string
    scenes?: SceneUpdateManyWithoutChapterNestedInput
    StoryReadStatus?: StoryReadStatusUpdateManyWithoutLastChapterNestedInput
    publishingStatus?: ChapterPublishingUpdateManyWithoutChapterNestedInput
  }

  export type ChapterUncheckedUpdateWithoutArcInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    publishedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodeType?: StringFieldUpdateOperationsInput | string
    scenes?: SceneUncheckedUpdateManyWithoutChapterNestedInput
    StoryReadStatus?: StoryReadStatusUncheckedUpdateManyWithoutLastChapterNestedInput
    publishingStatus?: ChapterPublishingUncheckedUpdateManyWithoutChapterNestedInput
  }

  export type ChapterUncheckedUpdateManyWithoutArcInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    publishedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodeType?: StringFieldUpdateOperationsInput | string
  }

  export type SceneCreateManyChapterInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    protagonistId?: string | null
    locationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryReadStatusCreateManyLastChapterInput = {
    id?: string
    storyId: string
    userId: number
    lastChapterReadAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChapterPublishingCreateManyChapterInput = {
    id?: string
    platform: $Enums.PublishingPlatform
    status?: $Enums.PublishingStatus
    platformId?: string | null
    publishedAt?: Date | string | null
    lastAttempt?: Date | string | null
    errorMessage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SceneUpdateWithoutChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    protagonist?: CharacterUpdateOneWithoutSceneProtagonistInNestedInput
    location?: LocationUpdateOneWithoutScenesNestedInput
    paragraphs?: ParagraphUpdateManyWithoutSceneNestedInput
    participatingCharacters?: SceneCharacterUpdateManyWithoutSceneNestedInput
    referredCharacters?: SceneReferredCharacterUpdateManyWithoutSceneNestedInput
  }

  export type SceneUncheckedUpdateWithoutChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    protagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paragraphs?: ParagraphUncheckedUpdateManyWithoutSceneNestedInput
    participatingCharacters?: SceneCharacterUncheckedUpdateManyWithoutSceneNestedInput
    referredCharacters?: SceneReferredCharacterUncheckedUpdateManyWithoutSceneNestedInput
  }

  export type SceneUncheckedUpdateManyWithoutChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    protagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryReadStatusUpdateWithoutLastChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    lastChapterReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutStoryReadStatusesNestedInput
    user?: UserUpdateOneRequiredWithoutStoryReadStatusesNestedInput
  }

  export type StoryReadStatusUncheckedUpdateWithoutLastChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    lastChapterReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryReadStatusUncheckedUpdateManyWithoutLastChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    lastChapterReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterPublishingUpdateWithoutChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPublishingPlatformFieldUpdateOperationsInput | $Enums.PublishingPlatform
    status?: EnumPublishingStatusFieldUpdateOperationsInput | $Enums.PublishingStatus
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAttempt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterPublishingUncheckedUpdateWithoutChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPublishingPlatformFieldUpdateOperationsInput | $Enums.PublishingPlatform
    status?: EnumPublishingStatusFieldUpdateOperationsInput | $Enums.PublishingStatus
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAttempt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterPublishingUncheckedUpdateManyWithoutChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPublishingPlatformFieldUpdateOperationsInput | $Enums.PublishingPlatform
    status?: EnumPublishingStatusFieldUpdateOperationsInput | $Enums.PublishingStatus
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAttempt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParagraphCreateManySceneInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder: number
  }

  export type SceneCharacterCreateManySceneInput = {
    characterId: string
    assignedAt?: Date | string
  }

  export type SceneReferredCharacterCreateManySceneInput = {
    characterId: string
    assignedAt?: Date | string
  }

  export type ParagraphUpdateWithoutSceneInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    paragraphRevisions?: ParagraphRevisionUpdateManyWithoutParagraphNestedInput
  }

  export type ParagraphUncheckedUpdateWithoutSceneInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    paragraphRevisions?: ParagraphRevisionUncheckedUpdateManyWithoutParagraphNestedInput
  }

  export type ParagraphUncheckedUpdateManyWithoutSceneInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
  }

  export type SceneCharacterUpdateWithoutSceneInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutParticipatingInScenesNestedInput
  }

  export type SceneCharacterUncheckedUpdateWithoutSceneInput = {
    characterId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneCharacterUncheckedUpdateManyWithoutSceneInput = {
    characterId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneReferredCharacterUpdateWithoutSceneInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character?: CharacterUpdateOneRequiredWithoutReferredInScenesNestedInput
  }

  export type SceneReferredCharacterUncheckedUpdateWithoutSceneInput = {
    characterId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneReferredCharacterUncheckedUpdateManyWithoutSceneInput = {
    characterId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParagraphRevisionCreateManyParagraphInput = {
    id?: string
    body: string
    contentSchema?: string | null
    version?: number
    state?: $Enums.ParagraphState | null
    aiCharacters?: number | null
    humanCharacters?: number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ParagraphRevisionUpdateWithoutParagraphInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    contentSchema?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    state?: NullableEnumParagraphStateFieldUpdateOperationsInput | $Enums.ParagraphState | null
    aiCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    humanCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paragraphComment?: ParagraphCommentUpdateManyWithoutParagraphRevisionNestedInput
  }

  export type ParagraphRevisionUncheckedUpdateWithoutParagraphInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    contentSchema?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    state?: NullableEnumParagraphStateFieldUpdateOperationsInput | $Enums.ParagraphState | null
    aiCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    humanCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paragraphComment?: ParagraphCommentUncheckedUpdateManyWithoutParagraphRevisionNestedInput
  }

  export type ParagraphRevisionUncheckedUpdateManyWithoutParagraphInput = {
    id?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    contentSchema?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    state?: NullableEnumParagraphStateFieldUpdateOperationsInput | $Enums.ParagraphState | null
    aiCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    humanCharacters?: NullableIntFieldUpdateOperationsInput | number | null
    plotPointActions?: NullableJsonNullValueInput | InputJsonValue
    inventoryActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParagraphCommentCreateManyParagraphRevisionInput = {
    id?: number
    ownerId: number
    body: string
    type?: $Enums.ParagraphCommentType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParagraphCommentUpdateWithoutParagraphRevisionInput = {
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumParagraphCommentTypeFieldUpdateOperationsInput | $Enums.ParagraphCommentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutParagraphCommentsNestedInput
  }

  export type ParagraphCommentUncheckedUpdateWithoutParagraphRevisionInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumParagraphCommentTypeFieldUpdateOperationsInput | $Enums.ParagraphCommentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParagraphCommentUncheckedUpdateManyWithoutParagraphRevisionInput = {
    id?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
    body?: StringFieldUpdateOperationsInput | string
    type?: EnumParagraphCommentTypeFieldUpdateOperationsInput | $Enums.ParagraphCommentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryCreateManyCoverArtFileInput = {
    id?: string
    name?: string
    summary?: string | null
    ownerId: number
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    defaultProtagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
  }

  export type BookCreateManyCoverArtFileInput = {
    id?: string
    name?: string
    summary?: string | null
    storyId: string
    spineArtFileId?: string | null
    pages?: number | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookCreateManySpineArtFileInput = {
    id?: string
    name?: string
    summary?: string | null
    storyId: string
    coverArtFileId?: string | null
    pages?: number | null
    sortOrder: number
    nodeType?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterCreateManyPictureFileInput = {
    id?: string
    storyId: string
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    laterVersionOfId?: string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationCreateManyPictureFileInput = {
    id?: string
    storyId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryUpdateWithoutCoverArtFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: UserUpdateOneRequiredWithoutOwnedStoriesNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutStoryNestedInput
    defaultProtagonist?: CharacterUpdateOneWithoutDefaultProtagonistForStoryNestedInput
    books?: BookUpdateManyWithoutStoryNestedInput
    files?: FileUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUpdateManyWithoutStoryNestedInput
    characters?: CharacterUpdateManyWithoutStoryNestedInput
    locations?: LocationUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUpdateManyWithoutStoryNestedInput
    items?: ItemUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateWithoutCoverArtFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    defaultProtagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutStoryNestedInput
    books?: BookUncheckedUpdateManyWithoutStoryNestedInput
    files?: FileUncheckedUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUncheckedUpdateManyWithoutStoryNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutStoryNestedInput
    locations?: LocationUncheckedUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUncheckedUpdateManyWithoutStoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateManyWithoutCoverArtFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    defaultProtagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookUpdateWithoutCoverArtFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutBooksNestedInput
    spineArtFile?: FileUpdateOneWithoutBookSpineArtNestedInput
    arcs?: ArcUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutCoverArtFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    storyId?: StringFieldUpdateOperationsInput | string
    spineArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    arcs?: ArcUncheckedUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateManyWithoutCoverArtFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    storyId?: StringFieldUpdateOperationsInput | string
    spineArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookUpdateWithoutSpineArtFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutBooksNestedInput
    coverArtFile?: FileUpdateOneWithoutBookCoverArtNestedInput
    arcs?: ArcUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutSpineArtFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    storyId?: StringFieldUpdateOperationsInput | string
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    arcs?: ArcUncheckedUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateManyWithoutSpineArtFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    storyId?: StringFieldUpdateOperationsInput | string
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterUpdateWithoutPictureFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutCharactersNestedInput
    laterVersionOf?: CharacterUpdateOneWithoutPreviousVersionNestedInput
    previousVersion?: CharacterUpdateManyWithoutLaterVersionOfNestedInput
    defaultProtagonistForStory?: StoryUpdateManyWithoutDefaultProtagonistNestedInput
    sceneProtagonistIn?: SceneUpdateManyWithoutProtagonistNestedInput
    participatingInScenes?: SceneCharacterUpdateManyWithoutCharacterNestedInput
    referredInScenes?: SceneReferredCharacterUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutPictureFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    laterVersionOfId?: NullableStringFieldUpdateOperationsInput | string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousVersion?: CharacterUncheckedUpdateManyWithoutLaterVersionOfNestedInput
    defaultProtagonistForStory?: StoryUncheckedUpdateManyWithoutDefaultProtagonistNestedInput
    sceneProtagonistIn?: SceneUncheckedUpdateManyWithoutProtagonistNestedInput
    participatingInScenes?: SceneCharacterUncheckedUpdateManyWithoutCharacterNestedInput
    referredInScenes?: SceneReferredCharacterUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateManyWithoutPictureFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    laterVersionOfId?: NullableStringFieldUpdateOperationsInput | string | null
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUpdateWithoutPictureFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutLocationsNestedInput
    scenes?: SceneUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutPictureFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scenes?: SceneUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateManyWithoutPictureFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterCreateManyLaterVersionOfInput = {
    id?: string
    storyId: string
    pictureFileId?: string | null
    firstName: string
    middleName?: string | null
    lastName?: string | null
    nickname?: string | null
    summary?: string | null
    background?: string | null
    personality?: string | null
    personalityQuirks?: string | null
    likes?: string | null
    dislikes?: string | null
    age?: string | null
    gender?: string | null
    sexualOrientation?: string | null
    height?: number | null
    hairColor?: string | null
    eyeColor?: string | null
    distinguishingFeatures?: string | null
    writingStyle?: string | null
    isMainCharacter?: boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoryCreateManyDefaultProtagonistInput = {
    id?: string
    name?: string
    summary?: string | null
    ownerId: number
    royalRoadId?: number | null
    published?: boolean
    status?: $Enums.StoryStatus
    type?: $Enums.StoryType
    wordsPerWeek?: number | null
    spellingLevel?: number | null
    chapters?: number | null
    firstChapterReleasedAt?: Date | string | null
    lastChapterReleasedAt?: Date | string | null
    coverArtFileId?: string | null
    coverColor?: string
    coverTextColor?: string
    coverFontFamily?: string
    defaultPerspective?: $Enums.Perspective | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sortOrder?: number
    pages?: number | null
  }

  export type SceneCreateManyProtagonistInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    chapterId: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    locationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SceneCharacterCreateManyCharacterInput = {
    sceneId: string
    assignedAt?: Date | string
  }

  export type SceneReferredCharacterCreateManyCharacterInput = {
    sceneId: string
    assignedAt?: Date | string
  }

  export type CharacterUpdateWithoutLaterVersionOfInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: StoryUpdateOneRequiredWithoutCharactersNestedInput
    pictureFile?: FileUpdateOneWithoutCharacterPictureNestedInput
    previousVersion?: CharacterUpdateManyWithoutLaterVersionOfNestedInput
    defaultProtagonistForStory?: StoryUpdateManyWithoutDefaultProtagonistNestedInput
    sceneProtagonistIn?: SceneUpdateManyWithoutProtagonistNestedInput
    participatingInScenes?: SceneCharacterUpdateManyWithoutCharacterNestedInput
    referredInScenes?: SceneReferredCharacterUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutLaterVersionOfInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousVersion?: CharacterUncheckedUpdateManyWithoutLaterVersionOfNestedInput
    defaultProtagonistForStory?: StoryUncheckedUpdateManyWithoutDefaultProtagonistNestedInput
    sceneProtagonistIn?: SceneUncheckedUpdateManyWithoutProtagonistNestedInput
    participatingInScenes?: SceneCharacterUncheckedUpdateManyWithoutCharacterNestedInput
    referredInScenes?: SceneReferredCharacterUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateManyWithoutLaterVersionOfInput = {
    id?: StringFieldUpdateOperationsInput | string
    storyId?: StringFieldUpdateOperationsInput | string
    pictureFileId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    personality?: NullableStringFieldUpdateOperationsInput | string | null
    personalityQuirks?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: NullableStringFieldUpdateOperationsInput | string | null
    dislikes?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    sexualOrientation?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    hairColor?: NullableStringFieldUpdateOperationsInput | string | null
    eyeColor?: NullableStringFieldUpdateOperationsInput | string | null
    distinguishingFeatures?: NullableStringFieldUpdateOperationsInput | string | null
    writingStyle?: NullableStringFieldUpdateOperationsInput | string | null
    isMainCharacter?: BoolFieldUpdateOperationsInput | boolean
    significantActions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryUpdateWithoutDefaultProtagonistInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    owner?: UserUpdateOneRequiredWithoutOwnedStoriesNestedInput
    bookShelfStories?: BookShelfStoryUpdateManyWithoutStoryNestedInput
    coverArtFile?: FileUpdateOneWithoutStoryCoverArtNestedInput
    books?: BookUpdateManyWithoutStoryNestedInput
    files?: FileUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUpdateManyWithoutStoryNestedInput
    characters?: CharacterUpdateManyWithoutStoryNestedInput
    locations?: LocationUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUpdateManyWithoutStoryNestedInput
    items?: ItemUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateWithoutDefaultProtagonistInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
    bookShelfStories?: BookShelfStoryUncheckedUpdateManyWithoutStoryNestedInput
    books?: BookUncheckedUpdateManyWithoutStoryNestedInput
    files?: FileUncheckedUpdateManyWithoutStoryNestedInput
    storyReadStatuses?: StoryReadStatusUncheckedUpdateManyWithoutStoryNestedInput
    storyTags?: StoryTagUncheckedUpdateManyWithoutStoryNestedInput
    characters?: CharacterUncheckedUpdateManyWithoutStoryNestedInput
    locations?: LocationUncheckedUpdateManyWithoutStoryNestedInput
    plotPoints?: PlotPointUncheckedUpdateManyWithoutStoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateManyWithoutDefaultProtagonistInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    royalRoadId?: NullableIntFieldUpdateOperationsInput | number | null
    published?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumStoryStatusFieldUpdateOperationsInput | $Enums.StoryStatus
    type?: EnumStoryTypeFieldUpdateOperationsInput | $Enums.StoryType
    wordsPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    spellingLevel?: NullableIntFieldUpdateOperationsInput | number | null
    chapters?: NullableIntFieldUpdateOperationsInput | number | null
    firstChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastChapterReleasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coverArtFileId?: NullableStringFieldUpdateOperationsInput | string | null
    coverColor?: StringFieldUpdateOperationsInput | string
    coverTextColor?: StringFieldUpdateOperationsInput | string
    coverFontFamily?: StringFieldUpdateOperationsInput | string
    defaultPerspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    pages?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SceneUpdateWithoutProtagonistInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapter?: ChapterUpdateOneRequiredWithoutScenesNestedInput
    location?: LocationUpdateOneWithoutScenesNestedInput
    paragraphs?: ParagraphUpdateManyWithoutSceneNestedInput
    participatingCharacters?: SceneCharacterUpdateManyWithoutSceneNestedInput
    referredCharacters?: SceneReferredCharacterUpdateManyWithoutSceneNestedInput
  }

  export type SceneUncheckedUpdateWithoutProtagonistInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    chapterId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paragraphs?: ParagraphUncheckedUpdateManyWithoutSceneNestedInput
    participatingCharacters?: SceneCharacterUncheckedUpdateManyWithoutSceneNestedInput
    referredCharacters?: SceneReferredCharacterUncheckedUpdateManyWithoutSceneNestedInput
  }

  export type SceneUncheckedUpdateManyWithoutProtagonistInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    chapterId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneCharacterUpdateWithoutCharacterInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scene?: SceneUpdateOneRequiredWithoutParticipatingCharactersNestedInput
  }

  export type SceneCharacterUncheckedUpdateWithoutCharacterInput = {
    sceneId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneCharacterUncheckedUpdateManyWithoutCharacterInput = {
    sceneId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneReferredCharacterUpdateWithoutCharacterInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scene?: SceneUpdateOneRequiredWithoutReferredCharactersNestedInput
  }

  export type SceneReferredCharacterUncheckedUpdateWithoutCharacterInput = {
    sceneId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneReferredCharacterUncheckedUpdateManyWithoutCharacterInput = {
    sceneId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SceneCreateManyLocationInput = {
    id?: string
    name?: string
    summary?: string | null
    body: string
    chapterId: string
    sortOrder: number
    nodeType?: string
    perspective?: $Enums.Perspective | null
    protagonistId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SceneUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapter?: ChapterUpdateOneRequiredWithoutScenesNestedInput
    protagonist?: CharacterUpdateOneWithoutSceneProtagonistInNestedInput
    paragraphs?: ParagraphUpdateManyWithoutSceneNestedInput
    participatingCharacters?: SceneCharacterUpdateManyWithoutSceneNestedInput
    referredCharacters?: SceneReferredCharacterUpdateManyWithoutSceneNestedInput
  }

  export type SceneUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    chapterId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    protagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paragraphs?: ParagraphUncheckedUpdateManyWithoutSceneNestedInput
    participatingCharacters?: SceneCharacterUncheckedUpdateManyWithoutSceneNestedInput
    referredCharacters?: SceneReferredCharacterUncheckedUpdateManyWithoutSceneNestedInput
  }

  export type SceneUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    chapterId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    nodeType?: StringFieldUpdateOperationsInput | string
    perspective?: NullableEnumPerspectiveFieldUpdateOperationsInput | $Enums.Perspective | null
    protagonistId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}