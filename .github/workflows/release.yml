name: "publish"

on:
  push:
    branches:
      - release
      - main

jobs:
  build-ubuntu-windows:
    strategy:
      fail-fast: true
      matrix:
        include:
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "pnpm" # Set this to npm, yarn or pnpm.

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./apps/writer/src-tauri -> target"

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: pnpm install # change this to npm or pnpm depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: apps/writer
          tagName: writer-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "Writer v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          tauriScript: pnpm tauri

  build-macos:
    strategy:
      matrix:
        include:
          - args: "--target aarch64-apple-darwin"
            arch: "silicon"
          - args: "--target x86_64-apple-darwin"
            arch: "intel"
    runs-on: macos-latest
    permissions:
      contents: write
    env:
      APPLE_API_KEY: ${{ vars.APPLE_API_KEY }}
      APPLE_API_ISSUER: ${{ vars.APPLE_API_ISSUER_ID }}
      APPLE_API_KEY_PATH: ./apple_id.p8
    steps:
      - uses: actions/checkout@v4
      - name: Write API Key certificate
        env:
          APPLE_API_KEY_DATA: ${{ secrets.APPLE_API_KEY_DATA }}
        run: echo $APPLE_API_KEY_DATA | base64 --decode > ./apple_id.p8
      - name: Import Apple Developer Certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain
      - name: Verify Certificate
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."
      - name: install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "pnpm" # Set this to npm, yarn or pnpm.

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: aarch64-apple-darwin,x86_64-apple-darwin
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./apps/writer/src-tauri -> target"

      - name: install frontend dependencies
        run: pnpm install
        working-directory: apps/writer
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
        with:
          projectPath: apps/writer
          args: ${{ matrix.args }}
          tagName: writer-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "Writer v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          tauriScript: pnpm tauri
